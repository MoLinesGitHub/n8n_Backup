={
  "createdAt": "2025-06-30T12:13:34.704Z",
  "updatedAt": "2025-06-30T14:05:33.000Z",
  "id": "1lF0sJBU7jnkAIkl",
  "name": "Acceso a XCODE CLI para Claude",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -300,
        540
      ],
      "id": "1b925f2e-b5ed-49cc-b06c-c633203828dd",
      "name": "Manual Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Xcode CLI Command Parser & Formatter for MCP Claude\nconst input = $input.all();\nconst requestData = (input[0] && input[0].json) || {\n  command_type: \"project\",\n  action: \"list_schemes\",\n  parameters: {\n    project_name: \"Cortes\"\n  }\n};\n\n// Complete Xcode CLI Commands Toolbox\nconst xcodeCommands = {\n  build: {\n    \"build_project\": \"xcodebuild -project {{project_name}}.xcodeproj -scheme {{scheme}} -configuration {{config}} build\",\n    \"build_workspace\": \"xcodebuild -workspace {{workspace}}.xcworkspace -scheme {{scheme}} -configuration {{config}} build\",\n    \"build_for_device\": \"xcodebuild -project {{project_name}}.xcodeproj -scheme {{scheme}} -configuration Release -arch arm64 build\",\n    \"build_for_simulator\": \"xcodebuild -project {{project_name}}.xcodeproj -scheme {{scheme}} -configuration Debug -arch x86_64 -sdk iphonesimulator build\",\n    \"clean_build\": \"xcodebuild clean -project {{project_name}}.xcodeproj -scheme {{scheme}}\",\n    \"clean_workspace\": \"xcodebuild clean -workspace {{workspace}}.xcworkspace -scheme {{scheme}}\",\n    \"build_settings\": \"xcodebuild -project {{project_name}}.xcodeproj -target {{target}} -showBuildSettings\",\n    \"derived_data_clean\": \"rm -rf ~/Library/Developer/Xcode/DerivedData\"\n  },\n  project: {\n    \"list_schemes\": \"xcodebuild -list -project {{project_name}}.xcodeproj\",\n    \"list_workspace_schemes\": \"xcodebuild -list -workspace {{workspace}}.xcworkspace\",\n    \"show_destinations\": \"xcodebuild -showdestinations -project {{project_name}}.xcodeproj -scheme {{scheme}}\",\n    \"project_info\": \"xcodebuild -project {{project_name}}.xcodeproj -list\",\n    \"workspace_info\": \"xcodebuild -workspace {{workspace}}.xcworkspace -list\",\n    \"sdk_info\": \"xcodebuild -showsdks\",\n    \"version_info\": \"xcodebuild -version\"\n  },\n  simulator: {\n    \"list_simulators\": \"xcrun simctl list devices\",\n    \"list_device_types\": \"xcrun simctl list devicetypes\",\n    \"list_runtimes\": \"xcrun simctl list runtimes\",\n    \"boot_simulator\": \"xcrun simctl boot {{device_id}}\",\n    \"shutdown_simulator\": \"xcrun simctl shutdown {{device_id}}\",\n    \"erase_simulator\": \"xcrun simctl erase {{device_id}}\",\n    \"install_app\": \"xcrun simctl install {{device_id}} {{app_path}}\",\n    \"uninstall_app\": \"xcrun simctl uninstall {{device_id}} {{bundle_id}}\",\n    \"launch_app\": \"xcrun simctl launch {{device_id}} {{bundle_id}}\",\n    \"terminate_app\": \"xcrun simctl terminate {{device_id}} {{bundle_id}}\",\n    \"open_simulator\": \"open -a Simulator\",\n    \"screenshot\": \"xcrun simctl io {{device_id}} screenshot {{filename}}\",\n    \"record_video\": \"xcrun simctl io {{device_id}} recordVideo {{filename}}\",\n    \"create_device\": \"xcrun simctl create {{device_name}} {{device_type}} {{runtime}}\",\n    \"delete_device\": \"xcrun simctl delete {{device_id}}\",\n    \"reset_content\": \"xcrun simctl erase all\"\n  },\n  device: {\n    \"list_devices\": \"xcrun devicectl list devices\",\n    \"device_info\": \"xcrun devicectl list devices --json\",\n    \"install_on_device\": \"xcrun devicectl device install app --device {{device_id}} {{app_path}}\",\n    \"launch_on_device\": \"xcrun devicectl device process launch --device {{device_id}} {{bundle_id}}\",\n    \"device_logs\": \"xcrun devicectl device log stream --device {{device_id}}\",\n    \"crash_logs\": \"xcrun devicectl device log collect --device {{device_id}}\",\n    \"device_sysdiagnose\": \"xcrun devicectl device sysdiagnose --device {{device_id}}\",\n    \"pair_device\": \"xcrun devicectl device pair --device {{device_id}}\",\n    \"unpair_device\": \"xcrun devicectl device unpair --device {{device_id}}\"\n  },\n  archive: {\n    \"archive_project\": \"xcodebuild -project {{project_name}}.xcodeproj -scheme {{scheme}} -configuration Release archive -archivePath {{archive_path}}\",\n    \"archive_workspace\": \"xcodebuild -workspace {{workspace}}.xcworkspace -scheme {{scheme}} -configuration Release archive -archivePath {{archive_path}}\",\n    \"export_ipa\": \"xcodebuild -exportArchive -archivePath {{archive_path}} -exportPath {{export_path}} -exportOptionsPlist {{export_options_plist}}\",\n    \"create_export_options\": \"echo '<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n<plist version=\\\"1.0\\\">\\n<dict>\\n    <key>method</key>\\n    <string>{{method}}</string>\\n    <key>teamID</key>\\n    <string>{{team_id}}</string>\\n</dict>\\n</plist>' > {{export_options_path}}\",\n    \"validate_archive\": \"xcodebuild -exportArchive -archivePath {{archive_path}} -exportPath {{export_path}} -exportOptionsPlist {{export_options_plist}} -allowProvisioningUpdates -allowProvisioningDeviceRegistration\"\n  },\n  testing: {\n    \"run_tests\": \"xcodebuild test -project {{project_name}}.xcodeproj -scheme {{scheme}} -destination '{{destination}}'\",\n    \"run_ui_tests\": \"xcodebuild test -project {{project_name}}.xcodeproj -scheme {{scheme}} -destination '{{destination}}' -only-testing:{{target}}UITests\",\n    \"run_unit_tests\": \"xcodebuild test -project {{project_name}}.xcodeproj -scheme {{scheme}} -destination '{{destination}}' -only-testing:{{target}}Tests\",\n    \"test_without_building\": \"xcodebuild test-without-building -project {{project_name}}.xcodeproj -scheme {{scheme}} -destination '{{destination}}'\",\n    \"build_for_testing\": \"xcodebuild build-for-testing -project {{project_name}}.xcodeproj -scheme {{scheme}} -destination '{{destination}}'\",\n    \"test_parallel\": \"xcodebuild test -project {{project_name}}.xcodeproj -scheme {{scheme}} -destination '{{destination}}' -parallel-testing-enabled YES\",\n    \"test_results\": \"xcrun xcresulttool get --format json --path {{result_bundle_path}}\"\n  },\n  provisioning: {\n    \"list_certificates\": \"security find-identity -v -p codesigning\",\n    \"list_provisioning_profiles\": \"ls -la ~/Library/MobileDevice/Provisioning\\\\ Profiles/\",\n    \"install_provisioning_profile\": \"cp {{profile_path}} ~/Library/MobileDevice/Provisioning\\\\ Profiles/\",\n    \"delete_provisioning_profile\": \"rm ~/Library/MobileDevice/Provisioning\\\\ Profiles/{{profile_name}}\",\n    \"verify_code_signing\": \"codesign -dv --verbose=4 {{app_path}}\",\n    \"check_entitlements\": \"codesign -d --entitlements :- {{app_path}}\",\n    \"sign_app\": \"codesign --force --sign \\\"{{certificate_name}}\\\" {{app_path}}\"\n  },\n  analysis: {\n    \"analyze_project\": \"xcodebuild analyze -project {{project_name}}.xcodeproj -scheme {{scheme}}\",\n    \"instruments_trace\": \"xcrun instruments -t {{template}} -D {{trace_file}} {{app_path}}\",\n    \"memory_graph\": \"xcrun leaks {{app_path}}\",\n    \"static_analyzer\": \"xcrun clang --analyze {{source_files}}\",\n    \"dependency_graph\": \"xcodebuild -project {{project_name}}.xcodeproj -target {{target}} -showBuildTimeSummary\",\n    \"build_time_analysis\": \"xcodebuild -project {{project_name}}.xcodeproj -scheme {{scheme}} OTHER_SWIFT_FLAGS=\\\"-Xfrontend -debug-time-function-bodies\\\"\",\n    \"crash_symbolication\": \"xcrun atos -o {{dsym_path}} -arch {{arch}} {{address}}\",\n    \"console_logs\": \"xcrun devicectl device log stream --device {{device_id}} --style compact\"\n  }\n};\n\nconst commandType = requestData.command_type;\nconst action = requestData.action;\nconst parameters = requestData.parameters || {};\n\nlet commandTemplate = xcodeCommands[commandType]?.[action];\n\nif (!commandTemplate) {\n  return [{\n    json: {\n      success: false,\n      error: `Command not found: ${commandType}.${action}`,\n      available_commands: Object.keys(xcodeCommands),\n      timestamp: new Date().toISOString(),\n      mcp_ready: true\n    }\n  }];\n}\n\nlet finalCommand = commandTemplate;\nfor (const [key, value] of Object.entries(parameters)) {\n  finalCommand = finalCommand.replace(new RegExp(`{{${key}}}`, 'g'), value);\n}\n\nconst unreplacedParams = finalCommand.match(/{{\\w+}}/g);\nif (unreplacedParams) {\n  return [{\n    json: {\n      success: false,\n      error: \"Missing required parameters\",\n      missing_parameters: unreplacedParams.map(p => p.replace(/[{}]/g, '')),\n      command_template: commandTemplate,\n      timestamp: new Date().toISOString(),\n      mcp_ready: true\n    }\n  }];\n}\n\nconst diagnosticCommands = [\n  'xcode-select -p',\n  'which xcodebuild', \n  'xcodebuild -version',\n  'whoami',\n  'pwd'\n];\n\nconsole.log(\"🔍 Diagnostic info for debugging:\");\ndiagnosticCommands.forEach(cmd => {\n  console.log(`Command: ${cmd}`);\n});\nreturn [{\n  json: {\n    xcode_command: finalCommand,\n    command_type: commandType,\n    action: action,\n    project_path: parameters.project_path || requestData.project_path || '/Users/' + $env.USER + '/Documents/Cortes',\n    timestamp: new Date().toISOString(),\n    mcp_ready: true\n  }\n}];"
      },
      "id": "02a0959e-1b7a-4000-8880-700517b50942",
      "name": "Command Parser",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        440
      ]
    },
    {
      "parameters": {
        "command": "=const command = `~/xcode-wrapper.sh ${$json.xcode_command}`;"
      },
      "id": "7bd64779-3cfb-4fc0-8565-4284c29903ec",
      "name": "Xcode Executor",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        360,
        440
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\nconst executionResult = input[0].json;\n\nconst stdout = executionResult.stdout || '';\nconst stderr = executionResult.stderr || '';\nconst exitCode = executionResult.exitCode || 0;\nconst command = executionResult.command || '';\n\nconst success = exitCode === 0;\n\nfunction parseXcodeOutput(output, command) {\n  const parsed = {\n    raw: output,\n    structured: {},\n    insights: [],\n    warnings: [],\n    errors: []\n  };\n  \n  if (command.includes('xcodebuild')) {\n    const buildPhases = output.match(/=== BUILD TARGET .+ ===/g) || [];\n    parsed.structured.build_phases = buildPhases;\n    \n    const compiledFiles = output.match(/CompileC .+/g) || [];\n    parsed.structured.compiled_files = compiledFiles.length;\n    \n    const linkCommands = output.match(/Ld .+/g) || [];\n    parsed.structured.link_commands = linkCommands;\n    \n    const buildTime = output.match(/BUILD SUCCEEDED \\((\\d+\\.\\d+) seconds\\)/);\n    if (buildTime) {\n      parsed.structured.build_time = parseFloat(buildTime[1]);\n      parsed.insights.push(`Build completed in ${buildTime[1]} seconds`);\n    }\n    \n    const warnings = output.match(/warning: .+/g) || [];\n    parsed.warnings = warnings;\n    \n    const errors = output.match(/error: .+/g) || [];\n    parsed.errors = errors;\n  }\n  \n  if (command.includes('simctl')) {\n    try {\n      if (output.trim().startsWith('{') || output.trim().startsWith('[')) {\n        parsed.structured = JSON.parse(output);\n      } else {\n        const deviceMatches = output.match(/([A-F0-9-]+) \\((.+?)\\) \\((.+?)\\)/g) || [];\n        parsed.structured.devices = deviceMatches.map(match => {\n          const parts = match.match(/([A-F0-9-]+) \\((.+?)\\) \\((.+?)\\)/);\n          return {\n            udid: parts[1],\n            name: parts[2],\n            state: parts[3]\n          };\n        });\n      }\n    } catch (e) {\n      parsed.structured.parse_error = e.message;\n    }\n  }\n  \n  if (command.includes('test')) {\n    const testSummary = output.match(/Test Suite '(.+)' (passed|failed)/g) || [];\n    parsed.structured.test_suites = testSummary;\n    \n    const testCases = output.match(/Test Case '-\\[.+\\]' (passed|failed)/g) || [];\n    parsed.structured.test_cases = testCases.length;\n    \n    const passedTests = output.match(/Test Case '-\\[.+\\]' passed/g) || [];\n    const failedTests = output.match(/Test Case '-\\[.+\\]' failed/g) || [];\n    \n    parsed.structured.passed_tests = passedTests.length;\n    parsed.structured.failed_tests = failedTests.length;\n    \n    if (failedTests.length > 0) {\n      parsed.insights.push(`${failedTests.length} tests failed`);\n    }\n  }\n  \n  return parsed;\n}\n\nfunction generateInsights(parsed, success, exitCode) {\n  const insights = [...parsed.insights];\n  \n  if (!success) {\n    insights.push(`Command failed with exit code ${exitCode}`);\n    \n    if (parsed.errors.length > 0) {\n      insights.push(`Found ${parsed.errors.length} compilation errors`);\n    }\n    \n    if (exitCode === 65) {\n      insights.push(\"Build failed - check compilation errors and dependencies\");\n    }\n    \n    if (exitCode === 70) {\n      insights.push(\"Internal software error - try cleaning build folder\");\n    }\n  } else {\n    insights.push(\"Command executed successfully\");\n  }\n  \n  if (parsed.warnings.length > 0) {\n    insights.push(`${parsed.warnings.length} warnings detected - consider reviewing`);\n  }\n  \n  return insights;\n}\n\nconst stdoutParsed = parseXcodeOutput(stdout, command);\nconst stderrParsed = parseXcodeOutput(stderr, command);\n\nconst allInsights = [\n  ...generateInsights(stdoutParsed, success, exitCode),\n  ...generateInsights(stderrParsed, success, exitCode)\n];\n\nconst response = {\n  success: success,\n  exit_code: exitCode,\n  command_executed: command,\n  timestamp: new Date().toISOString(),\n  \n  outputs: {\n    stdout: stdout,\n    stderr: stderr\n  },\n  \n  parsed_results: {\n    stdout: stdoutParsed,\n    stderr: stderrParsed\n  },\n  \n  insights: allInsights,\n  \n  summary: {\n    total_warnings: stdoutParsed.warnings.length + stderrParsed.warnings.length,\n    total_errors: stdoutParsed.errors.length + stderrParsed.errors.length,\n    execution_time: new Date().toISOString(),\n    needs_attention: !success || (stdoutParsed.errors.length + stderrParsed.errors.length) > 0\n  },\n  \n  mcp_ready: true,\n  claude_digestible: true,\n  \n  suggested_actions: success ? \n    [\"continue_development\", \"run_tests\", \"build_next_phase\"] : \n    [\"fix_errors\", \"clean_build\", \"check_dependencies\", \"review_logs\"]\n};\n\nreturn [{ json: response }];"
      },
      "id": "18d92078-9b15-4482-aa8b-b9ac742565cd",
      "name": "Result Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        440
      ]
    },
    {
      "parameters": {
        "multipleMethods": true,
        "httpMethod": [
          "POST"
        ],
        "path": "4fee8b9e-366f-4601-a02a-013ea2a61aec",
        "responseMode": "lastNode",
        "responseData": "allEntries",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -300,
        340
      ],
      "id": "0912a482-cf2c-418a-a401-2ec305760f0a",
      "name": "Webhook",
      "webhookId": "4fee8b9e-366f-4601-a02a-013ea2a61aec"
    },
    {
      "parameters": {
        "jsCode": "// Nodo Debug - Code Node\nconst input = $input.all();\nconst commandData = input[0].json;\n\n// Test básico de conectividad con Xcode\nconst testCommands = [\n  'xcodebuild -version',\n  'xcode-select -p',\n  `ls -la \"${commandData.project_path}\"`,\n  `ls -la \"${commandData.project_path}/Cortes.xcodeproj\"`\n];\n\nreturn [{\n  json: {\n    ...commandData,\n    debug_commands: testCommands,\n    environment_check: true\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        440
      ],
      "id": "3bb19da1-87b2-4f19-a94c-ccf19fb7c35e",
      "name": "Debug and Connectivity"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "162f8fd0-8df0-44cd-a62c-0f73b0638e92",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        800,
        440
      ]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Command Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Parser": {
      "main": [
        [
          {
            "node": "Debug and Connectivity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Xcode Executor": {
      "main": [
        [
          {
            "node": "Result Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Result Formatter": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Command Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug and Connectivity": {
      "main": [
        [
          {
            "node": "Xcode Executor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "a7627289-8234-43ef-b75f-20a97443c87f",
  "triggerCount": 1,
  "tags": []
}