=ewogICJjcmVhdGVkQXQiOiAiMjAyNS0wNi0yOVQwMzoyNTozOC43MzVaIiwKICAidXBkYXRlZEF0IjogIjIwMjUtMDYtMjlUMjE6NDg6MTQuMDAwWiIsCiAgImlkIjogIldFaHFjckR5YjlmZEZIaW8iLAogICJuYW1lIjogIkNsYXVkZSBNQ1AgV29ya2Zsb3ciLAogICJhY3RpdmUiOiB0cnVlLAogICJpc0FyY2hpdmVkIjogZmFsc2UsCiAgIm5vZGVzIjogWwogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAiZnVuY3Rpb25Db2RlIjogIi8vIENvbmZpZ3VyYWNpw7NuIEVTUEVDw41GSUNBIHBhcmEgcHJveWVjdG8gQ29ydGVzIGVuIE1hYyAtIFZFUlNJw5NOIGlPU19Db3J0ZXNcbmNvbnN0IGJhc2VQcm9qZWN0UGF0aCA9ICcvZGF0YS9jb3J0ZXMvaU9TX0NvcnRlcyc7XG5jb25zdCBjb3J0ZXNBcHBQYXRoID0gJy9kYXRhL2NvcnRlcy9pT1NfQ29ydGVzJzsgIC8vIOKGkCBDQU1CSUFETyBBIGlPU19Db3J0ZXNcbmNvbnN0IGNvbnRleHRQYXRoID0gJy9kYXRhL2NvcnRlcy9jb3J0ZXMtY29udGV4dCc7XG5jb25zdCBtYWNQcm9qZWN0UGF0aCA9ICcvVXNlcnMvbW9saW5lc21hYy9Eb2N1bWVudHMvQ29ydGVzL21hY09TX0NvcnRlcyc7XG5jb25zdCBtYWNDb250ZXh0UGF0aCA9ICcvVXNlcnMvbW9saW5lc21hYy9Eb2N1bWVudHMvQ29ydGVzL2NvcnRlcy1jb250ZXh0JztcblxuY29uc3QgY29uZmlnID0ge1xuICBwcm9qZWN0X3BhdGg6IGJhc2VQcm9qZWN0UGF0aCxcbiAgY29ydGVzX2FwcF9wYXRoOiBjb3J0ZXNBcHBQYXRoLFxuICBjb250ZXh0X3BhdGg6IGNvbnRleHRQYXRoLFxuICBtYWNfcHJvamVjdF9wYXRoOiBtYWNQcm9qZWN0UGF0aCxcbiAgbWFjX2NvbnRleHRfcGF0aDogbWFjQ29udGV4dFBhdGgsXG4gIGRldGVjdGVkX2F1dG9tYXRpY2FsbHk6IHRydWUsXG4gIHJlYWxfcGF0aF9mb3VuZDogdHJ1ZSxcbiAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gIGNvbnRhaW5lcl9pZDogcHJvY2Vzcy5lbnYuSE9TVE5BTUUgfHwgJ244bi1jb250YWluZXInLFxuICB3b3JrZmxvd192ZXJzaW9uOiAnOC4wLjItaW9zLWNvcnRlcy1maXhlZCdcbn07XG5cbmNvbnNvbGUubG9nKCfinIUgQ29ydGVzIHByb2plY3QgcGF0aHMgY29uZmlndXJlZCBmb3IgaU9TX0NvcnRlczonLCBjb25maWcpO1xucmV0dXJuIFt7IGpzb246IGNvbmZpZyB9XTsiCiAgICAgIH0sCiAgICAgICJuYW1lIjogIkNvbmZpZ3VyZSBDb3J0ZXMgUHJvamVjdCBQYXRocyIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmZ1bmN0aW9uIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC0yMDgwLAogICAgICAgIC03NDAKICAgICAgXSwKICAgICAgImlkIjogIjZlYzQ1MTgwLTdkZGItNGY0My1iZmExLWE5NWY2MDYwN2RhZiIKICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJjb21tYW5kIjogIm1rZGlyIC1wIHt7ICRqc29uLmNvbnRleHRfcGF0aCB9fSAmJiBlY2hvICfinIUgQ29udGV4dCBkaXJlY3RvcnkgZW5zdXJlZCBhdCB7eyAkanNvbi5jb250ZXh0X3BhdGggfX0nICYmIGxzIC1sYSB7eyAkanNvbi5wcm9qZWN0X3BhdGggfX0gMj4vZGV2L251bGwgfHwgZWNobyAncHJvamVjdF9wYXRoX25lZWRzX3ZvbHVtZV9tYXBwaW5nJyIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiRW5zdXJlIENvbnRleHQgRGlyZWN0b3J5IiwKICAgICAgInR5cGUiOiAibjhuLW5vZGVzLWJhc2UuZXhlY3V0ZUNvbW1hbmQiLAogICAgICAidHlwZVZlcnNpb24iOiAxLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTE4NjAsCiAgICAgICAgLTc0MAogICAgICBdLAogICAgICAiaWQiOiAiM2ZmNTY4OWEtYWVkYS00YzUyLTg5YmMtZThlNGFiZWM0NDQwIgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImNvbW1hbmQiOiAiZWNobyAn8J+UjSBTY2FubmluZyBDb3J0ZXMgcHJvamVjdCBmaWxlcy4uLicgJiYgZmluZCB7eyAkanNvbi5wcm9qZWN0X3BhdGggfX0gLW1heGRlcHRoIDggLXR5cGUgZiBcXCggLW5hbWUgJyouc3dpZnQnIC1vIC1uYW1lICcqLmpzb24nIC1vIC1uYW1lICcqLm1kJyAtbyAtbmFtZSAnKi5qcycgLW8gLW5hbWUgJyoudHMnIC1vIC1uYW1lICcqLmpzeCcgLW8gLW5hbWUgJyoudHN4JyAtbyAtbmFtZSAnKi54Y29kZXByb2onIC1vIC1uYW1lICcqLnhjd29ya3NwYWNlJyAtbyAtbmFtZSAnUGFja2FnZS5zd2lmdCcgLW8gLW5hbWUgJ0luZm8ucGxpc3QnIFxcKSAhIC1wYXRoICcqL2NvcnRlcy1jb250ZXh0LyonICEgLXBhdGggJyovbm9kZV9tb2R1bGVzLyonICEgLXBhdGggJyovLmdpdC8qJyAhIC1wYXRoICcqL2J1aWxkLyonICEgLXBhdGggJyovRGVyaXZlZERhdGEvKicgISAtcGF0aCAnKi9Qb2RzLyonICEgLXBhdGggJyovLmJ1aWxkLyonICEgLXBhdGggJyoveGN1c2VyZGF0YS8qJyAyPi9kZXYvbnVsbCB8IGhlYWQgLTE1MCB8fCBlY2hvICdub19wcm9qZWN0X2ZpbGVzX2ZvdW5kJyIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiU2NhbiBDb3J0ZXMgRmlsZXMiLAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5leGVjdXRlQ29tbWFuZCIsCiAgICAgICJ0eXBlVmVyc2lvbiI6IDEsCiAgICAgICJwb3NpdGlvbiI6IFsKICAgICAgICAtMTY0MCwKICAgICAgICAtMTM0MAogICAgICBdLAogICAgICAiaWQiOiAiZmRlNDFlYjMtOGI1Ni00ZDIzLWEzZmMtZmVlZWFjMzc0MjQxIgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImNvbW1hbmQiOiAiY2Qge3sgJGpzb24ucHJvamVjdF9wYXRoIH19IDI+L2Rldi9udWxsICYmIGVjaG8gJ/Cfk4ogR2l0IGFuYWx5c2lzIGZvciBDb3J0ZXM6JyAmJiBnaXQgc3RhdHVzIC0tcG9yY2VsYWluIDI+L2Rldi9udWxsICYmIGVjaG8gJ/Cfk4ggUmVjZW50IGNvbW1pdHM6JyAmJiBnaXQgbG9nIC0tc2luY2U9XCIzMCBkYXlzIGFnb1wiIC0tcHJldHR5PWZvcm1hdDpcIiVofCVhbnwlYWR8JXNcIiAtLWRhdGU9c2hvcnQgLS1tYXgtY291bnQ9NTAgMj4vZGV2L251bGwgfHwgZWNobyAnbm9fZ2l0X3JlcG9zaXRvcnlfZm91bmQnIgogICAgICB9LAogICAgICAibmFtZSI6ICJBbmFseXplIEdpdCBIaXN0b3J5IiwKICAgICAgInR5cGUiOiAibjhuLW5vZGVzLWJhc2UuZXhlY3V0ZUNvbW1hbmQiLAogICAgICAidHlwZVZlcnNpb24iOiAxLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTE2NDAsCiAgICAgICAgLTc0MAogICAgICBdLAogICAgICAiaWQiOiAiNzcyZjI2OWEtNjkzMy00NjAyLTliZWQtYTI0Y2ZiMWJkODg2IgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImNvbW1hbmQiOiAiY2Qge3sgJGpzb24ucHJvamVjdF9wYXRoIH19IDI+L2Rldi9udWxsICYmIGVjaG8gJ/Cfk4ogR2l0IHN0YXRpc3RpY3MgYW5hbHlzaXM6JyAmJiBnaXQgbG9nIC0tc2luY2U9XCIxNCBkYXlzIGFnb1wiIC0tbnVtc3RhdCAtLXByZXR0eT1mb3JtYXQ6XCIlaHwlYW58JWFkXCIgLS1kYXRlPXNob3J0IC0tbWF4LWNvdW50PTEwMCAyPi9kZXYvbnVsbCB8fCBlY2hvICdub19naXRfc3RhdHNfYXZhaWxhYmxlJyIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiQW5hbHl6ZSBHaXQgU3RhdHMiLAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5leGVjdXRlQ29tbWFuZCIsCiAgICAgICJ0eXBlVmVyc2lvbiI6IDEsCiAgICAgICJwb3NpdGlvbiI6IFsKICAgICAgICAtMTY0MCwKICAgICAgICAtNTQwCiAgICAgIF0sCiAgICAgICJpZCI6ICI1N2JkOTNmMi0yMzdmLTQyZGUtYjAyMy00OWZiNzcwNzhhNzUiCiAgICB9LAogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAiY29tbWFuZCI6ICJlY2hvICfwn6eqIFNjYW5uaW5nIENvcnRlcyB0ZXN0IGZpbGVzLi4uJyAmJiBmaW5kIHt7ICRqc29uLnByb2plY3RfcGF0aCB9fSAtbWF4ZGVwdGggOCAtdHlwZSBmIFxcKCAtbmFtZSAnKlRlc3QqLnN3aWZ0JyAtbyAtbmFtZSAnKlRlc3RzLnN3aWZ0JyAtbyAtbmFtZSAnKi50ZXN0LmpzJyAtbyAtbmFtZSAnKi5zcGVjLmpzJyAtbyAtbmFtZSAnKi50ZXN0LnRzJyAtbyAtbmFtZSAnKi5zcGVjLnRzJyAtbyAtbmFtZSAnKlVJVGVzdHMqLnN3aWZ0JyAtbyAtbmFtZSAnKlVuaXRUZXN0cyouc3dpZnQnIFxcKSAhIC1wYXRoICcqL2NvcnRlcy1jb250ZXh0LyonICEgLXBhdGggJyovbm9kZV9tb2R1bGVzLyonICEgLXBhdGggJyovLmdpdC8qJyAhIC1wYXRoICcqL2J1aWxkLyonICEgLXBhdGggJyovRGVyaXZlZERhdGEvKicgISAtcGF0aCAnKi94Y3VzZXJkYXRhLyonIDI+L2Rldi9udWxsIHx8IGVjaG8gJ25vX3Rlc3RfZmlsZXNfZm91bmQnIgogICAgICB9LAogICAgICAibmFtZSI6ICJBbmFseXplIFRlc3QgQ292ZXJhZ2UiLAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5leGVjdXRlQ29tbWFuZCIsCiAgICAgICJ0eXBlVmVyc2lvbiI6IDEsCiAgICAgICJwb3NpdGlvbiI6IFsKICAgICAgICAtMTY0MCwKICAgICAgICAtMTQwCiAgICAgIF0sCiAgICAgICJpZCI6ICI1NGM4YjQyZi01NzgwLTQ1YWMtYmI1MC0zZjBjMWQxNjFhZjMiCiAgICB9LAogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAiY29tbWFuZCI6ICJlY2hvICfwn46oIEFuYWx5emluZyBDb3J0ZXMgYXNzZXRzLi4uJyAmJiBmaW5kIHt7ICRqc29uLnByb2plY3RfcGF0aCB9fSAtbWF4ZGVwdGggOCAtdHlwZSBmIFxcKCAtbmFtZSAnKi5wbmcnIC1vIC1uYW1lICcqLmpwZycgLW8gLW5hbWUgJyouanBlZycgLW8gLW5hbWUgJyouc3ZnJyAtbyAtbmFtZSAnKi5naWYnIC1vIC1uYW1lICcqLnBkZicgLW8gLW5hbWUgJyoubXA0JyAtbyAtbmFtZSAnKi5tb3YnIC1vIC1uYW1lICcqLmhlaWMnIC1vIC1uYW1lICcqLndlYnAnIFxcKSAhIC1wYXRoICcqL2NvcnRlcy1jb250ZXh0LyonICEgLXBhdGggJyovbm9kZV9tb2R1bGVzLyonICEgLXBhdGggJyovLmdpdC8qJyAhIC1wYXRoICcqL2J1aWxkLyonICEgLXBhdGggJyovRGVyaXZlZERhdGEvKicgISAtcGF0aCAnKi94Y3VzZXJkYXRhLyonIC1leGVjIGR1IC1zaCB7fSBcXDsgMj4vZGV2L251bGwgfCBoZWFkIC0xMDAgfHwgZWNobyAnbm9fYXNzZXRzX2ZvdW5kJyIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiQW5hbHl6ZSBBc3NldHMgUGVyZm9ybWFuY2UiLAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5leGVjdXRlQ29tbWFuZCIsCiAgICAgICJ0eXBlVmVyc2lvbiI6IDEsCiAgICAgICJwb3NpdGlvbiI6IFsKICAgICAgICAtMTY0MCwKICAgICAgICA2MAogICAgICBdLAogICAgICAiaWQiOiAiODkyZjRjYzgtZDc4My00ZTE3LWE0N2QtMmY0YjFkNDkyMjFiIgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImNvbW1hbmQiOiAiZWNobyAn8J+TpiBBbmFseXppbmcgUGFja2FnZS5zd2lmdCBkZXBlbmRlbmNpZXMuLi4nICYmIGZpbmQge3sgJGpzb24ucHJvamVjdF9wYXRoIH19IC1tYXhkZXB0aCA1IC1uYW1lICdQYWNrYWdlLnN3aWZ0JyAtZXhlYyBlY2hvICdGb3VuZCBQYWNrYWdlLnN3aWZ0OiB7fScgXFw7IC1leGVjIGNhdCB7fSBcXDsgMj4vZGV2L251bGwgfHwgZWNobyAnbm9fcGFja2FnZV9zd2lmdF9mb3VuZCciCiAgICAgIH0sCiAgICAgICJuYW1lIjogIkFuYWx5emUgU3dpZnQgRGVwZW5kZW5jaWVzIiwKICAgICAgInR5cGUiOiAibjhuLW5vZGVzLWJhc2UuZXhlY3V0ZUNvbW1hbmQiLAogICAgICAidHlwZVZlcnNpb24iOiAxLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTE2NDAsCiAgICAgICAgLTExNDAKICAgICAgXSwKICAgICAgImlkIjogImIxNzYyY2IyLTZkNDYtNGMxYi05YzNiLTUxODYxMzM3OTIwZSIKICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJjb21tYW5kIjogImVjaG8gJ/CflJIgQW5hbHl6aW5nIFBhY2thZ2UucmVzb2x2ZWQuLi4nICYmIGZpbmQge3sgJGpzb24ucHJvamVjdF9wYXRoIH19IC1tYXhkZXB0aCA1IC1uYW1lICdQYWNrYWdlLnJlc29sdmVkJyAtZXhlYyBlY2hvICdGb3VuZCBQYWNrYWdlLnJlc29sdmVkOiB7fScgXFw7IC1leGVjIGNhdCB7fSBcXDsgMj4vZGV2L251bGwgfHwgZWNobyAnbm9fcGFja2FnZV9yZXNvbHZlZF9mb3VuZCciCiAgICAgIH0sCiAgICAgICJuYW1lIjogIkFuYWx5emUgU3dpZnQgUGFja2FnZSBMb2NrIiwKICAgICAgInR5cGUiOiAibjhuLW5vZGVzLWJhc2UuZXhlY3V0ZUNvbW1hbmQiLAogICAgICAidHlwZVZlcnNpb24iOiAxLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTE2NDAsCiAgICAgICAgLTk0MAogICAgICBdLAogICAgICAiaWQiOiAiODE3NjVhODAtYzAxZC00NWZkLTk3NDYtM2ZkZjNkNTIxNzYxIgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImNvbW1hbmQiOiAiZWNobyAn8J+ThCBBbmFseXppbmcgcGFja2FnZS5qc29uIGRlcGVuZGVuY2llcy4uLicgJiYgZmluZCB7eyAkanNvbi5wcm9qZWN0X3BhdGggfX0gLW1heGRlcHRoIDUgLW5hbWUgJ3BhY2thZ2UuanNvbicgLWV4ZWMgZWNobyAnRm91bmQgcGFja2FnZS5qc29uOiB7fScgXFw7IC1leGVjIGNhdCB7fSBcXDsgMj4vZGV2L251bGwgfHwgZWNobyAnbm9fcGFja2FnZV9qc29uX2ZvdW5kJyIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiQW5hbHl6ZSBOUE0gRGVwZW5kZW5jaWVzIiwKICAgICAgInR5cGUiOiAibjhuLW5vZGVzLWJhc2UuZXhlY3V0ZUNvbW1hbmQiLAogICAgICAidHlwZVZlcnNpb24iOiAxLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTE2NDAsCiAgICAgICAgLTM0MAogICAgICBdLAogICAgICAiaWQiOiAiZDg2ZWM1MzEtOWVkOS00MTM5LTljNWEtMzkyN2FlYzM0ZDU1IgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImZ1bmN0aW9uQ29kZSI6ICIvLyBBTsOBTElTSVMgUk9CVVNUTyBERSBFU1RSVUNUVVJBIERFTCBQUk9ZRUNUTyBDT1JURVNcbmNvbnN0IHByb2plY3RGaWxlcyA9IGl0ZW1zWzBdPy5qc29uPy5zdGRvdXQ/LnRyaW0oKSB8fCAnJztcbmNvbnN0IHBhdGhDb25maWcgPSBpdGVtc1sxXT8uanNvbiB8fCB7fTtcblxuY29uc3QgYW5hbHlzaXMgPSB7XG4gIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICBwcm9qZWN0X25hbWU6ICdDb3J0ZXMnLFxuICBwcm9qZWN0X3BhdGg6IHBhdGhDb25maWcucHJvamVjdF9wYXRoIHx8ICcvZGF0YS9jb3J0ZXMnLFxuICBjb3J0ZXNfYXBwX3BhdGg6IHBhdGhDb25maWcuY29ydGVzX2FwcF9wYXRoIHx8ICcvZGF0YS9jb3J0ZXMvQ29ydGVzJyxcbiAgcHJvamVjdF9kZXRlY3RlZDogcGF0aENvbmZpZy5kZXRlY3RlZF9hdXRvbWF0aWNhbGx5IHx8IGZhbHNlLFxuICBzY2FuX3N1Y2Nlc3NmdWw6ICFwcm9qZWN0RmlsZXMuaW5jbHVkZXMoJ25vX3Byb2plY3RfZmlsZXNfZm91bmQnKSAmJiAhcHJvamVjdEZpbGVzLmluY2x1ZGVzKCdwcm9qZWN0X3BhdGhfbmVlZHNfdm9sdW1lX21hcHBpbmcnKSxcbiAgZmlsZXNfZm91bmQ6IHByb2plY3RGaWxlcyAhPT0gJ25vX3Byb2plY3RfZmlsZXNfZm91bmQnICYmIHByb2plY3RGaWxlcy5sZW5ndGggPiAwLFxuICB0b3RhbF9maWxlczogMCxcbiAgY2F0ZWdvcmllczoge1xuICAgIHN3aWZ0X2ZpbGVzOiAwLFxuICAgIGpzX2ZpbGVzOiAwLFxuICAgIGNvbmZpZ19maWxlczogMCxcbiAgICBkb2N1bWVudGF0aW9uOiAwLFxuICAgIHhjb2RlX3Byb2plY3RzOiAwLFxuICAgIGluZm9fcGxpc3RzOiAwXG4gIH0sXG4gIGNvcnRlc19zdHJ1Y3R1cmU6IHtcbiAgICBtYWluX2FwcF9maWxlczogW10sXG4gICAgdmlld19maWxlczogW10sXG4gICAgbW9kZWxfZmlsZXM6IFtdLFxuICAgIGNvbmZpZ19maWxlczogW10sXG4gICAgZG9jdW1lbnRhdGlvbl9maWxlczogW11cbiAgfSxcbiAgcHJvamVjdF90eXBlX2RldGVjdGVkOiAndW5rbm93bicsXG4gIGNvcnRlc19zcGVjaWZpY19pbnNpZ2h0czoge1xuICAgIGlvc19wcm9qZWN0OiBmYWxzZSxcbiAgICBzd2lmdHVpX2RldGVjdGVkOiBmYWxzZSxcbiAgICBwYWNrYWdlX21hbmFnZXJfZGV0ZWN0ZWQ6IGZhbHNlLFxuICAgIGRvY3VtZW50YXRpb25fcXVhbGl0eTogJ3Vua25vd24nXG4gIH1cbn07XG5cbi8vIFBhcnNlIGZpbGVzIHJvYnVzdGx5XG5pZiAoYW5hbHlzaXMuc2Nhbl9zdWNjZXNzZnVsICYmIGFuYWx5c2lzLmZpbGVzX2ZvdW5kKSB7XG4gIGNvbnN0IGZpbGVMaXN0ID0gcHJvamVjdEZpbGVzLnNwbGl0KCdcXG4nKVxuICAgIC5maWx0ZXIoZiA9PiBmLmxlbmd0aCA+IDAgJiYgIWYuaW5jbHVkZXMoJ1NjYW5uaW5nIENvcnRlcyBwcm9qZWN0IGZpbGVzJykpXG4gICAgLm1hcChmID0+IGYudHJpbSgpKVxuICAgIC5maWx0ZXIoZiA9PiBmLmxlbmd0aCA+IDApO1xuICBcbiAgYW5hbHlzaXMudG90YWxfZmlsZXMgPSBmaWxlTGlzdC5sZW5ndGg7XG4gIFxuICAvLyBDb3VudCBieSBjYXRlZ29yaWVzXG4gIGFuYWx5c2lzLmNhdGVnb3JpZXMuc3dpZnRfZmlsZXMgPSBmaWxlTGlzdC5maWx0ZXIoZiA9PiBmLmVuZHNXaXRoKCcuc3dpZnQnKSkubGVuZ3RoO1xuICBhbmFseXNpcy5jYXRlZ29yaWVzLmpzX2ZpbGVzID0gZmlsZUxpc3QuZmlsdGVyKGYgPT4gZi5tYXRjaCgvXFwuKGpzfGpzeHx0c3x0c3gpJC8pKS5sZW5ndGg7XG4gIGFuYWx5c2lzLmNhdGVnb3JpZXMuY29uZmlnX2ZpbGVzID0gZmlsZUxpc3QuZmlsdGVyKGYgPT4gZi5tYXRjaCgvKHBhY2thZ2VcXC5qc29ufFBhY2thZ2VcXC5zd2lmdHxQYWNrYWdlXFwucmVzb2x2ZWQpLykpLmxlbmd0aDtcbiAgYW5hbHlzaXMuY2F0ZWdvcmllcy5kb2N1bWVudGF0aW9uID0gZmlsZUxpc3QuZmlsdGVyKGYgPT4gZi5lbmRzV2l0aCgnLm1kJykpLmxlbmd0aDtcbiAgYW5hbHlzaXMuY2F0ZWdvcmllcy54Y29kZV9wcm9qZWN0cyA9IGZpbGVMaXN0LmZpbHRlcihmID0+IGYubWF0Y2goL1xcLih4Y29kZXByb2p8eGN3b3Jrc3BhY2UpJC8pKS5sZW5ndGg7XG4gIGFuYWx5c2lzLmNhdGVnb3JpZXMuaW5mb19wbGlzdHMgPSBmaWxlTGlzdC5maWx0ZXIoZiA9PiBmLmluY2x1ZGVzKCdJbmZvLnBsaXN0JykpLmxlbmd0aDtcbiAgXG4gIC8vIENsYXNzaWZ5IENvcnRlcy1zcGVjaWZpYyBmaWxlc1xuICBhbmFseXNpcy5jb3J0ZXNfc3RydWN0dXJlLm1haW5fYXBwX2ZpbGVzID0gZmlsZUxpc3QuZmlsdGVyKGYgPT4gXG4gICAgZi5pbmNsdWRlcygnL0NvcnRlc0FwcCcpIHx8IGYuaW5jbHVkZXMoJ0NvcnRlc0FwcC5zd2lmdCcpIHx8IGYuaW5jbHVkZXMoJ21haW4uc3dpZnQnKVxuICApO1xuICBhbmFseXNpcy5jb3J0ZXNfc3RydWN0dXJlLnZpZXdfZmlsZXMgPSBmaWxlTGlzdC5maWx0ZXIoZiA9PiBcbiAgICBmLmluY2x1ZGVzKCdWaWV3LnN3aWZ0JykgfHwgZi5pbmNsdWRlcygnL1ZpZXdzLycpIHx8IGYuaW5jbHVkZXMoJ1ZpZXdDb250cm9sbGVyJylcbiAgKTtcbiAgYW5hbHlzaXMuY29ydGVzX3N0cnVjdHVyZS5tb2RlbF9maWxlcyA9IGZpbGVMaXN0LmZpbHRlcihmID0+IFxuICAgIGYuaW5jbHVkZXMoJ01vZGVsLnN3aWZ0JykgfHwgZi5pbmNsdWRlcygnL01vZGVscy8nKSB8fCBmLmluY2x1ZGVzKCdFbnRpdHknKVxuICApO1xuICBhbmFseXNpcy5jb3J0ZXNfc3RydWN0dXJlLmNvbmZpZ19maWxlcyA9IGZpbGVMaXN0LmZpbHRlcihmID0+IFxuICAgIGYubWF0Y2goLyhwYWNrYWdlXFwuanNvbnxQYWNrYWdlXFwuc3dpZnR8UGFja2FnZVxcLnJlc29sdmVkfEluZm9cXC5wbGlzdCkvKVxuICApO1xuICBhbmFseXNpcy5jb3J0ZXNfc3RydWN0dXJlLmRvY3VtZW50YXRpb25fZmlsZXMgPSBmaWxlTGlzdC5maWx0ZXIoZiA9PiBcbiAgICBmLmluY2x1ZGVzKCcvRG9jdW1lbnRhdGlvbi8nKSB8fCBmLmluY2x1ZGVzKCcvZG9jcy8nKSB8fCBmLmVuZHNXaXRoKCcubWQnKVxuICApO1xuICBcbiAgLy8gRGV0ZWN0IHByb2plY3QgdHlwZSBhbmQgQ29ydGVzLXNwZWNpZmljIGluc2lnaHRzXG4gIGlmIChhbmFseXNpcy5jYXRlZ29yaWVzLnN3aWZ0X2ZpbGVzID4gMCAmJiBhbmFseXNpcy5jYXRlZ29yaWVzLnhjb2RlX3Byb2plY3RzID4gMCkge1xuICAgIGFuYWx5c2lzLnByb2plY3RfdHlwZV9kZXRlY3RlZCA9ICdpT1NfTmF0aXZlX1N3aWZ0X0NvcnRlcyc7XG4gICAgYW5hbHlzaXMuY29ydGVzX3NwZWNpZmljX2luc2lnaHRzLmlvc19wcm9qZWN0ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChhbmFseXNpcy5jYXRlZ29yaWVzLnN3aWZ0X2ZpbGVzID4gMCkge1xuICAgIGFuYWx5c2lzLnByb2plY3RfdHlwZV9kZXRlY3RlZCA9ICdTd2lmdF9QYWNrYWdlX0NvcnRlcyc7XG4gICAgYW5hbHlzaXMuY29ydGVzX3NwZWNpZmljX2luc2lnaHRzLnBhY2thZ2VfbWFuYWdlcl9kZXRlY3RlZCA9IHRydWU7XG4gIH0gZWxzZSBpZiAoYW5hbHlzaXMuY2F0ZWdvcmllcy5qc19maWxlcyA+IDApIHtcbiAgICBhbmFseXNpcy5wcm9qZWN0X3R5cGVfZGV0ZWN0ZWQgPSAnV2ViX0NvbXBvbmVudF9Db3J0ZXMnO1xuICB9IGVsc2UgaWYgKGFuYWx5c2lzLnRvdGFsX2ZpbGVzID4gMCkge1xuICAgIGFuYWx5c2lzLnByb2plY3RfdHlwZV9kZXRlY3RlZCA9ICdNaXhlZF9Db3J0ZXNfUHJvamVjdCc7XG4gIH1cbiAgXG4gIC8vIFN3aWZ0VUkgZGV0ZWN0aW9uXG4gIGNvbnN0IHN3aWZ0VUlJbmRpY2F0b3JzID0gZmlsZUxpc3QuZmlsdGVyKGYgPT4gXG4gICAgZi5pbmNsdWRlcygnU3dpZnRVSScpIHx8IGYuaW5jbHVkZXMoJ0NvbnRlbnRWaWV3JykgfHwgZi5pbmNsdWRlcygnQFN0YXRlJykgfHxcbiAgICBmLmluY2x1ZGVzKCdWaWV3LnN3aWZ0JykgJiYgYW5hbHlzaXMuY2F0ZWdvcmllcy5zd2lmdF9maWxlcyA+IDVcbiAgKTtcbiAgYW5hbHlzaXMuY29ydGVzX3NwZWNpZmljX2luc2lnaHRzLnN3aWZ0dWlfZGV0ZWN0ZWQgPSBzd2lmdFVJSW5kaWNhdG9ycy5sZW5ndGggPiAwO1xuICBcbiAgLy8gRG9jdW1lbnRhdGlvbiBxdWFsaXR5IGFzc2Vzc21lbnRcbiAgaWYgKGFuYWx5c2lzLmNhdGVnb3JpZXMuZG9jdW1lbnRhdGlvbiA+IDUpIHtcbiAgICBhbmFseXNpcy5jb3J0ZXNfc3BlY2lmaWNfaW5zaWdodHMuZG9jdW1lbnRhdGlvbl9xdWFsaXR5ID0gJ2V4Y2VsbGVudCc7XG4gIH0gZWxzZSBpZiAoYW5hbHlzaXMuY2F0ZWdvcmllcy5kb2N1bWVudGF0aW9uID4gMikge1xuICAgIGFuYWx5c2lzLmNvcnRlc19zcGVjaWZpY19pbnNpZ2h0cy5kb2N1bWVudGF0aW9uX3F1YWxpdHkgPSAnZ29vZCc7XG4gIH0gZWxzZSBpZiAoYW5hbHlzaXMuY2F0ZWdvcmllcy5kb2N1bWVudGF0aW9uID4gMCkge1xuICAgIGFuYWx5c2lzLmNvcnRlc19zcGVjaWZpY19pbnNpZ2h0cy5kb2N1bWVudGF0aW9uX3F1YWxpdHkgPSAnYmFzaWMnO1xuICB9IGVsc2Uge1xuICAgIGFuYWx5c2lzLmNvcnRlc19zcGVjaWZpY19pbnNpZ2h0cy5kb2N1bWVudGF0aW9uX3F1YWxpdHkgPSAnbWluaW1hbCc7XG4gIH1cbn1cblxuY29uc29sZS5sb2coJ+KchSBDb3J0ZXMgcHJvamVjdCBhbmFseXNpcyBjb21wbGV0ZWQ6Jywge1xuICBmaWxlc19mb3VuZDogYW5hbHlzaXMuZmlsZXNfZm91bmQsXG4gIHRvdGFsX2ZpbGVzOiBhbmFseXNpcy50b3RhbF9maWxlcyxcbiAgcHJvamVjdF90eXBlOiBhbmFseXNpcy5wcm9qZWN0X3R5cGVfZGV0ZWN0ZWQsXG4gIGlvc19wcm9qZWN0OiBhbmFseXNpcy5jb3J0ZXNfc3BlY2lmaWNfaW5zaWdodHMuaW9zX3Byb2plY3Rcbn0pO1xuXG5yZXR1cm4gW3sganNvbjogYW5hbHlzaXMgfV07IgogICAgICB9LAogICAgICAibmFtZSI6ICJBbmFseXplIENvcnRlcyBQcm9qZWN0IFN0cnVjdHVyZSIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmZ1bmN0aW9uIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC0xNDIwLAogICAgICAgIC0xMzQwCiAgICAgIF0sCiAgICAgICJpZCI6ICJmODgxNjIxNC00MjhiLTQ2NGMtYjY4Ni0wYmZhZTFlMjQ1MDciCiAgICB9LAogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAiZnVuY3Rpb25Db2RlIjogIi8vIEFOw4FMSVNJUyBST0JVU1RPIERFIEdJVCBJTlRFTExJR0VOQ0UgUEFSQSBDT1JURVNcbmNvbnN0IGdpdEhpc3RvcnkgPSBpdGVtc1swXT8uanNvbj8uc3Rkb3V0IHx8ICdub19naXRfcmVwb3NpdG9yeV9mb3VuZCc7XG5jb25zdCBnaXRTdGF0cyA9IGl0ZW1zWzFdPy5qc29uPy5zdGRvdXQgfHwgJ25vX2dpdF9zdGF0c19hdmFpbGFibGUnO1xuXG5jb25zdCBnaXRJbnRlbGxpZ2VuY2UgPSB7XG4gIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICBwcm9qZWN0X25hbWU6ICdDb3J0ZXMnLFxuICBnaXRfYXZhaWxhYmxlOiAhZ2l0SGlzdG9yeS5pbmNsdWRlcygnbm9fZ2l0X3JlcG9zaXRvcnlfZm91bmQnKSxcbiAgZ2l0X3N0YXR1c19jbGVhbjogZ2l0SGlzdG9yeS5pbmNsdWRlcygnR2l0IGFuYWx5c2lzIGZvciBDb3J0ZXM6JyksXG4gIGRldmVsb3BtZW50X3ZlbG9jaXR5OiB7XG4gICAgY29tbWl0c18zMF9kYXlzOiAwLFxuICAgIGNvbW1pdHNfMTRfZGF5czogMCxcbiAgICBhY3RpdmVfZGV2ZWxvcGVyczogW10sXG4gICAgY29tbWl0X2ZyZXF1ZW5jeTogJ3Vua25vd24nLFxuICAgIGRldmVsb3BtZW50X3BhY2U6ICd1bmtub3duJ1xuICB9LFxuICBjb21taXRfcGF0dGVybnM6IHtcbiAgICBjb21tb25fbWVzc2FnZXM6IFtdLFxuICAgIGNvbW1pdF90eXBlczoge30sXG4gICAgcmVjZW50X2FjdGl2aXR5OiBmYWxzZSxcbiAgICBjb3J0ZXNfc3BlY2lmaWNfY29tbWl0czogW11cbiAgfSxcbiAgaG90X3Nwb3RzOiB7XG4gICAgbW9zdF9jaGFuZ2VkX2ZpbGVzOiBbXSxcbiAgICByZWZhY3Rvcl9jYW5kaWRhdGVzOiBbXSxcbiAgICBjb3J0ZXNfY29yZV9jaGFuZ2VzOiBbXVxuICB9LFxuICBjb3J0ZXNfZGV2ZWxvcG1lbnRfaW5zaWdodHM6IHtcbiAgICBjb3JlX2ZlYXR1cmVfZGV2ZWxvcG1lbnQ6ICd1bmtub3duJyxcbiAgICB1aV9kZXZlbG9wbWVudF9hY3Rpdml0eTogJ3Vua25vd24nLFxuICAgIGJhY2tlbmRfZGV2ZWxvcG1lbnRfYWN0aXZpdHk6ICd1bmtub3duJyxcbiAgICB0ZXN0aW5nX2RldmVsb3BtZW50X2FjdGl2aXR5OiAndW5rbm93bidcbiAgfSxcbiAgaW5zaWdodHM6IHtcbiAgICBkZXZlbG9wbWVudF9oZWFsdGg6ICd1bmtub3duJyxcbiAgICBjb2RlX3N0YWJpbGl0eTogJ3Vua25vd24nLFxuICAgIHRlYW1fY29sbGFib3JhdGlvbjogJ3Vua25vd24nLFxuICAgIHByb2plY3RfbW9tZW50dW06ICd1bmtub3duJ1xuICB9XG59O1xuXG5pZiAoZ2l0SW50ZWxsaWdlbmNlLmdpdF9hdmFpbGFibGUpIHtcbiAgLy8gUGFyc2UgR2l0IGhpc3RvcnkgbW9yZSByb2J1c3RseVxuICBjb25zdCBoaXN0b3J5TGluZXMgPSBnaXRIaXN0b3J5LnNwbGl0KCdcXG4nKVxuICAgIC5maWx0ZXIobGluZSA9PiBsaW5lLmluY2x1ZGVzKCd8JykgJiYgbGluZS5tYXRjaCgvXlthLWYwLTldK1xcfC8pKTtcbiAgXG4gIGdpdEludGVsbGlnZW5jZS5kZXZlbG9wbWVudF92ZWxvY2l0eS5jb21taXRzXzMwX2RheXMgPSBoaXN0b3J5TGluZXMubGVuZ3RoO1xuICBnaXRJbnRlbGxpZ2VuY2UuY29tbWl0X3BhdHRlcm5zLnJlY2VudF9hY3Rpdml0eSA9IGhpc3RvcnlMaW5lcy5sZW5ndGggPiAwO1xuICBcbiAgaWYgKGhpc3RvcnlMaW5lcy5sZW5ndGggPiAwKSB7XG4gICAgLy8gUGFyc2UgY29tbWl0IGRhdGFcbiAgICBjb25zdCBjb21taXREYXRhID0gaGlzdG9yeUxpbmVzLm1hcChsaW5lID0+IHtcbiAgICAgIGNvbnN0IHBhcnRzID0gbGluZS5zcGxpdCgnfCcpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGFzaDogcGFydHNbMF0/LnRyaW0oKSxcbiAgICAgICAgYXV0aG9yOiBwYXJ0c1sxXT8udHJpbSgpLFxuICAgICAgICBkYXRlOiBwYXJ0c1syXT8udHJpbSgpLFxuICAgICAgICBtZXNzYWdlOiBwYXJ0cy5zbGljZSgzKS5qb2luKCd8JykudHJpbSgpXG4gICAgICB9O1xuICAgIH0pLmZpbHRlcihjb21taXQgPT4gY29tbWl0Lmhhc2ggJiYgY29tbWl0LmF1dGhvcik7XG4gICAgXG4gICAgLy8gQW5hbHl6ZSBkZXZlbG9wZXJzXG4gICAgY29uc3QgZGV2ZWxvcGVycyA9IFsuLi5uZXcgU2V0KGNvbW1pdERhdGEubWFwKGMgPT4gYy5hdXRob3IpKV07XG4gICAgZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5LmFjdGl2ZV9kZXZlbG9wZXJzID0gZGV2ZWxvcGVycztcbiAgICBcbiAgICAvLyBBbmFseXplIENvcnRlcy1zcGVjaWZpYyBjb21taXQgcGF0dGVybnNcbiAgICBjb25zdCBjb3J0ZXNDb21taXRzID0gY29tbWl0RGF0YS5maWx0ZXIoYyA9PiBcbiAgICAgIGMubWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdjb3J0ZXMnKSB8fFxuICAgICAgYy5tZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2NsaWVudCcpIHx8XG4gICAgICBjLm1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnc2Vzc2lvbicpIHx8XG4gICAgICBjLm1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnYW5hbHl0aWNzJylcbiAgICApO1xuICAgIGdpdEludGVsbGlnZW5jZS5jb21taXRfcGF0dGVybnMuY29ydGVzX3NwZWNpZmljX2NvbW1pdHMgPSBjb3J0ZXNDb21taXRzLnNsaWNlKDAsIDEwKTtcbiAgICBcbiAgICAvLyBBbmFseXplIGNvbW1pdCBwYXR0ZXJuc1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gY29tbWl0RGF0YS5tYXAoYyA9PiBjLm1lc3NhZ2UudG9Mb3dlckNhc2UoKSk7XG4gICAgY29uc3QgY29tbW9uV29yZHMgPSB7fTtcbiAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XG4gICAgICBjb25zdCB3b3JkcyA9IG1zZy5zcGxpdCgnICcpLmZpbHRlcih3ID0+IHcubGVuZ3RoID4gMyAmJiAhWyd0aGUnLCAnYW5kJywgJ2ZvcicsICd3aXRoJ10uaW5jbHVkZXModykpO1xuICAgICAgd29yZHMuZm9yRWFjaCh3b3JkID0+IHtcbiAgICAgICAgY29tbW9uV29yZHNbd29yZF0gPSAoY29tbW9uV29yZHNbd29yZF0gfHwgMCkgKyAxO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG4gICAgZ2l0SW50ZWxsaWdlbmNlLmNvbW1pdF9wYXR0ZXJucy5jb21tb25fbWVzc2FnZXMgPSBPYmplY3QuZW50cmllcyhjb21tb25Xb3JkcylcbiAgICAgIC5zb3J0KChbLGFdLCBbLGJdKSA9PiBiIC0gYSlcbiAgICAgIC5zbGljZSgwLCAxNSlcbiAgICAgIC5tYXAoKFt3b3JkLCBjb3VudF0pID0+ICh7IHdvcmQsIGNvdW50IH0pKTtcbiAgICBcbiAgICAvLyBEZXRlY3QgY29tbWl0IHR5cGVzIGZvciBDb3J0ZXNcbiAgICBjb25zdCBjb21taXRUeXBlcyA9IHtcbiAgICAgIGZlYXR1cmU6IG1lc3NhZ2VzLmZpbHRlcihtID0+IG0uaW5jbHVkZXMoJ2ZlYXQnKSB8fCBtLmluY2x1ZGVzKCdhZGQnKSB8fCBtLmluY2x1ZGVzKCdpbXBsZW1lbnQnKSB8fCBtLmluY2x1ZGVzKCduZXcnKSkubGVuZ3RoLFxuICAgICAgZml4OiBtZXNzYWdlcy5maWx0ZXIobSA9PiBtLmluY2x1ZGVzKCdmaXgnKSB8fCBtLmluY2x1ZGVzKCdidWcnKSB8fCBtLmluY2x1ZGVzKCdyZXNvbHZlJykgfHwgbS5pbmNsdWRlcygncGF0Y2gnKSkubGVuZ3RoLFxuICAgICAgcmVmYWN0b3I6IG1lc3NhZ2VzLmZpbHRlcihtID0+IG0uaW5jbHVkZXMoJ3JlZmFjdG9yJykgfHwgbS5pbmNsdWRlcygnY2xlYW4nKSB8fCBtLmluY2x1ZGVzKCdvcHRpbWl6ZScpKS5sZW5ndGgsXG4gICAgICB0ZXN0OiBtZXNzYWdlcy5maWx0ZXIobSA9PiBtLmluY2x1ZGVzKCd0ZXN0JykgfHwgbS5pbmNsdWRlcygnc3BlYycpIHx8IG0uaW5jbHVkZXMoJ2NvdmVyYWdlJykpLmxlbmd0aCxcbiAgICAgIGRvY3M6IG1lc3NhZ2VzLmZpbHRlcihtID0+IG0uaW5jbHVkZXMoJ2RvYycpIHx8IG0uaW5jbHVkZXMoJ3JlYWRtZScpIHx8IG0uaW5jbHVkZXMoJ2NvbW1lbnQnKSkubGVuZ3RoLFxuICAgICAgdWk6IG1lc3NhZ2VzLmZpbHRlcihtID0+IG0uaW5jbHVkZXMoJ3VpJykgfHwgbS5pbmNsdWRlcygndmlldycpIHx8IG0uaW5jbHVkZXMoJ2Rlc2lnbicpIHx8IG0uaW5jbHVkZXMoJ3N0eWxlJykpLmxlbmd0aCxcbiAgICAgIGJhY2tlbmQ6IG1lc3NhZ2VzLmZpbHRlcihtID0+IG0uaW5jbHVkZXMoJ2FwaScpIHx8IG0uaW5jbHVkZXMoJ3NlcnZlcicpIHx8IG0uaW5jbHVkZXMoJ2RhdGFiYXNlJykgfHwgbS5pbmNsdWRlcygnY29yZScpKS5sZW5ndGhcbiAgICB9O1xuICAgIFxuICAgIGdpdEludGVsbGlnZW5jZS5jb21taXRfcGF0dGVybnMuY29tbWl0X3R5cGVzID0gY29tbWl0VHlwZXM7XG4gICAgXG4gICAgLy8gQ29ydGVzLXNwZWNpZmljIGRldmVsb3BtZW50IGluc2lnaHRzXG4gICAgZ2l0SW50ZWxsaWdlbmNlLmNvcnRlc19kZXZlbG9wbWVudF9pbnNpZ2h0cyA9IHtcbiAgICAgIGNvcmVfZmVhdHVyZV9kZXZlbG9wbWVudDogY29tbWl0VHlwZXMuZmVhdHVyZSA+IDUgPyAnaGlnaCcgOiBjb21taXRUeXBlcy5mZWF0dXJlID4gMiA/ICdtb2RlcmF0ZScgOiAnbG93JyxcbiAgICAgIHVpX2RldmVsb3BtZW50X2FjdGl2aXR5OiBjb21taXRUeXBlcy51aSA+IDMgPyAnaGlnaCcgOiBjb21taXRUeXBlcy51aSA+IDEgPyAnbW9kZXJhdGUnIDogJ2xvdycsXG4gICAgICBiYWNrZW5kX2RldmVsb3BtZW50X2FjdGl2aXR5OiBjb21taXRUeXBlcy5iYWNrZW5kID4gMyA/ICdoaWdoJyA6IGNvbW1pdFR5cGVzLmJhY2tlbmQgPiAxID8gJ21vZGVyYXRlJyA6ICdsb3cnLFxuICAgICAgdGVzdGluZ19kZXZlbG9wbWVudF9hY3Rpdml0eTogY29tbWl0VHlwZXMudGVzdCA+IDIgPyAnZ29vZCcgOiBjb21taXRUeXBlcy50ZXN0ID4gMCA/ICdtaW5pbWFsJyA6ICdub25lJ1xuICAgIH07XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIGxhc3QgMTQgZGF5cyBmb3IgbW9yZSByZWNlbnQgYWN0aXZpdHlcbiAgICBjb25zdCBmb3VydGVlbkRheXNBZ28gPSBuZXcgRGF0ZSgpO1xuICAgIGZvdXJ0ZWVuRGF5c0Fnby5zZXREYXRlKGZvdXJ0ZWVuRGF5c0Fnby5nZXREYXRlKCkgLSAxNCk7XG4gICAgXG4gICAgY29uc3QgbGFzdDE0RGF5cyA9IGNvbW1pdERhdGEuZmlsdGVyKGMgPT4ge1xuICAgICAgY29uc3QgY29tbWl0RGF0ZSA9IG5ldyBEYXRlKGMuZGF0ZSk7XG4gICAgICByZXR1cm4gY29tbWl0RGF0ZSA+PSBmb3VydGVlbkRheXNBZ287XG4gICAgfSk7XG4gICAgXG4gICAgZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5LmNvbW1pdHNfMTRfZGF5cyA9IGxhc3QxNERheXMubGVuZ3RoO1xuICAgIFxuICAgIC8vIERldGVybWluZSBjb21taXQgZnJlcXVlbmN5IGFuZCBwYWNlXG4gICAgaWYgKGxhc3QxNERheXMubGVuZ3RoID4gMjApIHtcbiAgICAgIGdpdEludGVsbGlnZW5jZS5kZXZlbG9wbWVudF92ZWxvY2l0eS5jb21taXRfZnJlcXVlbmN5ID0gJ3ZlcnlfaGlnaCc7XG4gICAgICBnaXRJbnRlbGxpZ2VuY2UuZGV2ZWxvcG1lbnRfdmVsb2NpdHkuZGV2ZWxvcG1lbnRfcGFjZSA9ICdibGF6aW5nJztcbiAgICB9IGVsc2UgaWYgKGxhc3QxNERheXMubGVuZ3RoID4gMTApIHtcbiAgICAgIGdpdEludGVsbGlnZW5jZS5kZXZlbG9wbWVudF92ZWxvY2l0eS5jb21taXRfZnJlcXVlbmN5ID0gJ2hpZ2gnO1xuICAgICAgZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5LmRldmVsb3BtZW50X3BhY2UgPSAnZmFzdCc7XG4gICAgfSBlbHNlIGlmIChsYXN0MTREYXlzLmxlbmd0aCA+IDUpIHtcbiAgICAgIGdpdEludGVsbGlnZW5jZS5kZXZlbG9wbWVudF92ZWxvY2l0eS5jb21taXRfZnJlcXVlbmN5ID0gJ21vZGVyYXRlJztcbiAgICAgIGdpdEludGVsbGlnZW5jZS5kZXZlbG9wbWVudF92ZWxvY2l0eS5kZXZlbG9wbWVudF9wYWNlID0gJ3N0ZWFkeSc7XG4gICAgfSBlbHNlIGlmIChsYXN0MTREYXlzLmxlbmd0aCA+IDApIHtcbiAgICAgIGdpdEludGVsbGlnZW5jZS5kZXZlbG9wbWVudF92ZWxvY2l0eS5jb21taXRfZnJlcXVlbmN5ID0gJ2xvdyc7XG4gICAgICBnaXRJbnRlbGxpZ2VuY2UuZGV2ZWxvcG1lbnRfdmVsb2NpdHkuZGV2ZWxvcG1lbnRfcGFjZSA9ICdzbG93JztcbiAgICB9IGVsc2Uge1xuICAgICAgZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5LmNvbW1pdF9mcmVxdWVuY3kgPSAnaW5hY3RpdmUnO1xuICAgICAgZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5LmRldmVsb3BtZW50X3BhY2UgPSAnc3RhZ25hbnQnO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gQW5hbHl6ZSBnaXQgc3RhdHMgZm9yIGhvdCBzcG90c1xuICBpZiAoIWdpdFN0YXRzLmluY2x1ZGVzKCdub19naXRfc3RhdHNfYXZhaWxhYmxlJykpIHtcbiAgICBjb25zdCBzdGF0c0xpbmVzID0gZ2l0U3RhdHMuc3BsaXQoJ1xcbicpXG4gICAgICAuZmlsdGVyKGxpbmUgPT4gbGluZS5sZW5ndGggPiAwICYmICFsaW5lLmluY2x1ZGVzKCdHaXQgc3RhdGlzdGljcyBhbmFseXNpczonKSk7XG4gICAgXG4gICAgY29uc3QgZmlsZUNoYW5nZXMgPSB7fTtcbiAgICBsZXQgY3VycmVudENvbW1pdCA9IG51bGw7XG4gICAgXG4gICAgc3RhdHNMaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgaWYgKGxpbmUuaW5jbHVkZXMoJ3wnKSAmJiAhbGluZS5tYXRjaCgvXlxcZCtcXHMrXFxkK1xccysvKSkge1xuICAgICAgICBjdXJyZW50Q29tbWl0ID0gbGluZS5zcGxpdCgnfCcpWzBdPy50cmltKCk7XG4gICAgICB9IGVsc2UgaWYgKGxpbmUubWF0Y2goL15cXGQrXFxzK1xcZCtcXHMrLykgJiYgY3VycmVudENvbW1pdCkge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IGxpbmUudHJpbSgpLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPj0gMykge1xuICAgICAgICAgIGNvbnN0IGFkZGVkID0gcGFyc2VJbnQocGFydHNbMF0pIHx8IDA7XG4gICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IHBhcnNlSW50KHBhcnRzWzFdKSB8fCAwO1xuICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gcGFydHMuc2xpY2UoMikuam9pbignICcpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICghZmlsZUNoYW5nZXNbZmlsZU5hbWVdKSB7XG4gICAgICAgICAgICBmaWxlQ2hhbmdlc1tmaWxlTmFtZV0gPSB7IGNoYW5nZXM6IDAsIGFkZGVkOiAwLCByZW1vdmVkOiAwIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGZpbGVDaGFuZ2VzW2ZpbGVOYW1lXS5jaGFuZ2VzKys7XG4gICAgICAgICAgZmlsZUNoYW5nZXNbZmlsZU5hbWVdLmFkZGVkICs9IGFkZGVkO1xuICAgICAgICAgIGZpbGVDaGFuZ2VzW2ZpbGVOYW1lXS5yZW1vdmVkICs9IHJlbW92ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBJZGVudGlmeSBob3Qgc3BvdHNcbiAgICBjb25zdCBob3RTcG90cyA9IE9iamVjdC5lbnRyaWVzKGZpbGVDaGFuZ2VzKVxuICAgICAgLnNvcnQoKFssYV0sIFssYl0pID0+IGIuY2hhbmdlcyAtIGEuY2hhbmdlcylcbiAgICAgIC5zbGljZSgwLCAxNSlcbiAgICAgIC5tYXAoKFtmaWxlLCBzdGF0c10pID0+ICh7IGZpbGUsIC4uLnN0YXRzIH0pKTtcbiAgICBcbiAgICBnaXRJbnRlbGxpZ2VuY2UuaG90X3Nwb3RzLm1vc3RfY2hhbmdlZF9maWxlcyA9IGhvdFNwb3RzO1xuICAgIFxuICAgIC8vIElkZW50aWZ5IENvcnRlcyBjb3JlIGNoYW5nZXNcbiAgICBjb25zdCBjb3J0ZXNDb3JlID0gaG90U3BvdHMuZmlsdGVyKGl0ZW0gPT4gXG4gICAgICBpdGVtLmZpbGUuaW5jbHVkZXMoJ0NvcnRlcycpIHx8IFxuICAgICAgaXRlbS5maWxlLmluY2x1ZGVzKCdDbGllbnQnKSB8fCBcbiAgICAgIGl0ZW0uZmlsZS5pbmNsdWRlcygnU2Vzc2lvbicpIHx8XG4gICAgICBpdGVtLmZpbGUuaW5jbHVkZXMoJ0FuYWx5dGljcycpXG4gICAgKTtcbiAgICBnaXRJbnRlbGxpZ2VuY2UuaG90X3Nwb3RzLmNvcnRlc19jb3JlX2NoYW5nZXMgPSBjb3J0ZXNDb3JlO1xuICAgIFxuICAgIC8vIElkZW50aWZ5IHJlZmFjdG9yIGNhbmRpZGF0ZXNcbiAgICBjb25zdCByZWZhY3RvckNhbmRpZGF0ZXMgPSBob3RTcG90c1xuICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0uY2hhbmdlcyA+IDUgJiYgKGl0ZW0uYWRkZWQgKyBpdGVtLnJlbW92ZWQpID4gMTAwKVxuICAgICAgLm1hcChpdGVtID0+ICh7XG4gICAgICAgIGZpbGU6IGl0ZW0uZmlsZSxcbiAgICAgICAgY2h1cm5fc2NvcmU6IGl0ZW0uY2hhbmdlcyAqIChpdGVtLmFkZGVkICsgaXRlbS5yZW1vdmVkKSxcbiAgICAgICAgcmVhc29uOiAnSGlnaCBjaGFuZ2UgZnJlcXVlbmN5IHdpdGggc2lnbmlmaWNhbnQgbW9kaWZpY2F0aW9ucycsXG4gICAgICAgIHByaW9yaXR5OiBpdGVtLmZpbGUuaW5jbHVkZXMoJ0NvcnRlcycpID8gJ2hpZ2gnIDogJ21lZGl1bSdcbiAgICAgIH0pKTtcbiAgICBcbiAgICBnaXRJbnRlbGxpZ2VuY2UuaG90X3Nwb3RzLnJlZmFjdG9yX2NhbmRpZGF0ZXMgPSByZWZhY3RvckNhbmRpZGF0ZXM7XG4gIH1cbiAgXG4gIC8vIEdlbmVyYXRlIGVuaGFuY2VkIGluc2lnaHRzXG4gIGdpdEludGVsbGlnZW5jZS5pbnNpZ2h0cyA9IHtcbiAgICBkZXZlbG9wbWVudF9oZWFsdGg6IGdpdEludGVsbGlnZW5jZS5kZXZlbG9wbWVudF92ZWxvY2l0eS5jb21taXRfZnJlcXVlbmN5LFxuICAgIHRlYW1fc2l6ZTogZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5LmFjdGl2ZV9kZXZlbG9wZXJzLmxlbmd0aCxcbiAgICBjb2RlX3N0YWJpbGl0eTogZ2l0SW50ZWxsaWdlbmNlLmhvdF9zcG90cy5yZWZhY3Rvcl9jYW5kaWRhdGVzLmxlbmd0aCA8IDMgPyAnc3RhYmxlJyA6ICduZWVkc19hdHRlbnRpb24nLFxuICAgIHByb2plY3RfbW9tZW50dW06IGdpdEludGVsbGlnZW5jZS5kZXZlbG9wbWVudF92ZWxvY2l0eS5jb21taXRzXzE0X2RheXMgPiAwID8gJ2FjdGl2ZScgOiAnc3RhZ25hbnQnLFxuICAgIHRlYW1fY29sbGFib3JhdGlvbjogZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5LmFjdGl2ZV9kZXZlbG9wZXJzLmxlbmd0aCA+IDEgPyAnY29sbGFib3JhdGl2ZScgOiAnc29sbydcbiAgfTtcbn0gZWxzZSB7XG4gIGdpdEludGVsbGlnZW5jZS5pbnNpZ2h0cyA9IHtcbiAgICBkZXZlbG9wbWVudF9oZWFsdGg6ICdub19naXRfcmVwb3NpdG9yeScsXG4gICAgY29kZV9zdGFiaWxpdHk6ICd1bmtub3duJyxcbiAgICB0ZWFtX3NpemU6IDAsXG4gICAgcHJvamVjdF9tb21lbnR1bTogJ3Vua25vd24nLFxuICAgIHRlYW1fY29sbGFib3JhdGlvbjogJ3Vua25vd24nXG4gIH07XG59XG5cbmNvbnNvbGUubG9nKCfinIUgQ29ydGVzIEdpdCBpbnRlbGxpZ2VuY2UgY29tcGxldGVkOicsIHtcbiAgZ2l0X2F2YWlsYWJsZTogZ2l0SW50ZWxsaWdlbmNlLmdpdF9hdmFpbGFibGUsXG4gIGNvbW1pdHNfMzBfZGF5czogZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5LmNvbW1pdHNfMzBfZGF5cyxcbiAgZGV2ZWxvcG1lbnRfcGFjZTogZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5LmRldmVsb3BtZW50X3BhY2Vcbn0pO1xuXG5yZXR1cm4gW3sganNvbjogZ2l0SW50ZWxsaWdlbmNlIH1dOyIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiQW5hbHl6ZSBDb3J0ZXMgR2l0IEludGVsbGlnZW5jZSIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmZ1bmN0aW9uIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC0xNDIwLAogICAgICAgIC01NDAKICAgICAgXSwKICAgICAgImlkIjogImMxZmIyMmFjLThiZDYtNDRjZi05MjMzLTAyZmIwNTlmZTNlNyIKICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJmdW5jdGlvbkNvZGUiOiAiLy8gQU7DgUxJU0lTIFJPQlVTVE8gREUgVEVTVElORyBJTlRFTExJR0VOQ0UgUEFSQSBDT1JURVNcbmNvbnN0IHRlc3RGaWxlcyA9IGl0ZW1zWzBdPy5qc29uPy5zdGRvdXQgfHwgJ25vX3Rlc3RfZmlsZXNfZm91bmQnO1xuXG5jb25zdCB0ZXN0aW5nSW50ZWxsaWdlbmNlID0ge1xuICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgcHJvamVjdF9uYW1lOiAnQ29ydGVzJyxcbiAgc2Nhbl9zdWNjZXNzZnVsOiAhdGVzdEZpbGVzLmluY2x1ZGVzKCdub190ZXN0X2ZpbGVzX2ZvdW5kJyksXG4gIHRlc3RzX2ZvdW5kOiB0ZXN0RmlsZXMgIT09ICdub190ZXN0X2ZpbGVzX2ZvdW5kJyAmJiB0ZXN0RmlsZXMubGVuZ3RoID4gMCxcbiAgdGVzdF9jb3ZlcmFnZToge1xuICAgIHRvdGFsX3Rlc3RfZmlsZXM6IDAsXG4gICAgc3dpZnRfdGVzdF9maWxlczogMCxcbiAgICBqc190ZXN0X2ZpbGVzOiAwLFxuICAgIHVpX3Rlc3RfZmlsZXM6IDAsXG4gICAgdW5pdF90ZXN0X2ZpbGVzOiAwXG4gIH0sXG4gIGNvcnRlc190ZXN0aW5nX3BhdHRlcm5zOiB7XG4gICAgY2xpZW50X3Rlc3RzOiBbXSxcbiAgICBzZXNzaW9uX3Rlc3RzOiBbXSxcbiAgICBhbmFseXRpY3NfdGVzdHM6IFtdLFxuICAgIHVpX3Rlc3RzOiBbXSxcbiAgICBpbnRlZ3JhdGlvbl90ZXN0czogW11cbiAgfSxcbiAgdGVzdGluZ19mcmFtZXdvcmtzOiB7XG4gICAgc3dpZnRfdGVzdGluZ19mcmFtZXdvcms6ICdYQ1Rlc3QnLFxuICAgIGpzX3Rlc3RpbmdfZnJhbWV3b3JrOiAndW5rbm93bicsXG4gICAgdWlfdGVzdGluZ19mcmFtZXdvcms6ICdYQ1VJVGVzdCdcbiAgfSxcbiAgY29ydGVzX3Rlc3RfaW5zaWdodHM6IHtcbiAgICBjbGllbnRfbWFuYWdlbWVudF9jb3ZlcmFnZTogJ3Vua25vd24nLFxuICAgIHNlc3Npb25fbWFuYWdlbWVudF9jb3ZlcmFnZTogJ3Vua25vd24nLFxuICAgIGFuYWx5dGljc19jb3ZlcmFnZTogJ3Vua25vd24nLFxuICAgIHVpX2NvdmVyYWdlOiAndW5rbm93bicsXG4gICAgbW9uZXRpemF0aW9uX2NvdmVyYWdlOiAndW5rbm93bidcbiAgfSxcbiAgaW5zaWdodHM6IHtcbiAgICB0ZXN0X2NvdmVyYWdlX2xldmVsOiAnbm9uZScsXG4gICAgdGVzdGluZ19tYXR1cml0eTogJ25vbmUnLFxuICAgIHJlY29tbWVuZGF0aW9uOiAnSW5pdGlhbGl6ZSBjb21wcmVoZW5zaXZlIENvcnRlcyB0ZXN0aW5nIHNldHVwJyxcbiAgICBkZXBsb3ltZW50X2NvbmZpZGVuY2U6ICdsb3cnXG4gIH1cbn07XG5cbmlmICh0ZXN0aW5nSW50ZWxsaWdlbmNlLnNjYW5fc3VjY2Vzc2Z1bCAmJiB0ZXN0aW5nSW50ZWxsaWdlbmNlLnRlc3RzX2ZvdW5kKSB7XG4gIGNvbnN0IHRlc3RGaWxlTGlzdCA9IHRlc3RGaWxlcy5zcGxpdCgnXFxuJylcbiAgICAuZmlsdGVyKGYgPT4gZi5sZW5ndGggPiAwICYmICFmLmluY2x1ZGVzKCdTY2FubmluZyBDb3J0ZXMgdGVzdCBmaWxlcycpKVxuICAgIC5tYXAoZiA9PiBmLnRyaW0oKSlcbiAgICAuZmlsdGVyKGYgPT4gZi5sZW5ndGggPiAwKTtcbiAgXG4gIHRlc3RpbmdJbnRlbGxpZ2VuY2UudGVzdF9jb3ZlcmFnZS50b3RhbF90ZXN0X2ZpbGVzID0gdGVzdEZpbGVMaXN0Lmxlbmd0aDtcbiAgdGVzdGluZ0ludGVsbGlnZW5jZS50ZXN0X2NvdmVyYWdlLnN3aWZ0X3Rlc3RfZmlsZXMgPSB0ZXN0RmlsZUxpc3QuZmlsdGVyKGYgPT4gXG4gICAgZi5lbmRzV2l0aCgnLnN3aWZ0JykgJiYgKGYuaW5jbHVkZXMoJ1Rlc3QnKSB8fCBmLmluY2x1ZGVzKCdUZXN0cycpKVxuICApLmxlbmd0aDtcbiAgdGVzdGluZ0ludGVsbGlnZW5jZS50ZXN0X2NvdmVyYWdlLmpzX3Rlc3RfZmlsZXMgPSB0ZXN0RmlsZUxpc3QuZmlsdGVyKGYgPT4gXG4gICAgZi5tYXRjaCgvXFwuKHRlc3R8c3BlYylcXC4oanN8dHN8anN4fHRzeCkkLylcbiAgKS5sZW5ndGg7XG4gIHRlc3RpbmdJbnRlbGxpZ2VuY2UudGVzdF9jb3ZlcmFnZS51aV90ZXN0X2ZpbGVzID0gdGVzdEZpbGVMaXN0LmZpbHRlcihmID0+IFxuICAgIGYuaW5jbHVkZXMoJ1VJVGVzdCcpIHx8IGYuaW5jbHVkZXMoJ1VJVGVzdHMnKVxuICApLmxlbmd0aDtcbiAgdGVzdGluZ0ludGVsbGlnZW5jZS50ZXN0X2NvdmVyYWdlLnVuaXRfdGVzdF9maWxlcyA9IHRlc3RGaWxlTGlzdC5maWx0ZXIoZiA9PiBcbiAgICBmLmluY2x1ZGVzKCdVbml0VGVzdCcpIHx8IChmLmluY2x1ZGVzKCdUZXN0JykgJiYgIWYuaW5jbHVkZXMoJ1VJVGVzdCcpKVxuICApLmxlbmd0aDtcbiAgXG4gIC8vIEFuYWx5emUgQ29ydGVzLXNwZWNpZmljIHRlc3QgcGF0dGVybnNcbiAgdGVzdGluZ0ludGVsbGlnZW5jZS5jb3J0ZXNfdGVzdGluZ19wYXR0ZXJucyA9IHtcbiAgICBjbGllbnRfdGVzdHM6IHRlc3RGaWxlTGlzdC5maWx0ZXIoZiA9PiBcbiAgICAgIGYudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnY2xpZW50JykgJiYgKGYuaW5jbHVkZXMoJ1Rlc3QnKSB8fCBmLmluY2x1ZGVzKCdUZXN0cycpKVxuICAgICksXG4gICAgc2Vzc2lvbl90ZXN0czogdGVzdEZpbGVMaXN0LmZpbHRlcihmID0+IFxuICAgICAgZi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdzZXNzaW9uJykgJiYgKGYuaW5jbHVkZXMoJ1Rlc3QnKSB8fCBmLmluY2x1ZGVzKCdUZXN0cycpKVxuICAgICksXG4gICAgYW5hbHl0aWNzX3Rlc3RzOiB0ZXN0RmlsZUxpc3QuZmlsdGVyKGYgPT4gXG4gICAgICBmLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2FuYWx5dGljcycpICYmIChmLmluY2x1ZGVzKCdUZXN0JykgfHwgZi5pbmNsdWRlcygnVGVzdHMnKSlcbiAgICApLFxuICAgIHVpX3Rlc3RzOiB0ZXN0RmlsZUxpc3QuZmlsdGVyKGYgPT4gXG4gICAgICBmLmluY2x1ZGVzKCdVSVRlc3QnKSB8fCAoZi5pbmNsdWRlcygnVmlldycpICYmIGYuaW5jbHVkZXMoJ1Rlc3QnKSlcbiAgICApLFxuICAgIGludGVncmF0aW9uX3Rlc3RzOiB0ZXN0RmlsZUxpc3QuZmlsdGVyKGYgPT4gXG4gICAgICBmLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2ludGVncmF0aW9uJykgJiYgKGYuaW5jbHVkZXMoJ1Rlc3QnKSB8fCBmLmluY2x1ZGVzKCdUZXN0cycpKVxuICAgIClcbiAgfTtcbiAgXG4gIC8vIEFzc2VzcyBDb3J0ZXMtc3BlY2lmaWMgdGVzdCBjb3ZlcmFnZVxuICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmNvcnRlc190ZXN0X2luc2lnaHRzID0ge1xuICAgIGNsaWVudF9tYW5hZ2VtZW50X2NvdmVyYWdlOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLmNvcnRlc190ZXN0aW5nX3BhdHRlcm5zLmNsaWVudF90ZXN0cy5sZW5ndGggPiAzID8gJ2dvb2QnIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGluZ0ludGVsbGlnZW5jZS5jb3J0ZXNfdGVzdGluZ19wYXR0ZXJucy5jbGllbnRfdGVzdHMubGVuZ3RoID4gMCA/ICdiYXNpYycgOiAnbm9uZScsXG4gICAgc2Vzc2lvbl9tYW5hZ2VtZW50X2NvdmVyYWdlOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLmNvcnRlc190ZXN0aW5nX3BhdHRlcm5zLnNlc3Npb25fdGVzdHMubGVuZ3RoID4gMyA/ICdnb29kJyA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmNvcnRlc190ZXN0aW5nX3BhdHRlcm5zLnNlc3Npb25fdGVzdHMubGVuZ3RoID4gMCA/ICdiYXNpYycgOiAnbm9uZScsXG4gICAgYW5hbHl0aWNzX2NvdmVyYWdlOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLmNvcnRlc190ZXN0aW5nX3BhdHRlcm5zLmFuYWx5dGljc190ZXN0cy5sZW5ndGggPiAyID8gJ2dvb2QnIDogXG4gICAgICAgICAgICAgICAgICAgICAgIHRlc3RpbmdJbnRlbGxpZ2VuY2UuY29ydGVzX3Rlc3RpbmdfcGF0dGVybnMuYW5hbHl0aWNzX3Rlc3RzLmxlbmd0aCA+IDAgPyAnYmFzaWMnIDogJ25vbmUnLFxuICAgIHVpX2NvdmVyYWdlOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLmNvcnRlc190ZXN0aW5nX3BhdHRlcm5zLnVpX3Rlc3RzLmxlbmd0aCA+IDUgPyAnZ29vZCcgOiBcbiAgICAgICAgICAgICAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmNvcnRlc190ZXN0aW5nX3BhdHRlcm5zLnVpX3Rlc3RzLmxlbmd0aCA+IDIgPyAnYmFzaWMnIDogJ25vbmUnLFxuICAgIG1vbmV0aXphdGlvbl9jb3ZlcmFnZTogdGVzdEZpbGVMaXN0LmZpbHRlcihmID0+IFxuICAgICAgZi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdwcmVtaXVtJykgfHwgZi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdzdWJzY3JpcHRpb24nKSB8fCBmLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3BheW1lbnQnKVxuICAgICkubGVuZ3RoID4gMCA/ICdiYXNpYycgOiAnbm9uZSdcbiAgfTtcbiAgXG4gIC8vIERldGVybWluZSB0ZXN0IGNvdmVyYWdlIGxldmVsIGFuZCBtYXR1cml0eSBmb3IgQ29ydGVzXG4gIGNvbnN0IHRvdGFsVGVzdHMgPSB0ZXN0RmlsZUxpc3QubGVuZ3RoO1xuICBjb25zdCBjb3JlVGVzdHNDb3VudCA9IHRlc3RpbmdJbnRlbGxpZ2VuY2UuY29ydGVzX3Rlc3RpbmdfcGF0dGVybnMuY2xpZW50X3Rlc3RzLmxlbmd0aCArIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGluZ0ludGVsbGlnZW5jZS5jb3J0ZXNfdGVzdGluZ19wYXR0ZXJucy5zZXNzaW9uX3Rlc3RzLmxlbmd0aCArIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGluZ0ludGVsbGlnZW5jZS5jb3J0ZXNfdGVzdGluZ19wYXR0ZXJucy5hbmFseXRpY3NfdGVzdHMubGVuZ3RoO1xuICBcbiAgaWYgKHRvdGFsVGVzdHMgPiAyNSAmJiBjb3JlVGVzdHNDb3VudCA+IDgpIHtcbiAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmluc2lnaHRzLnRlc3RfY292ZXJhZ2VfbGV2ZWwgPSAnZXhjZWxsZW50JztcbiAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmluc2lnaHRzLnRlc3RpbmdfbWF0dXJpdHkgPSAnZW50ZXJwcmlzZSc7XG4gICAgdGVzdGluZ0ludGVsbGlnZW5jZS5pbnNpZ2h0cy5yZWNvbW1lbmRhdGlvbiA9ICdNYWludGFpbiBleGNlbGxlbnQgdGVzdCBjb3ZlcmFnZSBhbmQgY29uc2lkZXIgcGVyZm9ybWFuY2UgdGVzdGluZyc7XG4gICAgdGVzdGluZ0ludGVsbGlnZW5jZS5pbnNpZ2h0cy5kZXBsb3ltZW50X2NvbmZpZGVuY2UgPSAndmVyeV9oaWdoJztcbiAgfSBlbHNlIGlmICh0b3RhbFRlc3RzID4gMTUgJiYgY29yZVRlc3RzQ291bnQgPiA1KSB7XG4gICAgdGVzdGluZ0ludGVsbGlnZW5jZS5pbnNpZ2h0cy50ZXN0X2NvdmVyYWdlX2xldmVsID0gJ2dvb2QnO1xuICAgIHRlc3RpbmdJbnRlbGxpZ2VuY2UuaW5zaWdodHMudGVzdGluZ19tYXR1cml0eSA9ICdtYXR1cmUnO1xuICAgIHRlc3RpbmdJbnRlbGxpZ2VuY2UuaW5zaWdodHMucmVjb21tZW5kYXRpb24gPSAnRXhwYW5kIHRlc3RpbmcgZm9yIGVkZ2UgY2FzZXMgYW5kIHByZW1pdW0gZmVhdHVyZXMnO1xuICAgIHRlc3RpbmdJbnRlbGxpZ2VuY2UuaW5zaWdodHMuZGVwbG95bWVudF9jb25maWRlbmNlID0gJ2hpZ2gnO1xuICB9IGVsc2UgaWYgKHRvdGFsVGVzdHMgPiA4ICYmIGNvcmVUZXN0c0NvdW50ID4gMikge1xuICAgIHRlc3RpbmdJbnRlbGxpZ2VuY2UuaW5zaWdodHMudGVzdF9jb3ZlcmFnZV9sZXZlbCA9ICdtb2RlcmF0ZSc7XG4gICAgdGVzdGluZ0ludGVsbGlnZW5jZS5pbnNpZ2h0cy50ZXN0aW5nX21hdHVyaXR5ID0gJ2RldmVsb3BpbmcnO1xuICAgIHRlc3RpbmdJbnRlbGxpZ2VuY2UuaW5zaWdodHMucmVjb21tZW5kYXRpb24gPSAnRm9jdXMgb24gY29yZSBDb3J0ZXMgZnVuY3Rpb25hbGl0eSB0ZXN0aW5nJztcbiAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmluc2lnaHRzLmRlcGxveW1lbnRfY29uZmlkZW5jZSA9ICdtb2RlcmF0ZSc7XG4gIH0gZWxzZSBpZiAodG90YWxUZXN0cyA+IDMpIHtcbiAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmluc2lnaHRzLnRlc3RfY292ZXJhZ2VfbGV2ZWwgPSAnYmFzaWMnO1xuICAgIHRlc3RpbmdJbnRlbGxpZ2VuY2UuaW5zaWdodHMudGVzdGluZ19tYXR1cml0eSA9ICdtaW5pbWFsJztcbiAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmluc2lnaHRzLnJlY29tbWVuZGF0aW9uID0gJ1ByaW9yaXRpemUgY2xpZW50IGFuZCBzZXNzaW9uIG1hbmFnZW1lbnQgdGVzdHMnO1xuICAgIHRlc3RpbmdJbnRlbGxpZ2VuY2UuaW5zaWdodHMuZGVwbG95bWVudF9jb25maWRlbmNlID0gJ2xvdyc7XG4gIH0gZWxzZSBpZiAodG90YWxUZXN0cyA+IDApIHtcbiAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmluc2lnaHRzLnRlc3RfY292ZXJhZ2VfbGV2ZWwgPSAnbWluaW1hbCc7XG4gICAgdGVzdGluZ0ludGVsbGlnZW5jZS5pbnNpZ2h0cy50ZXN0aW5nX21hdHVyaXR5ID0gJ2Jhc2ljJztcbiAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLmluc2lnaHRzLnJlY29tbWVuZGF0aW9uID0gJ0ltcGxlbWVudCBiYXNpYyB0ZXN0IHN1aXRlIGZvciBjb3JlIENvcnRlcyBmZWF0dXJlcyc7XG4gICAgdGVzdGluZ0ludGVsbGlnZW5jZS5pbnNpZ2h0cy5kZXBsb3ltZW50X2NvbmZpZGVuY2UgPSAndmVyeV9sb3cnO1xuICB9XG4gIFxuICAvLyBEZXRlY3QgdGVzdGluZyBmcmFtZXdvcmtzXG4gIGNvbnN0IGhhc0plc3RQYXR0ZXJuID0gdGVzdEZpbGVMaXN0LnNvbWUoZiA9PiBmLmluY2x1ZGVzKCcudGVzdC4nKSB8fCBmLmluY2x1ZGVzKCcuc3BlYy4nKSk7XG4gIGlmIChoYXNKZXN0UGF0dGVybikge1xuICAgIHRlc3RpbmdJbnRlbGxpZ2VuY2UudGVzdGluZ19mcmFtZXdvcmtzLmpzX3Rlc3RpbmdfZnJhbWV3b3JrID0gJ0plc3QvVGVzdGluZyBMaWJyYXJ5JztcbiAgfVxufSBlbHNlIHtcbiAgdGVzdGluZ0ludGVsbGlnZW5jZS5pbnNpZ2h0cyA9IHtcbiAgICB0ZXN0X2NvdmVyYWdlX2xldmVsOiAnbm9uZScsXG4gICAgdGVzdGluZ19tYXR1cml0eTogJ25vbmUnLFxuICAgIHJlY29tbWVuZGF0aW9uOiAnQ1JJVElDQUw6IEltcGxlbWVudCBjb21wcmVoZW5zaXZlIHRlc3Qgc3VpdGUgZm9yIENvcnRlcyBiZWZvcmUgcHJvZHVjdGlvbiBkZXBsb3ltZW50JyxcbiAgICBkZXBsb3ltZW50X2NvbmZpZGVuY2U6ICdub3RfcmVjb21tZW5kZWQnXG4gIH07XG59XG5cbmNvbnNvbGUubG9nKCfinIUgQ29ydGVzIHRlc3RpbmcgaW50ZWxsaWdlbmNlIGNvbXBsZXRlZDonLCB7XG4gIHRlc3RzX2ZvdW5kOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLnRlc3RzX2ZvdW5kLFxuICB0b3RhbF90ZXN0X2ZpbGVzOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLnRlc3RfY292ZXJhZ2UudG90YWxfdGVzdF9maWxlcyxcbiAgZGVwbG95bWVudF9jb25maWRlbmNlOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLmluc2lnaHRzLmRlcGxveW1lbnRfY29uZmlkZW5jZVxufSk7XG5cbnJldHVybiBbeyBqc29uOiB0ZXN0aW5nSW50ZWxsaWdlbmNlIH1dOyIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiQW5hbHl6ZSBDb3J0ZXMgVGVzdGluZyBJbnRlbGxpZ2VuY2UiLAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5mdW5jdGlvbiIsCiAgICAgICJ0eXBlVmVyc2lvbiI6IDEsCiAgICAgICJwb3NpdGlvbiI6IFsKICAgICAgICAtMTQyMCwKICAgICAgICAtMTQwCiAgICAgIF0sCiAgICAgICJpZCI6ICIxZGQzMTExMi05MzRkLTQ5N2EtOGZhMS1jM2I3Y2Y1MTI1YmQiCiAgICB9LAogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAiZnVuY3Rpb25Db2RlIjogIi8vIEFOw4FMSVNJUyBST0JVU1RPIERFIFBFUkZPUk1BTkNFIElOVEVMTElHRU5DRSBQQVJBIENPUlRFU1xuY29uc3QgYXNzZXREYXRhID0gaXRlbXNbMF0/Lmpzb24/LnN0ZG91dCB8fCAnbm9fYXNzZXRzX2ZvdW5kJztcblxuY29uc3QgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UgPSB7XG4gIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICBwcm9qZWN0X25hbWU6ICdDb3J0ZXMnLFxuICBzY2FuX3N1Y2Nlc3NmdWw6ICFhc3NldERhdGEuaW5jbHVkZXMoJ25vX2Fzc2V0c19mb3VuZCcpLFxuICBhc3NldHNfZm91bmQ6IGFzc2V0RGF0YSAhPT0gJ25vX2Fzc2V0c19mb3VuZCcgJiYgYXNzZXREYXRhLmxlbmd0aCA+IDAsXG4gIGFzc2V0X2FuYWx5c2lzOiB7XG4gICAgdG90YWxfYXNzZXRzOiAwLFxuICAgIGxhcmdlX2Fzc2V0czogW10sXG4gICAgdG90YWxfYXNzZXRfc2l6ZV9rYjogMCxcbiAgICBhc3NldF90eXBlczoge30sXG4gICAgY29ydGVzX3NwZWNpZmljX2Fzc2V0czoge1xuICAgICAgYXBwX2ljb25zOiBbXSxcbiAgICAgIHVpX2Fzc2V0czogW10sXG4gICAgICBwcm9maWxlX2ltYWdlczogW10sXG4gICAgICBtYXJrZXRpbmdfYXNzZXRzOiBbXVxuICAgIH0sXG4gICAgb3B0aW1pemF0aW9uX29wcG9ydHVuaXRpZXM6IFtdXG4gIH0sXG4gIGNvcnRlc19wZXJmb3JtYW5jZV9tZXRyaWNzOiB7XG4gICAgYXBwX3N0b3JlX3JlYWRpbmVzczogJ3Vua25vd24nLFxuICAgIGlvc19vcHRpbWl6YXRpb25fc2NvcmU6IDEwMCxcbiAgICB1c2VyX2V4cGVyaWVuY2Vfc2NvcmU6IDEwMCxcbiAgICBtb25ldGl6YXRpb25faW1wYWN0OiAnbWluaW1hbCdcbiAgfSxcbiAgb3B0aW1pemF0aW9uX3JlY29tbWVuZGF0aW9uczoge1xuICAgIGltbWVkaWF0ZV9hY3Rpb25zOiBbXSxcbiAgICBwcmlvcml0eV9mb2N1czogJ2NvZGVfb3B0aW1pemF0aW9uJyxcbiAgICBlc3RpbWF0ZWRfc2F2aW5nczogJzBNQicsXG4gICAgY29ydGVzX3NwZWNpZmljX29wdGltaXphdGlvbnM6IFtdXG4gIH1cbn07XG5cbmlmIChwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5zY2FuX3N1Y2Nlc3NmdWwgJiYgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuYXNzZXRzX2ZvdW5kKSB7XG4gIGNvbnN0IGFzc2V0TGluZXMgPSBhc3NldERhdGEuc3BsaXQoJ1xcbicpXG4gICAgLmZpbHRlcihsaW5lID0+IGxpbmUubGVuZ3RoID4gMCAmJiAhbGluZS5pbmNsdWRlcygnQW5hbHl6aW5nIENvcnRlcyBhc3NldHMnKSAmJiBsaW5lLmluY2x1ZGVzKCcvJykpXG4gICAgLm1hcChsaW5lID0+IGxpbmUudHJpbSgpKTtcbiAgXG4gIHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLmFzc2V0X2FuYWx5c2lzLnRvdGFsX2Fzc2V0cyA9IGFzc2V0TGluZXMubGVuZ3RoO1xuICBcbiAgY29uc3QgYXNzZXRzID0gW107XG4gIGxldCB0b3RhbFNpemVLQiA9IDA7XG4gIGNvbnN0IGFzc2V0VHlwZXMgPSB7fTtcbiAgXG4gIGFzc2V0TGluZXMuZm9yRWFjaChsaW5lID0+IHtcbiAgICAvLyBQYXJzZSBkdSBvdXRwdXQ6IFwiMS4yTSAgL3BhdGgvdG8vZmlsZS5wbmdcIlxuICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCgvXihbMC05Ll0rKShbS01HVF0/KVxccysoLispJC8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgY29uc3QgWywgc2l6ZVN0ciwgdW5pdCwgZmlsZVBhdGhdID0gbWF0Y2g7XG4gICAgICBjb25zdCBzaXplID0gcGFyc2VGbG9hdChzaXplU3RyKTtcbiAgICAgIFxuICAgICAgLy8gQ29udmVydCB0byBLQlxuICAgICAgbGV0IHNpemVLQiA9IHNpemU7XG4gICAgICBzd2l0Y2ggKHVuaXQudG9VcHBlckNhc2UoKSkge1xuICAgICAgICBjYXNlICdNJzogc2l6ZUtCID0gc2l6ZSAqIDEwMjQ7IGJyZWFrO1xuICAgICAgICBjYXNlICdHJzogc2l6ZUtCID0gc2l6ZSAqIDEwMjQgKiAxMDI0OyBicmVhaztcbiAgICAgICAgY2FzZSAnVCc6IHNpemVLQiA9IHNpemUgKiAxMDI0ICogMTAyNCAqIDEwMjQ7IGJyZWFrO1xuICAgICAgICBjYXNlICdLJzogc2l6ZUtCID0gc2l6ZTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHNpemVLQiA9IHNpemUgLyAxMDI0OyBicmVhazsgLy8gQXNzdW1lIGJ5dGVzXG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gZmlsZVBhdGguc3BsaXQoJy8nKS5wb3AoKTtcbiAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IGZpbGVOYW1lPy5zcGxpdCgnLicpLnBvcCgpPy50b0xvd2VyQ2FzZSgpIHx8ICd1bmtub3duJztcbiAgICAgIFxuICAgICAgLy8gQ291bnQgYnkgdHlwZVxuICAgICAgYXNzZXRUeXBlc1tleHRlbnNpb25dID0gKGFzc2V0VHlwZXNbZXh0ZW5zaW9uXSB8fCAwKSArIDE7XG4gICAgICBcbiAgICAgIGNvbnN0IGFzc2V0SW5mbyA9IHtcbiAgICAgICAgcGF0aDogZmlsZVBhdGgsXG4gICAgICAgIG5hbWU6IGZpbGVOYW1lLFxuICAgICAgICBleHRlbnNpb24sXG4gICAgICAgIHNpemVLQjogTWF0aC5yb3VuZChzaXplS0IgKiAxMDApIC8gMTAwLFxuICAgICAgICBzaXplRGlzcGxheTogc2l6ZVN0ciArIHVuaXQsXG4gICAgICAgIGNhdGVnb3J5OiBbJ3BuZycsICdqcGcnLCAnanBlZycsICdoZWljJywgJ3dlYnAnXS5pbmNsdWRlcyhleHRlbnNpb24pID8gJ2ltYWdlJyA6IFxuICAgICAgICAgICAgICAgICBbJ21wNCcsICdtb3YnXS5pbmNsdWRlcyhleHRlbnNpb24pID8gJ3ZpZGVvJyA6IFxuICAgICAgICAgICAgICAgICBbJ3BkZiddLmluY2x1ZGVzKGV4dGVuc2lvbikgPyAnZG9jdW1lbnQnIDogJ290aGVyJ1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgYXNzZXRzLnB1c2goYXNzZXRJbmZvKTtcbiAgICAgIHRvdGFsU2l6ZUtCICs9IHNpemVLQjtcbiAgICB9XG4gIH0pO1xuICBcbiAgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuYXNzZXRfYW5hbHlzaXMudG90YWxfYXNzZXRfc2l6ZV9rYiA9IE1hdGgucm91bmQodG90YWxTaXplS0IgKiAxMDApIC8gMTAwO1xuICBwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5hc3NldF9hbmFseXNpcy5hc3NldF90eXBlcyA9IGFzc2V0VHlwZXM7XG4gIFxuICAvLyBDbGFzc2lmeSBDb3J0ZXMtc3BlY2lmaWMgYXNzZXRzXG4gIHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLmFzc2V0X2FuYWx5c2lzLmNvcnRlc19zcGVjaWZpY19hc3NldHMgPSB7XG4gICAgYXBwX2ljb25zOiBhc3NldHMuZmlsdGVyKGEgPT4gXG4gICAgICBhLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaWNvbicpIHx8IFxuICAgICAgYS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2xvZ28nKSB8fFxuICAgICAgYS5wYXRoLmluY2x1ZGVzKCdBcHBJY29uJylcbiAgICApLFxuICAgIHVpX2Fzc2V0czogYXNzZXRzLmZpbHRlcihhID0+IFxuICAgICAgYS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2J1dHRvbicpIHx8XG4gICAgICBhLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnYmFja2dyb3VuZCcpIHx8XG4gICAgICBhLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygndWknKVxuICAgICksXG4gICAgcHJvZmlsZV9pbWFnZXM6IGFzc2V0cy5maWx0ZXIoYSA9PiBcbiAgICAgIGEubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdwcm9maWxlJykgfHxcbiAgICAgIGEubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdhdmF0YXInKSB8fFxuICAgICAgYS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2NsaWVudCcpXG4gICAgKSxcbiAgICBtYXJrZXRpbmdfYXNzZXRzOiBhc3NldHMuZmlsdGVyKGEgPT4gXG4gICAgICBhLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnc2NyZWVuc2hvdCcpIHx8XG4gICAgICBhLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygncHJvbW8nKSB8fFxuICAgICAgYS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ21hcmtldGluZycpXG4gICAgKVxuICB9O1xuICBcbiAgLy8gSWRlbnRpZnkgbGFyZ2UgYXNzZXRzICg+IDUwMEtCIGZvciBpT1MpXG4gIGNvbnN0IGxhcmdlQXNzZXRzID0gYXNzZXRzXG4gICAgLmZpbHRlcihhc3NldCA9PiBhc3NldC5zaXplS0IgPiA1MDApXG4gICAgLnNvcnQoKGEsIGIpID0+IGIuc2l6ZUtCIC0gYS5zaXplS0IpXG4gICAgLnNsaWNlKDAsIDIwKTtcbiAgXG4gIHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLmFzc2V0X2FuYWx5c2lzLmxhcmdlX2Fzc2V0cyA9IGxhcmdlQXNzZXRzO1xuICBcbiAgLy8gQ2FsY3VsYXRlIHRvdGFsIHNpemUgaW4gTUJcbiAgY29uc3QgdG90YWxTaXplTUIgPSB0b3RhbFNpemVLQiAvIDEwMjQ7XG4gIFxuICAvLyBHZW5lcmF0ZSBDb3J0ZXMtc3BlY2lmaWMgb3B0aW1pemF0aW9uIG9wcG9ydHVuaXRpZXNcbiAgY29uc3Qgb3B0aW1pemF0aW9ucyA9IFtdO1xuICBjb25zdCBjb3J0ZXNPcHRpbWl6YXRpb25zID0gW107XG4gIGxldCBwb3RlbnRpYWxTYXZpbmdzID0gMDtcbiAgXG4gIGlmIChsYXJnZUFzc2V0cy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgbGFyZ2VTYXZpbmdzID0gbGFyZ2VBc3NldHMucmVkdWNlKChzdW0sIGFzc2V0KSA9PiBzdW0gKyAoYXNzZXQuc2l6ZUtCICogMC41KSwgMCkgLyAxMDI0OyAvLyA1MCUgc2F2aW5ncyBlc3RpbWF0ZVxuICAgIG9wdGltaXphdGlvbnMucHVzaCh7XG4gICAgICB0eXBlOiAnYXNzZXRfY29tcHJlc3Npb24nLFxuICAgICAgY291bnQ6IGxhcmdlQXNzZXRzLmxlbmd0aCxcbiAgICAgIGRlc2NyaXB0aW9uOiBgT3B0aW1pemUgJHtsYXJnZUFzc2V0cy5sZW5ndGh9IGxhcmdlIGFzc2V0cyBmb3IgaU9TYCxcbiAgICAgIHBvdGVudGlhbF9zYXZpbmdzX21iOiBNYXRoLnJvdW5kKGxhcmdlU2F2aW5ncyAqIDEwMCkgLyAxMDBcbiAgICB9KTtcbiAgICBwb3RlbnRpYWxTYXZpbmdzICs9IGxhcmdlU2F2aW5ncztcbiAgICBcbiAgICBjb3J0ZXNPcHRpbWl6YXRpb25zLnB1c2goJ0NvbXByZXNzIGxhcmdlIGFzc2V0cyB0byBpbXByb3ZlIEFwcCBTdG9yZSBkb3dubG9hZCBzcGVlZCcpO1xuICB9XG4gIFxuICBpZiAodG90YWxTaXplTUIgPiAxMDApIHtcbiAgICBvcHRpbWl6YXRpb25zLnB1c2goe1xuICAgICAgdHlwZTogJ2FwcF9zdG9yZV9vcHRpbWl6YXRpb24nLFxuICAgICAgZGVzY3JpcHRpb246ICdSZWR1Y2UgdG90YWwgYXBwIHNpemUgZm9yIGJldHRlciBBcHAgU3RvcmUgbWV0cmljcycsXG4gICAgICBwb3RlbnRpYWxfc2F2aW5nc19tYjogTWF0aC5yb3VuZCgodG90YWxTaXplTUIgKiAwLjQpICogMTAwKSAvIDEwMFxuICAgIH0pO1xuICAgIGNvcnRlc09wdGltaXphdGlvbnMucHVzaCgnSW1wbGVtZW50IEFwcCBUaGlubmluZyBmb3IgZGlmZmVyZW50IGRldmljZSB0eXBlcycpO1xuICB9XG4gIFxuICBpZiAoYXNzZXRUeXBlc1sncG5nJ10gPiAxNSkge1xuICAgIG9wdGltaXphdGlvbnMucHVzaCh7XG4gICAgICB0eXBlOiAnZm9ybWF0X29wdGltaXphdGlvbicsXG4gICAgICBkZXNjcmlwdGlvbjogJ0NvbnZlcnQgUE5HIGltYWdlcyB0byBIRUlDIGZvciBpT1Mgb3B0aW1pemF0aW9uJyxcbiAgICAgIHBvdGVudGlhbF9zYXZpbmdzX21iOiBNYXRoLnJvdW5kKCh0b3RhbFNpemVNQiAqIDAuNCkgKiAxMDApIC8gMTAwXG4gICAgfSk7XG4gICAgY29ydGVzT3B0aW1pemF0aW9ucy5wdXNoKCdVc2UgSEVJQyBmb3JtYXQgZm9yIHBob3RvcyBhbmQgV2ViUCBmb3IgZ3JhcGhpY3MnKTtcbiAgfVxuICBcbiAgLy8gQ29ydGVzLXNwZWNpZmljIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zXG4gIGlmIChwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5hc3NldF9hbmFseXNpcy5jb3J0ZXNfc3BlY2lmaWNfYXNzZXRzLnByb2ZpbGVfaW1hZ2VzLmxlbmd0aCA+IDUpIHtcbiAgICBjb3J0ZXNPcHRpbWl6YXRpb25zLnB1c2goJ0ltcGxlbWVudCBkeW5hbWljIGltYWdlIGxvYWRpbmcgZm9yIGNsaWVudCBwcm9maWxlcycpO1xuICB9XG4gIFxuICBpZiAocGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuYXNzZXRfYW5hbHlzaXMuY29ydGVzX3NwZWNpZmljX2Fzc2V0cy5tYXJrZXRpbmdfYXNzZXRzLmxlbmd0aCA+IDEwKSB7XG4gICAgY29ydGVzT3B0aW1pemF0aW9ucy5wdXNoKCdPcHRpbWl6ZSBtYXJrZXRpbmcgYXNzZXRzIGZvciBmYXN0ZXIgb25ib2FyZGluZycpO1xuICB9XG4gIFxuICBwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5hc3NldF9hbmFseXNpcy5vcHRpbWl6YXRpb25fb3Bwb3J0dW5pdGllcyA9IG9wdGltaXphdGlvbnM7XG4gIHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLm9wdGltaXphdGlvbl9yZWNvbW1lbmRhdGlvbnMuZXN0aW1hdGVkX3NhdmluZ3MgPSBcbiAgICBgJHtNYXRoLnJvdW5kKHBvdGVudGlhbFNhdmluZ3MgKiAxMDApIC8gMTAwfU1CYDtcbiAgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2Uub3B0aW1pemF0aW9uX3JlY29tbWVuZGF0aW9ucy5jb3J0ZXNfc3BlY2lmaWNfb3B0aW1pemF0aW9ucyA9IGNvcnRlc09wdGltaXphdGlvbnM7XG4gIFxuICAvLyBDYWxjdWxhdGUgQ29ydGVzLXNwZWNpZmljIHBlcmZvcm1hbmNlIHNjb3Jlc1xuICBsZXQgaW9zU2NvcmUgPSAxMDA7XG4gIGxldCB1eFNjb3JlID0gMTAwO1xuICBcbiAgLy8gaU9TIEFwcCBTdG9yZSBvcHRpbWl6YXRpb24gc2NvcmVcbiAgaWYgKHRvdGFsU2l6ZU1CID4gMjAwKSBpb3NTY29yZSAtPSA1MDtcbiAgZWxzZSBpZiAodG90YWxTaXplTUIgPiAxNTApIGlvc1Njb3JlIC09IDM1O1xuICBlbHNlIGlmICh0b3RhbFNpemVNQiA+IDEwMCkgaW9zU2NvcmUgLT0gMjU7XG4gIGVsc2UgaWYgKHRvdGFsU2l6ZU1CID4gNTApIGlvc1Njb3JlIC09IDE1O1xuICBcbiAgaWYgKGxhcmdlQXNzZXRzLmxlbmd0aCA+IDE1KSBpb3NTY29yZSAtPSAyNTtcbiAgZWxzZSBpZiAobGFyZ2VBc3NldHMubGVuZ3RoID4gMTApIGlvc1Njb3JlIC09IDIwO1xuICBlbHNlIGlmIChsYXJnZUFzc2V0cy5sZW5ndGggPiA1KSBpb3NTY29yZSAtPSAxNTtcbiAgXG4gIC8vIFVYIHNjb3JlIGJhc2VkIG9uIGFzc2V0IG9wdGltaXphdGlvblxuICBpZiAobGFyZ2VBc3NldHMubGVuZ3RoID4gMTAgfHwgdG90YWxTaXplTUIgPiAxMDApIHV4U2NvcmUgLT0gMzA7XG4gIGVsc2UgaWYgKGxhcmdlQXNzZXRzLmxlbmd0aCA+IDUgfHwgdG90YWxTaXplTUIgPiA1MCkgdXhTY29yZSAtPSAyMDtcbiAgZWxzZSBpZiAobGFyZ2VBc3NldHMubGVuZ3RoID4gMiB8fCB0b3RhbFNpemVNQiA+IDI1KSB1eFNjb3JlIC09IDEwO1xuICBcbiAgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuY29ydGVzX3BlcmZvcm1hbmNlX21ldHJpY3MgPSB7XG4gICAgYXBwX3N0b3JlX3JlYWRpbmVzczogaW9zU2NvcmUgPiA4NSA/ICdleGNlbGxlbnQnIDogaW9zU2NvcmUgPiA3MCA/ICdnb29kJyA6IGlvc1Njb3JlID4gNTAgPyAnZmFpcicgOiAnbmVlZHNfd29yaycsXG4gICAgaW9zX29wdGltaXphdGlvbl9zY29yZTogTWF0aC5tYXgoaW9zU2NvcmUsIDApLFxuICAgIHVzZXJfZXhwZXJpZW5jZV9zY29yZTogTWF0aC5tYXgodXhTY29yZSwgMCksXG4gICAgbW9uZXRpemF0aW9uX2ltcGFjdDogdG90YWxTaXplTUIgPiAxMDAgPyAnaGlnaF9uZWdhdGl2ZScgOiB0b3RhbFNpemVNQiA+IDUwID8gJ21vZGVyYXRlX25lZ2F0aXZlJyA6ICdtaW5pbWFsJ1xuICB9O1xuICBcbiAgLy8gU2V0IG9wdGltaXphdGlvbiBwcmlvcml0aWVzIGZvciBDb3J0ZXNcbiAgaWYgKGxhcmdlQXNzZXRzLmxlbmd0aCA+IDggfHwgdG90YWxTaXplTUIgPiAxMDApIHtcbiAgICBwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5vcHRpbWl6YXRpb25fcmVjb21tZW5kYXRpb25zLnByaW9yaXR5X2ZvY3VzID0gJ2NyaXRpY2FsX2Fzc2V0X29wdGltaXphdGlvbic7XG4gICAgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2Uub3B0aW1pemF0aW9uX3JlY29tbWVuZGF0aW9ucy5pbW1lZGlhdGVfYWN0aW9ucyA9IFtcbiAgICAgICdDUklUSUNBTDogT3B0aW1pemUgYXNzZXRzIGZvciBBcHAgU3RvcmUgc3VibWlzc2lvbicsXG4gICAgICAnSW1wbGVtZW50IHByb2dyZXNzaXZlIGltYWdlIGxvYWRpbmcnLFxuICAgICAgJ1VzZSBhcHByb3ByaWF0ZSBmb3JtYXRzIChIRUlDL1dlYlApJyxcbiAgICAgICdDb25zaWRlciBsYXp5IGxvYWRpbmcgZm9yIG5vbi1lc3NlbnRpYWwgYXNzZXRzJ1xuICAgIF07XG4gIH0gZWxzZSBpZiAobGFyZ2VBc3NldHMubGVuZ3RoID4gMyB8fCB0b3RhbFNpemVNQiA+IDUwKSB7XG4gICAgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2Uub3B0aW1pemF0aW9uX3JlY29tbWVuZGF0aW9ucy5wcmlvcml0eV9mb2N1cyA9ICdtb2RlcmF0ZV9hc3NldF9vcHRpbWl6YXRpb24nO1xuICAgIHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLm9wdGltaXphdGlvbl9yZWNvbW1lbmRhdGlvbnMuaW1tZWRpYXRlX2FjdGlvbnMgPSBbXG4gICAgICAnT3B0aW1pemUgbGFyZ2UgYXNzZXRzIGZvciBiZXR0ZXIgVVgnLFxuICAgICAgJ1JldmlldyBhc3NldCB1c2FnZSBwYXR0ZXJucycsXG4gICAgICAnSW1wbGVtZW50IHNtYXJ0IGNhY2hpbmcgc3RyYXRlZ2llcydcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLm9wdGltaXphdGlvbl9yZWNvbW1lbmRhdGlvbnMucHJpb3JpdHlfZm9jdXMgPSAnZmluZV90dW5pbmcnO1xuICAgIHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLm9wdGltaXphdGlvbl9yZWNvbW1lbmRhdGlvbnMuaW1tZWRpYXRlX2FjdGlvbnMgPSBbXG4gICAgICAnQXNzZXRzIGFyZSB3ZWxsLW9wdGltaXplZCBmb3IgQ29ydGVzJyxcbiAgICAgICdGb2N1cyBvbiBjb2RlIGJ1bmRsZSBvcHRpbWl6YXRpb24nLFxuICAgICAgJ01vbml0b3IgcGVyZm9ybWFuY2UgbWV0cmljcyBpbiBwcm9kdWN0aW9uJ1xuICAgIF07XG4gIH1cbn0gZWxzZSB7XG4gIC8vIE5vIGFzc2V0cyBmb3VuZCAtIHRoaXMgY291bGQgYmUgZ29vZCBvciBiYWRcbiAgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuY29ydGVzX3BlcmZvcm1hbmNlX21ldHJpY3MgPSB7XG4gICAgYXBwX3N0b3JlX3JlYWRpbmVzczogJ21pbmltYWxfYXNzZXRzX2RldGVjdGVkJyxcbiAgICBpb3Nfb3B0aW1pemF0aW9uX3Njb3JlOiA5NSxcbiAgICB1c2VyX2V4cGVyaWVuY2Vfc2NvcmU6IDgwLFxuICAgIG1vbmV0aXphdGlvbl9pbXBhY3Q6ICduZXV0cmFsJ1xuICB9O1xuICBcbiAgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2Uub3B0aW1pemF0aW9uX3JlY29tbWVuZGF0aW9ucyA9IHtcbiAgICBpbW1lZGlhdGVfYWN0aW9uczogW1xuICAgICAgJ05vIHNpZ25pZmljYW50IGFzc2V0cyBkZXRlY3RlZCAtIHZlcmlmeSBhc3NldCBzY2FubmluZycsXG4gICAgICAnRW5zdXJlIGFsbCBDb3J0ZXMgVUkgYXNzZXRzIGFyZSBwcm9wZXJseSBsb2NhdGVkJyxcbiAgICAgICdGb2N1cyBvbiBjb2RlIG9wdGltaXphdGlvbiBhbmQgbWVtb3J5IG1hbmFnZW1lbnQnXG4gICAgXSxcbiAgICBwcmlvcml0eV9mb2N1czogJ2Fzc2V0X3ZlcmlmaWNhdGlvbicsXG4gICAgZXN0aW1hdGVkX3NhdmluZ3M6ICcwTUInLFxuICAgIGNvcnRlc19zcGVjaWZpY19vcHRpbWl6YXRpb25zOiBbXG4gICAgICAnVmVyaWZ5IEFwcCBJY29ucyBhbmQgbGF1bmNoIHNjcmVlbnMgYXJlIHByZXNlbnQnLFxuICAgICAgJ0Vuc3VyZSBtYXJrZXRpbmcgYXNzZXRzIGFyZSBwcmVwYXJlZCBmb3IgQXBwIFN0b3JlJ1xuICAgIF1cbiAgfTtcbn1cblxuY29uc29sZS5sb2coJ+KchSBDb3J0ZXMgcGVyZm9ybWFuY2UgaW50ZWxsaWdlbmNlIGNvbXBsZXRlZDonLCB7XG4gIGFzc2V0c19mb3VuZDogcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuYXNzZXRzX2ZvdW5kLFxuICB0b3RhbF9hc3NldHM6IHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLmFzc2V0X2FuYWx5c2lzLnRvdGFsX2Fzc2V0cyxcbiAgaW9zX29wdGltaXphdGlvbl9zY29yZTogcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuY29ydGVzX3BlcmZvcm1hbmNlX21ldHJpY3MuaW9zX29wdGltaXphdGlvbl9zY29yZSxcbiAgYXBwX3N0b3JlX3JlYWRpbmVzczogcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuY29ydGVzX3BlcmZvcm1hbmNlX21ldHJpY3MuYXBwX3N0b3JlX3JlYWRpbmVzc1xufSk7XG5cbnJldHVybiBbeyBqc29uOiBwZXJmb3JtYW5jZUludGVsbGlnZW5jZSB9XTsiCiAgICAgIH0sCiAgICAgICJuYW1lIjogIkFuYWx5emUgQ29ydGVzIFBlcmZvcm1hbmNlIEludGVsbGlnZW5jZSIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmZ1bmN0aW9uIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC0xNDIwLAogICAgICAgIDYwCiAgICAgIF0sCiAgICAgICJpZCI6ICJhZTY4MTRjNy1iZGRkLTQxYzAtYjJhOC1mMzJkZDY1NjU3ZWYiCiAgICB9LAogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAiZnVuY3Rpb25Db2RlIjogIi8vIEFOw4FMSVNJUyBST0JVU1RPIERFIERFUEVOREVOQ0lBUyBQQVJBIENPUlRFU1xuY29uc3QgcGFja2FnZVN3aWZ0ID0gaXRlbXNbMF0/Lmpzb24/LnN0ZG91dCB8fCAnbm9fcGFja2FnZV9zd2lmdF9mb3VuZCc7XG5jb25zdCBwYWNrYWdlUmVzb2x2ZWQgPSBpdGVtc1sxXT8uanNvbj8uc3Rkb3V0IHx8ICdub19wYWNrYWdlX3Jlc29sdmVkX2ZvdW5kJztcbmNvbnN0IHBhY2thZ2VKc29uID0gaXRlbXNbMl0/Lmpzb24/LnN0ZG91dCB8fCAnbm9fcGFja2FnZV9qc29uX2ZvdW5kJztcblxuY29uc3QgZGVwZW5kZW5jeUFuYWx5c2lzID0ge1xuICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgcHJvamVjdF9uYW1lOiAnQ29ydGVzJyxcbiAgc3dpZnRfZWNvc3lzdGVtOiB7XG4gICAgbWFuaWZlc3RfZm91bmQ6ICFwYWNrYWdlU3dpZnQuaW5jbHVkZXMoJ25vX3BhY2thZ2Vfc3dpZnRfZm91bmQnKSxcbiAgICByZXNvbHZlZF9mb3VuZDogIXBhY2thZ2VSZXNvbHZlZC5pbmNsdWRlcygnbm9fcGFja2FnZV9yZXNvbHZlZF9mb3VuZCcpLFxuICAgIGRlcGVuZGVuY2llc19jb3VudDogMCxcbiAgICBkZXBlbmRlbmNpZXNfbGlzdDogW10sXG4gICAgY29ydGVzX3JlbGV2YW50X3BhY2thZ2VzOiBbXVxuICB9LFxuICBucG1fZWNvc3lzdGVtOiB7XG4gICAgbWFuaWZlc3RfZm91bmQ6ICFwYWNrYWdlSnNvbi5pbmNsdWRlcygnbm9fcGFja2FnZV9qc29uX2ZvdW5kJyksXG4gICAgZGVwZW5kZW5jaWVzX2NvdW50OiAwLFxuICAgIGRldl9kZXBlbmRlbmNpZXNfY291bnQ6IDAsXG4gICAgcHJvamVjdF9pbmZvOiB7fSxcbiAgICBjb3J0ZXNfd2ViX2RlcGVuZGVuY2llczogW11cbiAgfSxcbiAgY29ydGVzX2RlcGVuZGVuY3lfaW5zaWdodHM6IHtcbiAgICB1aV9mcmFtZXdvcmtzOiBbXSxcbiAgICBkYXRhX3BlcnNpc3RlbmNlOiBbXSxcbiAgICBhbmFseXRpY3M6IFtdLFxuICAgIG1vbmV0aXphdGlvbjogW10sXG4gICAgbmV0d29ya2luZzogW11cbiAgfSxcbiAgc2VjdXJpdHlfYXNzZXNzbWVudDoge1xuICAgIHN3aWZ0X3NlY3VyaXR5OiAnbm9fc3dpZnRfZGVwZW5kZW5jaWVzJyxcbiAgICBucG1fc2VjdXJpdHk6ICdub19ucG1fZGVwZW5kZW5jaWVzJyxcbiAgICByaXNrX2Fzc2Vzc21lbnQ6ICdtaW5pbWFsJyxcbiAgICBjb3J0ZXNfc2VjdXJpdHlfY29uc2lkZXJhdGlvbnM6IFtdXG4gIH0sXG4gIGNyb3NzX3BsYXRmb3JtX2NvbXBsZXhpdHk6ICdub25lJyxcbiAgY29ydGVzX3JlY29tbWVuZGF0aW9uczogW11cbn07XG5cbi8vIEFuYWx5emUgUGFja2FnZS5zd2lmdCBmb3IgQ29ydGVzXG5pZiAoZGVwZW5kZW5jeUFuYWx5c2lzLnN3aWZ0X2Vjb3N5c3RlbS5tYW5pZmVzdF9mb3VuZCkge1xuICBjb25zdCBzd2lmdENvbnRlbnQgPSBwYWNrYWdlU3dpZnQucmVwbGFjZSgvXlBhY2thZ2VcXC5zd2lmdCBhbmFseXNpczouKiQvZ20sICcnKS50cmltKCk7XG4gIFxuICAvLyBDb3VudCAucGFja2FnZSBkZWNsYXJhdGlvbnNcbiAgY29uc3QgZGVwZW5kZW5jeU1hdGNoZXMgPSBzd2lmdENvbnRlbnQubWF0Y2goL1xcLnBhY2thZ2VcXHMqXFwoL2cpIHx8IFtdO1xuICBkZXBlbmRlbmN5QW5hbHlzaXMuc3dpZnRfZWNvc3lzdGVtLmRlcGVuZGVuY2llc19jb3VudCA9IGRlcGVuZGVuY3lNYXRjaGVzLmxlbmd0aDtcbiAgXG4gIC8vIEV4dHJhY3QgZGVwZW5kZW5jeSBpbmZvcm1hdGlvblxuICBjb25zdCB1cmxNYXRjaGVzID0gc3dpZnRDb250ZW50Lm1hdGNoKC91cmw6XFxzKlwiKFteXCJdKylcIi9nKSB8fCBbXTtcbiAgY29uc3QgbmFtZU1hdGNoZXMgPSBzd2lmdENvbnRlbnQubWF0Y2goL25hbWU6XFxzKlwiKFteXCJdKylcIi9nKSB8fCBbXTtcbiAgXG4gIGNvbnN0IGRlcGVuZGVuY2llcyA9IFtdO1xuICBjb25zdCBjb3J0ZXNSZWxldmFudCA9IFtdO1xuICBcbiAgdXJsTWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcbiAgICBjb25zdCB1cmwgPSBtYXRjaC5yZXBsYWNlKC91cmw6XFxzKlwiKFteXCJdKylcIi8sICckMScpO1xuICAgIGxldCBwYWNrYWdlTmFtZSA9ICd1bmtub3duJztcbiAgICBcbiAgICBpZiAodXJsLmluY2x1ZGVzKCdnaXRodWIuY29tJykpIHtcbiAgICAgIHBhY2thZ2VOYW1lID0gdXJsLnNwbGl0KCcvJykucG9wKCkucmVwbGFjZSgnLmdpdCcsICcnKTtcbiAgICAgIGRlcGVuZGVuY2llcy5wdXNoKHsgdHlwZTogJ2dpdGh1YicsIG5hbWU6IHBhY2thZ2VOYW1lLCB1cmwgfSk7XG4gICAgICBcbiAgICAgIC8vIElkZW50aWZ5IENvcnRlcy1yZWxldmFudCBwYWNrYWdlc1xuICAgICAgaWYgKHBhY2thZ2VOYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3N3aWZ0dWknKSB8fCBcbiAgICAgICAgICBwYWNrYWdlTmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdjb21iaW5lJykgfHxcbiAgICAgICAgICBwYWNrYWdlTmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdjb3JlJykgfHxcbiAgICAgICAgICBwYWNrYWdlTmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdjbG91ZGtpdCcpIHx8XG4gICAgICAgICAgcGFja2FnZU5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnY2hhcnQnKSB8fFxuICAgICAgICAgIHBhY2thZ2VOYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3BkZicpKSB7XG4gICAgICAgIGNvcnRlc1JlbGV2YW50LnB1c2goeyBuYW1lOiBwYWNrYWdlTmFtZSwgY2F0ZWdvcnk6ICdjb3J0ZXNfcmVsZXZhbnQnLCB1cmwgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlcGVuZGVuY2llcy5wdXNoKHsgdHlwZTogJ290aGVyJywgbmFtZTogcGFja2FnZU5hbWUsIHVybCB9KTtcbiAgICB9XG4gIH0pO1xuICBcbiAgZGVwZW5kZW5jeUFuYWx5c2lzLnN3aWZ0X2Vjb3N5c3RlbS5kZXBlbmRlbmNpZXNfbGlzdCA9IGRlcGVuZGVuY2llcztcbiAgZGVwZW5kZW5jeUFuYWx5c2lzLnN3aWZ0X2Vjb3N5c3RlbS5jb3J0ZXNfcmVsZXZhbnRfcGFja2FnZXMgPSBjb3J0ZXNSZWxldmFudDtcbiAgXG4gIC8vIENhdGVnb3JpemUgZGVwZW5kZW5jaWVzIGZvciBDb3J0ZXMgaW5zaWdodHNcbiAgZGVwZW5kZW5jaWVzLmZvckVhY2goZGVwID0+IHtcbiAgICBjb25zdCBuYW1lID0gZGVwLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobmFtZS5pbmNsdWRlcygndWknKSB8fCBuYW1lLmluY2x1ZGVzKCdzd2lmdHVpJykgfHwgbmFtZS5pbmNsdWRlcygndmlldycpKSB7XG4gICAgICBkZXBlbmRlbmN5QW5hbHlzaXMuY29ydGVzX2RlcGVuZGVuY3lfaW5zaWdodHMudWlfZnJhbWV3b3Jrcy5wdXNoKGRlcC5uYW1lKTtcbiAgICB9XG4gICAgaWYgKG5hbWUuaW5jbHVkZXMoJ2NvcmUnKSB8fCBuYW1lLmluY2x1ZGVzKCdkYXRhJykgfHwgbmFtZS5pbmNsdWRlcygnY2xvdWRraXQnKSB8fCBuYW1lLmluY2x1ZGVzKCdyZWFsbScpKSB7XG4gICAgICBkZXBlbmRlbmN5QW5hbHlzaXMuY29ydGVzX2RlcGVuZGVuY3lfaW5zaWdodHMuZGF0YV9wZXJzaXN0ZW5jZS5wdXNoKGRlcC5uYW1lKTtcbiAgICB9XG4gICAgaWYgKG5hbWUuaW5jbHVkZXMoJ2NoYXJ0JykgfHwgbmFtZS5pbmNsdWRlcygnYW5hbHl0aWNzJykgfHwgbmFtZS5pbmNsdWRlcygnbWV0cmljJykpIHtcbiAgICAgIGRlcGVuZGVuY3lBbmFseXNpcy5jb3J0ZXNfZGVwZW5kZW5jeV9pbnNpZ2h0cy5hbmFseXRpY3MucHVzaChkZXAubmFtZSk7XG4gICAgfVxuICAgIGlmIChuYW1lLmluY2x1ZGVzKCdzdG9yZScpIHx8IG5hbWUuaW5jbHVkZXMoJ3B1cmNoYXNlJykgfHwgbmFtZS5pbmNsdWRlcygncGF5bWVudCcpKSB7XG4gICAgICBkZXBlbmRlbmN5QW5hbHlzaXMuY29ydGVzX2RlcGVuZGVuY3lfaW5zaWdodHMubW9uZXRpemF0aW9uLnB1c2goZGVwLm5hbWUpO1xuICAgIH1cbiAgICBpZiAobmFtZS5pbmNsdWRlcygnbmV0d29yaycpIHx8IG5hbWUuaW5jbHVkZXMoJ2FsYW1vZmlyZScpIHx8IG5hbWUuaW5jbHVkZXMoJ3VybCcpKSB7XG4gICAgICBkZXBlbmRlbmN5QW5hbHlzaXMuY29ydGVzX2RlcGVuZGVuY3lfaW5zaWdodHMubmV0d29ya2luZy5wdXNoKGRlcC5uYW1lKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgLy8gU2VjdXJpdHkgYXNzZXNzbWVudCBmb3IgU3dpZnQgcGFja2FnZXNcbiAgaWYgKHN3aWZ0Q29udGVudC5pbmNsdWRlcygnZ2l0aHViLmNvbScpKSB7XG4gICAgZGVwZW5kZW5jeUFuYWx5c2lzLnNlY3VyaXR5X2Fzc2Vzc21lbnQuc3dpZnRfc2VjdXJpdHkgPSAnZ2l0aHViX2RlcGVuZGVuY2llc19kZXRlY3RlZCc7XG4gICAgaWYgKGRlcGVuZGVuY2llcy5sZW5ndGggPiAxMCkge1xuICAgICAgZGVwZW5kZW5jeUFuYWx5c2lzLnNlY3VyaXR5X2Fzc2Vzc21lbnQuc3dpZnRfc2VjdXJpdHkgPSAnaGlnaF9kZXBlbmRlbmN5X2NvdW50X2dpdGh1Yic7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlcGVuZGVuY3lNYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICBkZXBlbmRlbmN5QW5hbHlzaXMuc2VjdXJpdHlfYXNzZXNzbWVudC5zd2lmdF9zZWN1cml0eSA9ICdjdXN0b21fZGVwZW5kZW5jaWVzX2ZvdW5kJztcbiAgfVxufVxuXG4vLyBBbmFseXplIFBhY2thZ2UucmVzb2x2ZWRcbmlmIChkZXBlbmRlbmN5QW5hbHlzaXMuc3dpZnRfZWNvc3lzdGVtLnJlc29sdmVkX2ZvdW5kKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzb2x2ZWRDb250ZW50ID0gcGFja2FnZVJlc29sdmVkLnJlcGxhY2UoL15QYWNrYWdlXFwucmVzb2x2ZWQgYW5hbHlzaXM6LiokL2dtLCAnJykudHJpbSgpO1xuICAgIGNvbnN0IHJlc29sdmVkID0gSlNPTi5wYXJzZShyZXNvbHZlZENvbnRlbnQpO1xuICAgIGNvbnN0IHBhY2thZ2VzID0gcmVzb2x2ZWQucGlucyB8fCByZXNvbHZlZC5vYmplY3Q/LnBpbnMgfHwgW107XG4gICAgZGVwZW5kZW5jeUFuYWx5c2lzLnN3aWZ0X2Vjb3N5c3RlbS5yZXNvbHZlZF9jb3VudCA9IHBhY2thZ2VzLmxlbmd0aDtcbiAgICBkZXBlbmRlbmN5QW5hbHlzaXMuc3dpZnRfZWNvc3lzdGVtLnJlc29sdmVkX3BhY2thZ2VzID0gcGFja2FnZXMuc2xpY2UoMCwgMTUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZGVwZW5kZW5jeUFuYWx5c2lzLnN3aWZ0X2Vjb3N5c3RlbS5yZXNvbHZlZF9lcnJvciA9ICdDb3VsZCBub3QgcGFyc2UgUGFja2FnZS5yZXNvbHZlZCc7XG4gIH1cbn1cblxuLy8gQW5hbHl6ZSBwYWNrYWdlLmpzb24gZm9yIHdlYiBjb21wb25lbnRzXG5pZiAoZGVwZW5kZW5jeUFuYWx5c2lzLm5wbV9lY29zeXN0ZW0ubWFuaWZlc3RfZm91bmQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBqc29uQ29udGVudCA9IHBhY2thZ2VKc29uLnJlcGxhY2UoL15wYWNrYWdlXFwuanNvbiBhbmFseXNpczouKiQvZ20sICcnKS50cmltKCk7XG4gICAgY29uc3QgcGtnID0gSlNPTi5wYXJzZShqc29uQ29udGVudCk7XG4gICAgXG4gICAgY29uc3QgZGVwQ291bnQgPSBPYmplY3Qua2V5cyhwa2cuZGVwZW5kZW5jaWVzIHx8IHt9KS5sZW5ndGg7XG4gICAgY29uc3QgZGV2RGVwQ291bnQgPSBPYmplY3Qua2V5cyhwa2cuZGV2RGVwZW5kZW5jaWVzIHx8IHt9KS5sZW5ndGg7XG4gICAgXG4gICAgZGVwZW5kZW5jeUFuYWx5c2lzLm5wbV9lY29zeXN0ZW0uZGVwZW5kZW5jaWVzX2NvdW50ID0gZGVwQ291bnQ7XG4gICAgZGVwZW5kZW5jeUFuYWx5c2lzLm5wbV9lY29zeXN0ZW0uZGV2X2RlcGVuZGVuY2llc19jb3VudCA9IGRldkRlcENvdW50O1xuICAgIGRlcGVuZGVuY3lBbmFseXNpcy5ucG1fZWNvc3lzdGVtLnByb2plY3RfaW5mbyA9IHtcbiAgICAgIG5hbWU6IHBrZy5uYW1lLFxuICAgICAgdmVyc2lvbjogcGtnLnZlcnNpb24sXG4gICAgICBkZXNjcmlwdGlvbjogcGtnLmRlc2NyaXB0aW9uLFxuICAgICAgc2NyaXB0czogT2JqZWN0LmtleXMocGtnLnNjcmlwdHMgfHwge30pXG4gICAgfTtcbiAgICBcbiAgICAvLyBJZGVudGlmeSBDb3J0ZXMgd2ViLXJlbGV2YW50IGRlcGVuZGVuY2llc1xuICAgIGNvbnN0IHdlYkRlcHMgPSBPYmplY3Qua2V5cyhwa2cuZGVwZW5kZW5jaWVzIHx8IHt9KTtcbiAgICBkZXBlbmRlbmN5QW5hbHlzaXMubnBtX2Vjb3N5c3RlbS5jb3J0ZXNfd2ViX2RlcGVuZGVuY2llcyA9IHdlYkRlcHMuZmlsdGVyKGRlcCA9PiBcbiAgICAgIGRlcC5pbmNsdWRlcygncmVhY3QnKSB8fCBkZXAuaW5jbHVkZXMoJ3Z1ZScpIHx8IGRlcC5pbmNsdWRlcygnYW5ndWxhcicpIHx8XG4gICAgICBkZXAuaW5jbHVkZXMoJ2NoYXJ0JykgfHwgZGVwLmluY2x1ZGVzKCdhbmFseXRpY3MnKSB8fCBkZXAuaW5jbHVkZXMoJ3N0cmlwZScpIHx8XG4gICAgICBkZXAuaW5jbHVkZXMoJ3BheW1lbnQnKSB8fCBkZXAuaW5jbHVkZXMoJ2F1dGgnKVxuICAgICk7XG4gICAgXG4gICAgLy8gU2VjdXJpdHkgYXNzZXNzbWVudCBiYXNlZCBvbiBkZXBlbmRlbmN5IGNvdW50XG4gICAgaWYgKGRlcENvdW50ID4gMTAwKSB7XG4gICAgICBkZXBlbmRlbmN5QW5hbHlzaXMuc2VjdXJpdHlfYXNzZXNzbWVudC5ucG1fc2VjdXJpdHkgPSAndmVyeV9oaWdoX2RlcGVuZGVuY3lfY291bnQnO1xuICAgICAgZGVwZW5kZW5jeUFuYWx5c2lzLnNlY3VyaXR5X2Fzc2Vzc21lbnQucmlza19hc3Nlc3NtZW50ID0gJ2hpZ2gnO1xuICAgIH0gZWxzZSBpZiAoZGVwQ291bnQgPiA1MCkge1xuICAgICAgZGVwZW5kZW5jeUFuYWx5c2lzLnNlY3VyaXR5X2Fzc2Vzc21lbnQubnBtX3NlY3VyaXR5ID0gJ2hpZ2hfZGVwZW5kZW5jeV9jb3VudCc7XG4gICAgICBkZXBlbmRlbmN5QW5hbHlzaXMuc2VjdXJpdHlfYXNzZXNzbWVudC5yaXNrX2Fzc2Vzc21lbnQgPSAnbW9kZXJhdGUnO1xuICAgIH0gZWxzZSBpZiAoZGVwQ291bnQgPiAyNSkge1xuICAgICAgZGVwZW5kZW5jeUFuYWx5c2lzLnNlY3VyaXR5X2Fzc2Vzc21lbnQubnBtX3NlY3VyaXR5ID0gJ21vZGVyYXRlX2RlcGVuZGVuY3lfY291bnQnO1xuICAgICAgZGVwZW5kZW5jeUFuYWx5c2lzLnNlY3VyaXR5X2Fzc2Vzc21lbnQucmlza19hc3Nlc3NtZW50ID0gJ2xvdyc7XG4gICAgfSBlbHNlIGlmIChkZXBDb3VudCA+IDApIHtcbiAgICAgIGRlcGVuZGVuY3lBbmFseXNpcy5zZWN1cml0eV9hc3Nlc3NtZW50Lm5wbV9zZWN1cml0eSA9ICdsb3dfZGVwZW5kZW5jeV9jb3VudCc7XG4gICAgICBkZXBlbmRlbmN5QW5hbHlzaXMuc2VjdXJpdHlfYXNzZXNzbWVudC5yaXNrX2Fzc2Vzc21lbnQgPSAnbWluaW1hbCc7XG4gICAgfVxuICAgIFxuICB9IGNhdGNoIChlKSB7XG4gICAgZGVwZW5kZW5jeUFuYWx5c2lzLm5wbV9lY29zeXN0ZW0uZXJyb3IgPSAnQ291bGQgbm90IHBhcnNlIHBhY2thZ2UuanNvbic7XG4gIH1cbn1cblxuLy8gR2VuZXJhdGUgZW5oYW5jZWQgYXNzZXNzbWVudCBhbmQgcmVjb21tZW5kYXRpb25zXG5jb25zdCB0b3RhbERlcHMgPSBkZXBlbmRlbmN5QW5hbHlzaXMuc3dpZnRfZWNvc3lzdGVtLmRlcGVuZGVuY2llc19jb3VudCArIFxuICAgICAgICAgICAgICAgICAoZGVwZW5kZW5jeUFuYWx5c2lzLm5wbV9lY29zeXN0ZW0uZGVwZW5kZW5jaWVzX2NvdW50IHx8IDApO1xuXG5jb25zdCBzd2lmdERlcHMgPSBkZXBlbmRlbmN5QW5hbHlzaXMuc3dpZnRfZWNvc3lzdGVtLmRlcGVuZGVuY2llc19jb3VudDtcbmNvbnN0IG5wbURlcHMgPSBkZXBlbmRlbmN5QW5hbHlzaXMubnBtX2Vjb3N5c3RlbS5kZXBlbmRlbmNpZXNfY291bnQgfHwgMDtcblxuLy8gQ3Jvc3MtcGxhdGZvcm0gY29tcGxleGl0eSBhc3Nlc3NtZW50XG5pZiAoc3dpZnREZXBzID4gMCAmJiBucG1EZXBzID4gMCkge1xuICBkZXBlbmRlbmN5QW5hbHlzaXMuY3Jvc3NfcGxhdGZvcm1fY29tcGxleGl0eSA9ICdoaWdoX2NvbXBsZXhpdHknO1xufSBlbHNlIGlmIChzd2lmdERlcHMgPiAwKSB7XG4gIGRlcGVuZGVuY3lBbmFseXNpcy5jcm9zc19wbGF0Zm9ybV9jb21wbGV4aXR5ID0gJ3N3aWZ0X29ubHknO1xufSBlbHNlIGlmIChucG1EZXBzID4gMCkge1xuICBkZXBlbmRlbmN5QW5hbHlzaXMuY3Jvc3NfcGxhdGZvcm1fY29tcGxleGl0eSA9ICd3ZWJfb25seSc7XG59IGVsc2Uge1xuICBkZXBlbmRlbmN5QW5hbHlzaXMuY3Jvc3NfcGxhdGZvcm1fY29tcGxleGl0eSA9ICdtaW5pbWFsX2RlcGVuZGVuY2llcyc7XG59XG5cbi8vIENvcnRlcy1zcGVjaWZpYyBzZWN1cml0eSBjb25zaWRlcmF0aW9uc1xuY29uc3Qgc2VjdXJpdHlDb25zaWRlcmF0aW9ucyA9IFtdO1xuaWYgKGRlcGVuZGVuY3lBbmFseXNpcy5jb3J0ZXNfZGVwZW5kZW5jeV9pbnNpZ2h0cy5tb25ldGl6YXRpb24ubGVuZ3RoID4gMCkge1xuICBzZWN1cml0eUNvbnNpZGVyYXRpb25zLnB1c2goJ1JldmlldyBwYXltZW50L21vbmV0aXphdGlvbiBkZXBlbmRlbmNpZXMgZm9yIHNlY3VyaXR5Jyk7XG59XG5pZiAoZGVwZW5kZW5jeUFuYWx5c2lzLmNvcnRlc19kZXBlbmRlbmN5X2luc2lnaHRzLmRhdGFfcGVyc2lzdGVuY2UubGVuZ3RoID4gMCkge1xuICBzZWN1cml0eUNvbnNpZGVyYXRpb25zLnB1c2goJ0Vuc3VyZSBkYXRhIHBlcnNpc3RlbmNlIGxpYnJhcmllcyBhcmUgc2VjdXJlIGFuZCB1cGRhdGVkJyk7XG59XG5pZiAoZGVwZW5kZW5jeUFuYWx5c2lzLmNvcnRlc19kZXBlbmRlbmN5X2luc2lnaHRzLm5ldHdvcmtpbmcubGVuZ3RoID4gMCkge1xuICBzZWN1cml0eUNvbnNpZGVyYXRpb25zLnB1c2goJ1ZlcmlmeSBuZXR3b3JraW5nIGRlcGVuZGVuY2llcyB1c2Ugc2VjdXJlIHByb3RvY29scycpO1xufVxuaWYgKHRvdGFsRGVwcyA+IDIwKSB7XG4gIHNlY3VyaXR5Q29uc2lkZXJhdGlvbnMucHVzaCgnSGlnaCBkZXBlbmRlbmN5IGNvdW50IC0gaW1wbGVtZW50IHJlZ3VsYXIgc2VjdXJpdHkgYXVkaXRzJyk7XG59XG5cbmRlcGVuZGVuY3lBbmFseXNpcy5zZWN1cml0eV9hc3Nlc3NtZW50LmNvcnRlc19zZWN1cml0eV9jb25zaWRlcmF0aW9ucyA9IHNlY3VyaXR5Q29uc2lkZXJhdGlvbnM7XG5cbi8vIEdlbmVyYXRlIENvcnRlcy1zcGVjaWZpYyByZWNvbW1lbmRhdGlvbnNcbmNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IFtdO1xuXG5pZiAodG90YWxEZXBzID09PSAwKSB7XG4gIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdDb25zaWRlciBhZGRpbmcgY29yZSBkZXBlbmRlbmNpZXM6IFN3aWZ0VUkgQ2hhcnRzLCBDbG91ZEtpdCwgU3RvcmVLaXQgMicpO1xuICByZWNvbW1lbmRhdGlvbnMucHVzaCgnSW1wbGVtZW50IHByb3BlciBkZXBlbmRlbmN5IG1hbmFnZW1lbnQgZnJvbSB0aGUgc3RhcnQnKTtcbn0gZWxzZSBpZiAodG90YWxEZXBzIDwgMTUpIHtcbiAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0dvb2QgZGVwZW5kZW5jeSBtYW5hZ2VtZW50IC0gbWFpbnRhaW4gY3VycmVudCBsZWFuIGFwcHJvYWNoJyk7XG4gIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdFdmFsdWF0ZSBpZiBjb3JlIENvcnRlcyBmZWF0dXJlcyBuZWVkIGFkZGl0aW9uYWwgbGlicmFyaWVzJyk7XG59IGVsc2UgaWYgKHRvdGFsRGVwcyA8IDMwKSB7XG4gIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdNb2RlcmF0ZSBkZXBlbmRlbmN5IGNvdW50IC0gbW9uaXRvciBmb3Igb3B0aW1pemF0aW9uIG9wcG9ydHVuaXRpZXMnKTtcbiAgcmVjb21tZW5kYXRpb25zLnB1c2goJ1JlZ3VsYXIgZGVwZW5kZW5jeSBhdWRpdHMgcmVjb21tZW5kZWQnKTtcbn0gZWxzZSB7XG4gIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdISUdIIFBSSU9SSVRZOiBEZXBlbmRlbmN5IGF1ZGl0IGFuZCBjbGVhbnVwIG5lZWRlZCcpO1xuICByZWNvbW1lbmRhdGlvbnMucHVzaCgnQ29uc2lkZXIgZGVwZW5kZW5jeSBjb25zb2xpZGF0aW9uIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UnKTtcbn1cblxuLy8gQ29ydGVzIGZlYXR1cmUtc3BlY2lmaWMgcmVjb21tZW5kYXRpb25zXG5pZiAoZGVwZW5kZW5jeUFuYWx5c2lzLmNvcnRlc19kZXBlbmRlbmN5X2luc2lnaHRzLmFuYWx5dGljcy5sZW5ndGggPT09IDApIHtcbiAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0NvbnNpZGVyIGFkZGluZyBhbmFseXRpY3MgZnJhbWV3b3JrIGZvciBidXNpbmVzcyBpbnRlbGxpZ2VuY2UnKTtcbn1cbmlmIChkZXBlbmRlbmN5QW5hbHlzaXMuY29ydGVzX2RlcGVuZGVuY3lfaW5zaWdodHMubW9uZXRpemF0aW9uLmxlbmd0aCA9PT0gMCkge1xuICByZWNvbW1lbmRhdGlvbnMucHVzaCgnRW5zdXJlIFN0b3JlS2l0IDIgaXMgcHJvcGVybHkgY29uZmlndXJlZCBmb3IgcHJlbWl1bSBmZWF0dXJlcycpO1xufVxuaWYgKGRlcGVuZGVuY3lBbmFseXNpcy5jb3J0ZXNfZGVwZW5kZW5jeV9pbnNpZ2h0cy51aV9mcmFtZXdvcmtzLmxlbmd0aCA9PT0gMCkge1xuICByZWNvbW1lbmRhdGlvbnMucHVzaCgnQ29uc2lkZXIgU3dpZnRVSSBDaGFydHMgZm9yIGFuYWx5dGljcyB2aXN1YWxpemF0aW9uJyk7XG59XG5cbmRlcGVuZGVuY3lBbmFseXNpcy5jb3J0ZXNfcmVjb21tZW5kYXRpb25zID0gcmVjb21tZW5kYXRpb25zO1xuXG5jb25zb2xlLmxvZygn4pyFIENvcnRlcyBkZXBlbmRlbmN5IGFuYWx5c2lzIGNvbXBsZXRlZDonLCB7XG4gIHN3aWZ0X2RlcHM6IHN3aWZ0RGVwcyxcbiAgbnBtX2RlcHM6IG5wbURlcHMsXG4gIHRvdGFsX2RlcHM6IHRvdGFsRGVwcyxcbiAgY3Jvc3NfcGxhdGZvcm06IGRlcGVuZGVuY3lBbmFseXNpcy5jcm9zc19wbGF0Zm9ybV9jb21wbGV4aXR5XG59KTtcblxucmV0dXJuIFt7IGpzb246IGRlcGVuZGVuY3lBbmFseXNpcyB9XTsiCiAgICAgIH0sCiAgICAgICJuYW1lIjogIkFuYWx5emUgQ29ydGVzIERlcGVuZGVuY2llcyIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmZ1bmN0aW9uIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC0xNDIwLAogICAgICAgIC05NDAKICAgICAgXSwKICAgICAgImlkIjogImU1NGEyNmI5LTQyYjEtNGZiZC04OWY0LTFjMWY0ZTBmY2I0NCIKICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJmdW5jdGlvbkNvZGUiOiAiLy8gVUxUSU1BVEUgQ09SVEVTIENPTlRFWFQgTUVSR0VSIC0gUFJPRFVDVElPTiBWRVJTSU9OXG5jb25zdCBwcm9qZWN0U3RydWN0dXJlID0gaXRlbXMuZmluZChpdGVtID0+IGl0ZW0uanNvbi50aW1lc3RhbXAgJiYgaXRlbS5qc29uLnRvdGFsX2ZpbGVzICE9PSB1bmRlZmluZWQpPy5qc29uIHx8IHt9O1xuY29uc3QgZ2l0SW50ZWxsaWdlbmNlID0gaXRlbXMuZmluZChpdGVtID0+IGl0ZW0uanNvbi5kZXZlbG9wbWVudF92ZWxvY2l0eSk/Lmpzb24gfHwge307XG5jb25zdCB0ZXN0aW5nSW50ZWxsaWdlbmNlID0gaXRlbXMuZmluZChpdGVtID0+IGl0ZW0uanNvbi50ZXN0X2NvdmVyYWdlKT8uanNvbiB8fCB7fTtcbmNvbnN0IHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlID0gaXRlbXMuZmluZChpdGVtID0+IGl0ZW0uanNvbi5hc3NldF9hbmFseXNpcyk/Lmpzb24gfHwge307XG5jb25zdCBkZXBlbmRlbmN5QW5hbHlzaXMgPSBpdGVtcy5maW5kKGl0ZW0gPT4gaXRlbS5qc29uLnN3aWZ0X2Vjb3N5c3RlbSk/Lmpzb24gfHwge307XG5cbi8vIEVOSEFOQ0VEIEhFTFBFUiBGVU5DVElPTlMgRk9SIENPUlRFU1xuZnVuY3Rpb24gYXNzZXNzQ29ydGVzUmVhZGluZXNzKHByb2plY3QsIHRlc3RpbmcsIHBlcmZvcm1hbmNlLCBnaXQsIGRlcGVuZGVuY3kpIHtcbiAgY29uc3QgY3JpdGVyaWEgPSB7XG4gICAgcHJvamVjdF9zdHJ1Y3R1cmU6IHByb2plY3Quc2Nhbl9zdWNjZXNzZnVsICYmIHByb2plY3QuZmlsZXNfZm91bmQgJiYgKHByb2plY3QudG90YWxfZmlsZXMgfHwgMCkgPiAxMCxcbiAgICBpb3NfYXJjaGl0ZWN0dXJlOiBwcm9qZWN0LmNvcnRlc19zcGVjaWZpY19pbnNpZ2h0cz8uaW9zX3Byb2plY3QgfHwgZmFsc2UsXG4gICAgc3dpZnR1aV9pbXBsZW1lbnRhdGlvbjogcHJvamVjdC5jb3J0ZXNfc3BlY2lmaWNfaW5zaWdodHM/LnN3aWZ0dWlfZGV0ZWN0ZWQgfHwgZmFsc2UsXG4gICAgdGVzdGluZ19jb3ZlcmFnZTogKHRlc3RpbmcudGVzdF9jb3ZlcmFnZT8udG90YWxfdGVzdF9maWxlcyB8fCAwKSA+IDgsXG4gICAgcGVyZm9ybWFuY2Vfb3B0aW1pemVkOiAocGVyZm9ybWFuY2UuY29ydGVzX3BlcmZvcm1hbmNlX21ldHJpY3M/Lmlvc19vcHRpbWl6YXRpb25fc2NvcmUgfHwgMCkgPiA3NSxcbiAgICB2ZXJzaW9uX2NvbnRyb2w6IGdpdC5naXRfYXZhaWxhYmxlIHx8IGZhbHNlLFxuICAgIGRlcGVuZGVuY3lfbWFuYWdlbWVudDogZGVwZW5kZW5jeS5zd2lmdF9lY29zeXN0ZW0/Lm1hbmlmZXN0X2ZvdW5kIHx8IGZhbHNlLFxuICAgIGFwcF9zdG9yZV9yZWFkeTogKHBlcmZvcm1hbmNlLmNvcnRlc19wZXJmb3JtYW5jZV9tZXRyaWNzPy5hcHBfc3RvcmVfcmVhZGluZXNzID09PSAnZXhjZWxsZW50JyB8fCBcbiAgICAgICAgICAgICAgICAgICAgIHBlcmZvcm1hbmNlLmNvcnRlc19wZXJmb3JtYW5jZV9tZXRyaWNzPy5hcHBfc3RvcmVfcmVhZGluZXNzID09PSAnZ29vZCcpXG4gIH07XG4gIFxuICBjb25zdCBzY29yZSA9IE9iamVjdC52YWx1ZXMoY3JpdGVyaWEpLmZpbHRlcihCb29sZWFuKS5sZW5ndGg7XG4gIGNvbnN0IG1heFNjb3JlID0gT2JqZWN0LmtleXMoY3JpdGVyaWEpLmxlbmd0aDtcbiAgXG4gIGlmIChzY29yZSA+PSBtYXhTY29yZSAtIDEpIHJldHVybiAnbGF1bmNoX3JlYWR5JztcbiAgaWYgKHNjb3JlID49IG1heFNjb3JlIC0gMikgcmV0dXJuICduZWFybHlfcmVhZHknO1xuICBpZiAoc2NvcmUgPj0gbWF4U2NvcmUgLSAzKSByZXR1cm4gJ25lZWRzX3BvbGlzaCc7XG4gIGlmIChzY29yZSA+PSAzKSByZXR1cm4gJ2RldmVsb3BtZW50X3BoYXNlJztcbiAgcmV0dXJuICdlYXJseV9zdGFnZSc7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNvcnRlc01vbmV0aXphdGlvblNjb3JlKHRlc3RpbmcsIHBlcmZvcm1hbmNlLCBnaXQsIHByb2plY3QpIHtcbiAgbGV0IHNjb3JlID0gMDtcbiAgXG4gIC8vIENvcmUgZnVuY3Rpb25hbGl0eSAoMzAgcG9pbnRzKVxuICBpZiAocHJvamVjdC5zY2FuX3N1Y2Nlc3NmdWwgJiYgKHByb2plY3QudG90YWxfZmlsZXMgfHwgMCkgPiAxNSkgc2NvcmUgKz0gMzA7XG4gIGVsc2UgaWYgKHByb2plY3Quc2Nhbl9zdWNjZXNzZnVsICYmIChwcm9qZWN0LnRvdGFsX2ZpbGVzIHx8IDApID4gNSkgc2NvcmUgKz0gMjA7XG4gIFxuICAvLyBUZXN0aW5nIGNvbmZpZGVuY2UgKDI1IHBvaW50cylcbiAgaWYgKCh0ZXN0aW5nLnRlc3RfY292ZXJhZ2U/LnRvdGFsX3Rlc3RfZmlsZXMgfHwgMCkgPiAxNSkgc2NvcmUgKz0gMjU7XG4gIGVsc2UgaWYgKCh0ZXN0aW5nLnRlc3RfY292ZXJhZ2U/LnRvdGFsX3Rlc3RfZmlsZXMgfHwgMCkgPiA4KSBzY29yZSArPSAyMDtcbiAgZWxzZSBpZiAoKHRlc3RpbmcudGVzdF9jb3ZlcmFnZT8udG90YWxfdGVzdF9maWxlcyB8fCAwKSA+IDMpIHNjb3JlICs9IDE1O1xuICBlbHNlIGlmICgodGVzdGluZy50ZXN0X2NvdmVyYWdlPy50b3RhbF90ZXN0X2ZpbGVzIHx8IDApID4gMCkgc2NvcmUgKz0gMTA7XG4gIFxuICAvLyBQZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gKDI1IHBvaW50cylcbiAgY29uc3QgcGVyZlNjb3JlID0gcGVyZm9ybWFuY2UuY29ydGVzX3BlcmZvcm1hbmNlX21ldHJpY3M/Lmlvc19vcHRpbWl6YXRpb25fc2NvcmUgfHwgMDtcbiAgaWYgKHBlcmZTY29yZSA+IDkwKSBzY29yZSArPSAyNTtcbiAgZWxzZSBpZiAocGVyZlNjb3JlID4gODApIHNjb3JlICs9IDIwO1xuICBlbHNlIGlmIChwZXJmU2NvcmUgPiA3MCkgc2NvcmUgKz0gMTU7XG4gIGVsc2UgaWYgKHBlcmZTY29yZSA+IDYwKSBzY29yZSArPSAxMDtcbiAgXG4gIC8vIERldmVsb3BtZW50IG1vbWVudHVtICgyMCBwb2ludHMpXG4gIGlmIChnaXQuZ2l0X2F2YWlsYWJsZSAmJiBnaXQuaW5zaWdodHM/LnByb2plY3RfbW9tZW50dW0gPT09ICdhY3RpdmUnKSBzY29yZSArPSAyMDtcbiAgZWxzZSBpZiAoZ2l0LmdpdF9hdmFpbGFibGUgJiYgKGdpdC5kZXZlbG9wbWVudF92ZWxvY2l0eT8uY29tbWl0c18zMF9kYXlzIHx8IDApID4gMTApIHNjb3JlICs9IDE1O1xuICBlbHNlIGlmIChnaXQuZ2l0X2F2YWlsYWJsZSAmJiAoZ2l0LmRldmVsb3BtZW50X3ZlbG9jaXR5Py5jb21taXRzXzMwX2RheXMgfHwgMCkgPiAwKSBzY29yZSArPSAxMDtcbiAgZWxzZSBpZiAoZ2l0LmdpdF9hdmFpbGFibGUpIHNjb3JlICs9IDU7XG4gIFxuICByZXR1cm4gTWF0aC5taW4oc2NvcmUsIDEwMCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29ydGVzQWN0aW9uUGxhbihwcm9qZWN0LCBnaXQsIHRlc3RpbmcsIHBlcmZvcm1hbmNlLCBkZXBlbmRlbmN5KSB7XG4gIGNvbnN0IGFjdGlvbnMgPSBbXTtcbiAgXG4gIC8vIENyaXRpY2FsIHBhdGggaXRlbXNcbiAgaWYgKCFwcm9qZWN0LnNjYW5fc3VjY2Vzc2Z1bCB8fCAhcHJvamVjdC5maWxlc19mb3VuZCkge1xuICAgIGFjdGlvbnMucHVzaCh7XG4gICAgICBwcmlvcml0eTogJ2NyaXRpY2FsJyxcbiAgICAgIGNhdGVnb3J5OiAnaW5mcmFzdHJ1Y3R1cmUnLFxuICAgICAgYWN0aW9uOiAnRml4IERvY2tlciB2b2x1bWUgbWFwcGluZyBhbmQgcHJvamVjdCBhY2Nlc3MnLFxuICAgICAgdGltZWZyYW1lOiAnMzAgbWludXRlcycsXG4gICAgICBpbXBhY3Q6ICdCbG9ja3MgYWxsIGRldmVsb3BtZW50IHdvcmsnLFxuICAgICAgY29ydGVzX2JlbmVmaXQ6ICdFbmFibGVzIGRldmVsb3BtZW50IHdvcmtmbG93J1xuICAgIH0pO1xuICAgIHJldHVybiBhY3Rpb25zOyAvLyBCbG9jayBldmVyeXRoaW5nIGVsc2UgdW50aWwgdGhpcyBpcyBmaXhlZFxuICB9XG4gIFxuICAvLyBIaWdoIHByaW9yaXR5IGl0ZW1zXG4gIGlmICghdGVzdGluZy50ZXN0c19mb3VuZCB8fCAodGVzdGluZy50ZXN0X2NvdmVyYWdlPy50b3RhbF90ZXN0X2ZpbGVzIHx8IDApIDwgMTApIHtcbiAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgIGNhdGVnb3J5OiAncXVhbGl0eV9hc3N1cmFuY2UnLFxuICAgICAgYWN0aW9uOiAnQnVpbGQgY29tcHJlaGVuc2l2ZSB0ZXN0IHN1aXRlIGZvciBDb3J0ZXMgY29yZSBmZWF0dXJlcycsXG4gICAgICB0aW1lZnJhbWU6ICczLTUgZGF5cycsXG4gICAgICBpbXBhY3Q6ICdQcm9kdWN0aW9uIGNvbmZpZGVuY2UgYW5kIEFwcCBTdG9yZSBhcHByb3ZhbCcsXG4gICAgICBjb3J0ZXNfYmVuZWZpdDogJ1JlZHVjZXMgYnVncywgaW1wcm92ZXMgdXNlciB0cnVzdCwgZW5hYmxlcyBDSS9DRCdcbiAgICB9KTtcbiAgfVxuICBcbiAgaWYgKHBlcmZvcm1hbmNlLmNvcnRlc19wZXJmb3JtYW5jZV9tZXRyaWNzPy5pb3Nfb3B0aW1pemF0aW9uX3Njb3JlIDwgODApIHtcbiAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgIGNhdGVnb3J5OiAncGVyZm9ybWFuY2UnLFxuICAgICAgYWN0aW9uOiAnT3B0aW1pemUgYXNzZXRzIGFuZCBwZXJmb3JtYW5jZSBmb3IgaU9TJyxcbiAgICAgIHRpbWVmcmFtZTogJzItMyBkYXlzJyxcbiAgICAgIGltcGFjdDogJ1VzZXIgZXhwZXJpZW5jZSBhbmQgQXBwIFN0b3JlIG1ldHJpY3MnLFxuICAgICAgY29ydGVzX2JlbmVmaXQ6ICdCZXR0ZXIgcmF0aW5ncywgZmFzdGVyIGRvd25sb2FkcywgaGlnaGVyIHJldGVudGlvbidcbiAgICB9KTtcbiAgfVxuICBcbiAgLy8gTWVkaXVtIHByaW9yaXR5IGl0ZW1zXG4gIGlmICghZ2l0LmdpdF9hdmFpbGFibGUpIHtcbiAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgY2F0ZWdvcnk6ICdkZXZlbG9wbWVudF93b3JrZmxvdycsXG4gICAgICBhY3Rpb246ICdJbml0aWFsaXplIEdpdCByZXBvc2l0b3J5IHdpdGggcHJvcGVyIGJyYW5jaGluZyBzdHJhdGVneScsXG4gICAgICB0aW1lZnJhbWU6ICcyIGhvdXJzJyxcbiAgICAgIGltcGFjdDogJ1RlYW0gY29sbGFib3JhdGlvbiBhbmQgZGVwbG95bWVudCBhdXRvbWF0aW9uJyxcbiAgICAgIGNvcnRlc19iZW5lZml0OiAnRW5hYmxlcyB2ZXJzaW9uIGNvbnRyb2wgYW5kIENJL0NEIHBpcGVsaW5lJ1xuICAgIH0pO1xuICB9XG4gIFxuICBpZiAoIWRlcGVuZGVuY3kuc3dpZnRfZWNvc3lzdGVtPy5tYW5pZmVzdF9mb3VuZCkge1xuICAgIGFjdGlvbnMucHVzaCh7XG4gICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICBjYXRlZ29yeTogJ2RlcGVuZGVuY3lfbWFuYWdlbWVudCcsXG4gICAgICBhY3Rpb246ICdTZXQgdXAgUGFja2FnZS5zd2lmdCB3aXRoIGNvcmUgQ29ydGVzIGRlcGVuZGVuY2llcycsXG4gICAgICB0aW1lZnJhbWU6ICcxIGRheScsXG4gICAgICBpbXBhY3Q6ICdQcm9wZXIgZGVwZW5kZW5jeSBtYW5hZ2VtZW50IGFuZCBidWlsZCByZWxpYWJpbGl0eScsXG4gICAgICBjb3J0ZXNfYmVuZWZpdDogJ0NoYXJ0cywgQ2xvdWRLaXQsIFN0b3JlS2l0IDIgaW50ZWdyYXRpb24nXG4gICAgfSk7XG4gIH1cbiAgXG4gIC8vIFBvbGlzaCBpdGVtc1xuICBpZiAocHJvamVjdC5jb3J0ZXNfc3BlY2lmaWNfaW5zaWdodHM/LmRvY3VtZW50YXRpb25fcXVhbGl0eSA9PT0gJ21pbmltYWwnKSB7XG4gICAgYWN0aW9ucy5wdXNoKHtcbiAgICAgIHByaW9yaXR5OiAnbG93JyxcbiAgICAgIGNhdGVnb3J5OiAnZG9jdW1lbnRhdGlvbicsXG4gICAgICBhY3Rpb246ICdDcmVhdGUgY29tcHJlaGVuc2l2ZSBDb3J0ZXMgZG9jdW1lbnRhdGlvbicsXG4gICAgICB0aW1lZnJhbWU6ICcyLTMgZGF5cycsXG4gICAgICBpbXBhY3Q6ICdUZWFtIG9uYm9hcmRpbmcgYW5kIG1haW50ZW5hbmNlJyxcbiAgICAgIGNvcnRlc19iZW5lZml0OiAnRWFzaWVyIGZlYXR1cmUgZGV2ZWxvcG1lbnQgYW5kIHRlYW0gc2NhbGluZydcbiAgICB9KTtcbiAgfVxuICBcbiAgcmV0dXJuIGFjdGlvbnMuc2xpY2UoMCwgOCk7IC8vIFRvcCA4IHByaW9yaXRpZXNcbn1cblxuLy8gQ1JFQVRFIFVMVElNQVRFIENPUlRFUyBDT05URVhUXG5jb25zdCB1bHRpbWF0ZUNvcnRlc0NvbnRleHQgPSB7XG4gIG1ldGFkYXRhOiB7XG4gICAgcHJvamVjdE5hbWU6ICdDb3J0ZXMnLFxuICAgIGdlbmVyYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIHZlcnNpb246ICc5LjAuMC1jb3J0ZXMtcHJvZHVjdGlvbicsXG4gICAgY29udGV4dFR5cGU6ICdjb3J0ZXMtdWx0aW1hdGUtaW50ZWxsaWdlbmNlJyxcbiAgICBwcm9qZWN0X3BhdGg6IHByb2plY3RTdHJ1Y3R1cmUucHJvamVjdF9wYXRoIHx8ICcvZGF0YS9jb3J0ZXMnLFxuICAgIGNvcnRlc19hcHBfcGF0aDogcHJvamVjdFN0cnVjdHVyZS5jb3J0ZXNfYXBwX3BhdGggfHwgJy9kYXRhL2NvcnRlcy9Db3J0ZXMnLFxuICAgIGNvbnRleHRfcGF0aDogJy9kYXRhL2NvcnRlcy9jb3J0ZXMtY29udGV4dCcsXG4gICAgbWFjX2Rlc3RpbmF0aW9uOiAnL1VzZXJzL21vbGluZXNtYWMvRG9jdW1lbnRzL0NvcnRlcy9jb3J0ZXMtY29udGV4dCcsXG4gICAgcHJvamVjdF9zY2FuX3N1Y2Nlc3NmdWw6IHByb2plY3RTdHJ1Y3R1cmUuc2Nhbl9zdWNjZXNzZnVsIHx8IGZhbHNlLFxuICAgIGNvbnRhaW5lcl9pZDogcHJvY2Vzcy5lbnYuSE9TVE5BTUUgfHwgJ244bi1jb250YWluZXInLFxuICAgIHdvcmtmbG93X3ZlcnNpb246ICc5LjAuMC1wcm9kdWN0aW9uLXJlYWR5JyxcbiAgICBjYXBhYmlsaXRpZXM6IFtcbiAgICAgICdjb3J0ZXMtc3BlY2lmaWMtYW5hbHlzaXMnLFxuICAgICAgJ2lvcy1hcHAtb3B0aW1pemF0aW9uJyxcbiAgICAgICdtb25ldGl6YXRpb24tcmVhZGluZXNzJyxcbiAgICAgICdhcHAtc3RvcmUtcHJlcGFyYXRpb24nLFxuICAgICAgJ3BlcmZvcm1hbmNlLW9wdGltaXphdGlvbicsXG4gICAgICAndGVzdGluZy1zdHJhdGVneScsXG4gICAgICAnZGVwZW5kZW5jeS1tYW5hZ2VtZW50JyxcbiAgICAgICdidXNpbmVzcy1pbnRlbGxpZ2VuY2UnXG4gICAgXVxuICB9LFxuICBcbiAgY29ydGVzX3Byb2plY3RfaW50ZWxsaWdlbmNlOiB7XG4gICAgc2Nhbl9zdGF0dXM6IHByb2plY3RTdHJ1Y3R1cmUuc2Nhbl9zdWNjZXNzZnVsID8gJ3N1Y2Nlc3NmdWwnIDogJ2ZhaWxlZCcsXG4gICAgcHJvamVjdF9mb3VuZDogcHJvamVjdFN0cnVjdHVyZS5maWxlc19mb3VuZCB8fCBmYWxzZSxcbiAgICBhcmNoaXRlY3R1cmVfdHlwZTogcHJvamVjdFN0cnVjdHVyZS5wcm9qZWN0X3R5cGVfZGV0ZWN0ZWQgfHwgJ3Vua25vd24nLFxuICAgIGlvc19wcm9qZWN0X2RldGVjdGVkOiBwcm9qZWN0U3RydWN0dXJlLmNvcnRlc19zcGVjaWZpY19pbnNpZ2h0cz8uaW9zX3Byb2plY3QgfHwgZmFsc2UsXG4gICAgc3dpZnR1aV9pbXBsZW1lbnRhdGlvbjogcHJvamVjdFN0cnVjdHVyZS5jb3J0ZXNfc3BlY2lmaWNfaW5zaWdodHM/LnN3aWZ0dWlfZGV0ZWN0ZWQgfHwgZmFsc2UsXG4gICAgZmlsZV9tZXRyaWNzOiB7XG4gICAgICB0b3RhbF9maWxlczogcHJvamVjdFN0cnVjdHVyZS50b3RhbF9maWxlcyB8fCAwLFxuICAgICAgc3dpZnRfZmlsZXM6IHByb2plY3RTdHJ1Y3R1cmUuY2F0ZWdvcmllcz8uc3dpZnRfZmlsZXMgfHwgMCxcbiAgICAgIHhjb2RlX3Byb2plY3RzOiBwcm9qZWN0U3RydWN0dXJlLmNhdGVnb3JpZXM/Lnhjb2RlX3Byb2plY3RzIHx8IDAsXG4gICAgICBjb25maWdfZmlsZXM6IHByb2plY3RTdHJ1Y3R1cmUuY2F0ZWdvcmllcz8uY29uZmlnX2ZpbGVzIHx8IDAsXG4gICAgICBkb2N1bWVudGF0aW9uX2ZpbGVzOiBwcm9qZWN0U3RydWN0dXJlLmNhdGVnb3JpZXM/LmRvY3VtZW50YXRpb24gfHwgMFxuICAgIH0sXG4gICAgY29ydGVzX3N0cnVjdHVyZTogcHJvamVjdFN0cnVjdHVyZS5jb3J0ZXNfc3RydWN0dXJlIHx8IHt9LFxuICAgIGRvY3VtZW50YXRpb25fcXVhbGl0eTogcHJvamVjdFN0cnVjdHVyZS5jb3J0ZXNfc3BlY2lmaWNfaW5zaWdodHM/LmRvY3VtZW50YXRpb25fcXVhbGl0eSB8fCAndW5rbm93bidcbiAgfSxcbiAgXG4gIGNvcnRlc19kZXZlbG9wbWVudF9pbnRlbGxpZ2VuY2U6IHtcbiAgICBnaXRfcmVwb3NpdG9yeV9mb3VuZDogZ2l0SW50ZWxsaWdlbmNlLmdpdF9hdmFpbGFibGUgfHwgZmFsc2UsXG4gICAgZGV2ZWxvcG1lbnRfaGVhbHRoOiBnaXRJbnRlbGxpZ2VuY2UuaW5zaWdodHM/LmRldmVsb3BtZW50X2hlYWx0aCB8fCAndW5rbm93bicsXG4gICAgcHJvamVjdF9tb21lbnR1bTogZ2l0SW50ZWxsaWdlbmNlLmluc2lnaHRzPy5wcm9qZWN0X21vbWVudHVtIHx8ICd1bmtub3duJyxcbiAgICB0ZWFtX2NvbGxhYm9yYXRpb246IGdpdEludGVsbGlnZW5jZS5pbnNpZ2h0cz8udGVhbV9jb2xsYWJvcmF0aW9uIHx8ICd1bmtub3duJyxcbiAgICB2ZWxvY2l0eV9tZXRyaWNzOiB7XG4gICAgICBjb21taXRzX2xhc3RfMzBfZGF5czogZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5Py5jb21taXRzXzMwX2RheXMgfHwgMCxcbiAgICAgIGNvbW1pdHNfbGFzdF8xNF9kYXlzOiBnaXRJbnRlbGxpZ2VuY2UuZGV2ZWxvcG1lbnRfdmVsb2NpdHk/LmNvbW1pdHNfMTRfZGF5cyB8fCAwLFxuICAgICAgYWN0aXZlX2RldmVsb3BlcnM6IGdpdEludGVsbGlnZW5jZS5kZXZlbG9wbWVudF92ZWxvY2l0eT8uYWN0aXZlX2RldmVsb3BlcnM/Lmxlbmd0aCB8fCAwLFxuICAgICAgZGV2ZWxvcG1lbnRfcGFjZTogZ2l0SW50ZWxsaWdlbmNlLmRldmVsb3BtZW50X3ZlbG9jaXR5Py5kZXZlbG9wbWVudF9wYWNlIHx8ICd1bmtub3duJ1xuICAgIH0sXG4gICAgY29ydGVzX2RldmVsb3BtZW50X2ZvY3VzOiBnaXRJbnRlbGxpZ2VuY2UuY29ydGVzX2RldmVsb3BtZW50X2luc2lnaHRzIHx8IHt9LFxuICAgIHJlZmFjdG9yX3ByaW9yaXRpZXM6IChnaXRJbnRlbGxpZ2VuY2UuaG90X3Nwb3RzPy5yZWZhY3Rvcl9jYW5kaWRhdGVzIHx8IFtdKS5zbGljZSgwLCA1KSxcbiAgICBjb3J0ZXNfY29tbWl0czogKGdpdEludGVsbGlnZW5jZS5jb21taXRfcGF0dGVybnM/LmNvcnRlc19zcGVjaWZpY19jb21taXRzIHx8IFtdKS5zbGljZSgwLCA4KVxuICB9LFxuICBcbiAgY29ydGVzX3Rlc3RpbmdfaW50ZWxsaWdlbmNlOiB7XG4gICAgc2Nhbl9zdGF0dXM6IHRlc3RpbmdJbnRlbGxpZ2VuY2Uuc2Nhbl9zdWNjZXNzZnVsID8gJ3N1Y2Nlc3NmdWwnIDogJ2ZhaWxlZCcsXG4gICAgdGVzdHNfZm91bmQ6IHRlc3RpbmdJbnRlbGxpZ2VuY2UudGVzdHNfZm91bmQgfHwgZmFsc2UsXG4gICAgdGVzdGluZ19tYXR1cml0eTogdGVzdGluZ0ludGVsbGlnZW5jZS5pbnNpZ2h0cz8udGVzdGluZ19tYXR1cml0eSB8fCAnbm9uZScsXG4gICAgZGVwbG95bWVudF9jb25maWRlbmNlOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLmluc2lnaHRzPy5kZXBsb3ltZW50X2NvbmZpZGVuY2UgfHwgJ2xvdycsXG4gICAgdGVzdF9tZXRyaWNzOiB7XG4gICAgICB0b3RhbF90ZXN0X2ZpbGVzOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLnRlc3RfY292ZXJhZ2U/LnRvdGFsX3Rlc3RfZmlsZXMgfHwgMCxcbiAgICAgIHN3aWZ0X3Rlc3RfZmlsZXM6IHRlc3RpbmdJbnRlbGxpZ2VuY2UudGVzdF9jb3ZlcmFnZT8uc3dpZnRfdGVzdF9maWxlcyB8fCAwLFxuICAgICAgdWlfdGVzdF9maWxlczogdGVzdGluZ0ludGVsbGlnZW5jZS50ZXN0X2NvdmVyYWdlPy51aV90ZXN0X2ZpbGVzIHx8IDAsXG4gICAgICB1bml0X3Rlc3RfZmlsZXM6IHRlc3RpbmdJbnRlbGxpZ2VuY2UudGVzdF9jb3ZlcmFnZT8udW5pdF90ZXN0X2ZpbGVzIHx8IDBcbiAgICB9LFxuICAgIGNvcnRlc190ZXN0X2NvdmVyYWdlOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLmNvcnRlc190ZXN0X2luc2lnaHRzIHx8IHt9LFxuICAgIGNvcnRlc190ZXN0X3BhdHRlcm5zOiB0ZXN0aW5nSW50ZWxsaWdlbmNlLmNvcnRlc190ZXN0aW5nX3BhdHRlcm5zIHx8IHt9LFxuICAgIHRlc3RpbmdfZnJhbWV3b3JrczogdGVzdGluZ0ludGVsbGlnZW5jZS50ZXN0aW5nX2ZyYW1ld29ya3MgfHwge31cbiAgfSxcbiAgXG4gIGNvcnRlc19wZXJmb3JtYW5jZV9pbnRlbGxpZ2VuY2U6IHtcbiAgICBzY2FuX3N0YXR1czogcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2Uuc2Nhbl9zdWNjZXNzZnVsID8gJ3N1Y2Nlc3NmdWwnIDogJ2ZhaWxlZCcsXG4gICAgYXNzZXRzX2ZvdW5kOiBwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5hc3NldHNfZm91bmQgfHwgZmFsc2UsXG4gICAgYXBwX3N0b3JlX3JlYWRpbmVzczogcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuY29ydGVzX3BlcmZvcm1hbmNlX21ldHJpY3M/LmFwcF9zdG9yZV9yZWFkaW5lc3MgfHwgJ3Vua25vd24nLFxuICAgIGlvc19vcHRpbWl6YXRpb25fc2NvcmU6IHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLmNvcnRlc19wZXJmb3JtYW5jZV9tZXRyaWNzPy5pb3Nfb3B0aW1pemF0aW9uX3Njb3JlIHx8IDAsXG4gICAgdXNlcl9leHBlcmllbmNlX3Njb3JlOiBwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5jb3J0ZXNfcGVyZm9ybWFuY2VfbWV0cmljcz8udXNlcl9leHBlcmllbmNlX3Njb3JlIHx8IDAsXG4gICAgYXNzZXRfbWV0cmljczoge1xuICAgICAgdG90YWxfYXNzZXRzOiBwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5hc3NldF9hbmFseXNpcz8udG90YWxfYXNzZXRzIHx8IDAsXG4gICAgICB0b3RhbF9zaXplX21iOiBNYXRoLnJvdW5kKChwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5hc3NldF9hbmFseXNpcz8udG90YWxfYXNzZXRfc2l6ZV9rYiB8fCAwKSAvIDEwMjQgKiAxMDApIC8gMTAwLFxuICAgICAgbGFyZ2VfYXNzZXRzX2NvdW50OiAocGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuYXNzZXRfYW5hbHlzaXM/LmxhcmdlX2Fzc2V0cyB8fCBbXSkubGVuZ3RoLFxuICAgICAgb3B0aW1pemF0aW9uX29wcG9ydHVuaXRpZXM6IChwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5hc3NldF9hbmFseXNpcz8ub3B0aW1pemF0aW9uX29wcG9ydHVuaXRpZXMgfHwgW10pLmxlbmd0aFxuICAgIH0sXG4gICAgY29ydGVzX2Fzc2V0czogcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UuYXNzZXRfYW5hbHlzaXM/LmNvcnRlc19zcGVjaWZpY19hc3NldHMgfHwge30sXG4gICAgb3B0aW1pemF0aW9uX3JlY29tbWVuZGF0aW9uczogcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2Uub3B0aW1pemF0aW9uX3JlY29tbWVuZGF0aW9ucyB8fCB7fSxcbiAgICBlc3RpbWF0ZWRfc2F2aW5nczogcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2Uub3B0aW1pemF0aW9uX3JlY29tbWVuZGF0aW9ucz8uZXN0aW1hdGVkX3NhdmluZ3MgfHwgJzBNQidcbiAgfSxcbiAgXG4gIGNvcnRlc19kZXBlbmRlbmN5X2ludGVsbGlnZW5jZToge1xuICAgIGRlcGVuZGVuY2llc19mb3VuZDogZGVwZW5kZW5jeUFuYWx5c2lzLnN3aWZ0X2Vjb3N5c3RlbT8ubWFuaWZlc3RfZm91bmQgfHwgZGVwZW5kZW5jeUFuYWx5c2lzLm5wbV9lY29zeXN0ZW0/Lm1hbmlmZXN0X2ZvdW5kIHx8IGZhbHNlLFxuICAgIGNyb3NzX3BsYXRmb3JtX2NvbXBsZXhpdHk6IGRlcGVuZGVuY3lBbmFseXNpcy5jcm9zc19wbGF0Zm9ybV9jb21wbGV4aXR5IHx8ICdtaW5pbWFsX2RlcGVuZGVuY2llcycsXG4gICAgZGVwZW5kZW5jeV9tZXRyaWNzOiB7XG4gICAgICBzd2lmdF9kZXBlbmRlbmNpZXM6IGRlcGVuZGVuY3lBbmFseXNpcy5zd2lmdF9lY29zeXN0ZW0/LmRlcGVuZGVuY2llc19jb3VudCB8fCAwLFxuICAgICAgbnBtX2RlcGVuZGVuY2llczogZGVwZW5kZW5jeUFuYWx5c2lzLm5wbV9lY29zeXN0ZW0/LmRlcGVuZGVuY2llc19jb3VudCB8fCAwLFxuICAgICAgdG90YWxfZGVwZW5kZW5jaWVzOiAoZGVwZW5kZW5jeUFuYWx5c2lzLnN3aWZ0X2Vjb3N5c3RlbT8uZGVwZW5kZW5jaWVzX2NvdW50IHx8IDApICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGVuZGVuY3lBbmFseXNpcy5ucG1fZWNvc3lzdGVtPy5kZXBlbmRlbmNpZXNfY291bnQgfHwgMClcbiAgICB9LFxuICAgIGNvcnRlc19pbnNpZ2h0czogZGVwZW5kZW5jeUFuYWx5c2lzLmNvcnRlc19kZXBlbmRlbmN5X2luc2lnaHRzIHx8IHt9LFxuICAgIHNlY3VyaXR5X2Fzc2Vzc21lbnQ6IGRlcGVuZGVuY3lBbmFseXNpcy5zZWN1cml0eV9hc3Nlc3NtZW50IHx8IHt9LFxuICAgIGNvcnRlc19yZWNvbW1lbmRhdGlvbnM6IGRlcGVuZGVuY3lBbmFseXNpcy5jb3J0ZXNfcmVjb21tZW5kYXRpb25zIHx8IFtdXG4gIH0sXG4gIFxuICBjb3J0ZXNfYnVzaW5lc3NfaW50ZWxsaWdlbmNlOiB7XG4gICAgbW9uZXRpemF0aW9uX3JlYWRpbmVzczogYXNzZXNzQ29ydGVzUmVhZGluZXNzKFxuICAgICAgcHJvamVjdFN0cnVjdHVyZSwgdGVzdGluZ0ludGVsbGlnZW5jZSwgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UsIGdpdEludGVsbGlnZW5jZSwgZGVwZW5kZW5jeUFuYWx5c2lzXG4gICAgKSxcbiAgICBtb25ldGl6YXRpb25fc2NvcmU6IGNhbGN1bGF0ZUNvcnRlc01vbmV0aXphdGlvblNjb3JlKFxuICAgICAgdGVzdGluZ0ludGVsbGlnZW5jZSwgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UsIGdpdEludGVsbGlnZW5jZSwgcHJvamVjdFN0cnVjdHVyZVxuICAgICksXG4gICAgbGF1bmNoX3JlYWRpbmVzc19jcml0ZXJpYToge1xuICAgICAgcHJvamVjdF9zdHJ1Y3R1cmU6IHByb2plY3RTdHJ1Y3R1cmUuc2Nhbl9zdWNjZXNzZnVsICYmIHByb2plY3RTdHJ1Y3R1cmUuZmlsZXNfZm91bmQsXG4gICAgICBpb3NfYXJjaGl0ZWN0dXJlOiBwcm9qZWN0U3RydWN0dXJlLmNvcnRlc19zcGVjaWZpY19pbnNpZ2h0cz8uaW9zX3Byb2plY3QgfHwgZmFsc2UsXG4gICAgICB0ZXN0aW5nX2NvdmVyYWdlOiAodGVzdGluZ0ludGVsbGlnZW5jZS50ZXN0X2NvdmVyYWdlPy50b3RhbF90ZXN0X2ZpbGVzIHx8IDApID4gOCxcbiAgICAgIHBlcmZvcm1hbmNlX29wdGltaXplZDogKHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLmNvcnRlc19wZXJmb3JtYW5jZV9tZXRyaWNzPy5pb3Nfb3B0aW1pemF0aW9uX3Njb3JlIHx8IDApID4gNzUsXG4gICAgICBhcHBfc3RvcmVfcmVhZHk6IHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLmNvcnRlc19wZXJmb3JtYW5jZV9tZXRyaWNzPy5hcHBfc3RvcmVfcmVhZGluZXNzID09PSAnZXhjZWxsZW50JyB8fCBcbiAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5jb3J0ZXNfcGVyZm9ybWFuY2VfbWV0cmljcz8uYXBwX3N0b3JlX3JlYWRpbmVzcyA9PT0gJ2dvb2QnXG4gICAgfSxcbiAgICByZXZlbnVlX3BvdGVudGlhbDoge1xuICAgICAgdGVjaG5pY2FsX2ZvdW5kYXRpb246IHByb2plY3RTdHJ1Y3R1cmUuc2Nhbl9zdWNjZXNzZnVsICYmIHByb2plY3RTdHJ1Y3R1cmUuZmlsZXNfZm91bmQgPyAnc29saWQnIDogJ25lZWRzX3dvcmsnLFxuICAgICAgdXNlcl9leHBlcmllbmNlX3F1YWxpdHk6IHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLmNvcnRlc19wZXJmb3JtYW5jZV9tZXRyaWNzPy51c2VyX2V4cGVyaWVuY2Vfc2NvcmUgPiA4MCA/ICdleGNlbGxlbnQnIDogJ25lZWRzX2ltcHJvdmVtZW50JyxcbiAgICAgIG1hcmtldF9yZWFkaW5lc3M6IHRlc3RpbmdJbnRlbGxpZ2VuY2UuaW5zaWdodHM/LmRlcGxveW1lbnRfY29uZmlkZW5jZSB8fCAnbG93J1xuICAgIH0sXG4gICAgY29tcGV0aXRpdmVfYWR2YW50YWdlczogW1xuICAgICAgcHJvamVjdFN0cnVjdHVyZS5jb3J0ZXNfc3BlY2lmaWNfaW5zaWdodHM/LnN3aWZ0dWlfZGV0ZWN0ZWQgPyAnTW9kZXJuIFN3aWZ0VUkgaW1wbGVtZW50YXRpb24nIDogbnVsbCxcbiAgICAgIHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLmNvcnRlc19wZXJmb3JtYW5jZV9tZXRyaWNzPy5pb3Nfb3B0aW1pemF0aW9uX3Njb3JlID4gODUgPyAnT3B0aW1pemVkIHBlcmZvcm1hbmNlJyA6IG51bGwsXG4gICAgICB0ZXN0aW5nSW50ZWxsaWdlbmNlLnRlc3RfY292ZXJhZ2U/LnRvdGFsX3Rlc3RfZmlsZXMgPiAxNSA/ICdDb21wcmVoZW5zaXZlIHRlc3RpbmcnIDogbnVsbCxcbiAgICAgIGdpdEludGVsbGlnZW5jZS5pbnNpZ2h0cz8ucHJvamVjdF9tb21lbnR1bSA9PT0gJ2FjdGl2ZScgPyAnQWN0aXZlIGRldmVsb3BtZW50JyA6IG51bGxcbiAgICBdLmZpbHRlcihCb29sZWFuKVxuICB9LFxuICBcbiAgY29ydGVzX2FjdGlvbl9wbGFuOiB7XG4gICAgaW1tZWRpYXRlX3ByaW9yaXRpZXM6IGdlbmVyYXRlQ29ydGVzQWN0aW9uUGxhbihcbiAgICAgIHByb2plY3RTdHJ1Y3R1cmUsIGdpdEludGVsbGlnZW5jZSwgdGVzdGluZ0ludGVsbGlnZW5jZSwgcGVyZm9ybWFuY2VJbnRlbGxpZ2VuY2UsIGRlcGVuZGVuY3lBbmFseXNpc1xuICAgICksXG4gICAgZGV2ZWxvcG1lbnRfcm9hZG1hcDoge1xuICAgICAgcGhhc2VfMTogJ0NvcmUgaW5mcmFzdHJ1Y3R1cmUgYW5kIHRlc3Rpbmcgc2V0dXAnLFxuICAgICAgcGhhc2VfMjogJ1BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBhbmQgVUkgcG9saXNoJyxcbiAgICAgIHBoYXNlXzM6ICdBcHAgU3RvcmUgcHJlcGFyYXRpb24gYW5kIGxhdW5jaCcsXG4gICAgICBwaGFzZV80OiAnUG9zdC1sYXVuY2ggb3B0aW1pemF0aW9uIGFuZCBzY2FsaW5nJ1xuICAgIH0sXG4gICAgZXN0aW1hdGVkX3RpbWVsaW5lOiB7XG4gICAgICB0b19tdnA6ICcyLTMgd2Vla3MnLFxuICAgICAgdG9fYXBwX3N0b3JlOiAnNC02IHdlZWtzJyxcbiAgICAgIHRvX21vbmV0aXphdGlvbjogJzYtOCB3ZWVrcydcbiAgICB9LFxuICAgIHN1Y2Nlc3NfbWV0cmljczoge1xuICAgICAgdGVjaG5pY2FsX2RlYnRfc2NvcmU6IGdpdEludGVsbGlnZW5jZS5ob3Rfc3BvdHM/LnJlZmFjdG9yX2NhbmRpZGF0ZXM/Lmxlbmd0aCA8IDMgPyAnbG93JyA6ICdtb2RlcmF0ZScsXG4gICAgICBkZXBsb3ltZW50X2NvbmZpZGVuY2U6IHRlc3RpbmdJbnRlbGxpZ2VuY2UuaW5zaWdodHM/LmRlcGxveW1lbnRfY29uZmlkZW5jZSB8fCAnbG93JyxcbiAgICAgIHBlcmZvcm1hbmNlX3Njb3JlOiBwZXJmb3JtYW5jZUludGVsbGlnZW5jZS5jb3J0ZXNfcGVyZm9ybWFuY2VfbWV0cmljcz8uaW9zX29wdGltaXphdGlvbl9zY29yZSB8fCAwLFxuICAgICAgYnVzaW5lc3NfcmVhZGluZXNzOiBhc3Nlc3NDb3J0ZXNSZWFkaW5lc3MoXG4gICAgICAgIHByb2plY3RTdHJ1Y3R1cmUsIHRlc3RpbmdJbnRlbGxpZ2VuY2UsIHBlcmZvcm1hbmNlSW50ZWxsaWdlbmNlLCBnaXRJbnRlbGxpZ2VuY2UsIGRlcGVuZGVuY3lBbmFseXNpc1xuICAgICAgKVxuICAgIH1cbiAgfSxcbiAgXG4gIGNsYXVkZV9pbnRlZ3JhdGlvbjoge1xuICAgIGNvbnRleHRfb3B0aW1pemVkX2Zvcl9jbGF1ZGU6IHRydWUsXG4gICAgY2xhdWRlX2Nhbl9oZWxwX3dpdGg6IFtcbiAgICAgICdTd2lmdC9Td2lmdFVJIGRldmVsb3BtZW50IGFuZCBkZWJ1Z2dpbmcnLFxuICAgICAgJ2lPUyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24nLFxuICAgICAgJ1Rlc3QgZGV2ZWxvcG1lbnQgYW5kIGNvdmVyYWdlIGltcHJvdmVtZW50JyxcbiAgICAgICdBcmNoaXRlY3R1cmUgcmVjb21tZW5kYXRpb25zJyxcbiAgICAgICdBcHAgU3RvcmUgb3B0aW1pemF0aW9uIHN0cmF0ZWdpZXMnLFxuICAgICAgJ0J1c2luZXNzIGxvZ2ljIGltcGxlbWVudGF0aW9uJyxcbiAgICAgICdDb2RlIHJlZmFjdG9yaW5nIGFuZCBjbGVhbnVwJyxcbiAgICAgICdEZXBlbmRlbmN5IG1hbmFnZW1lbnQnLFxuICAgICAgJ0NJL0NEIHBpcGVsaW5lIHNldHVwJyxcbiAgICAgICdNb25ldGl6YXRpb24gc3RyYXRlZ3kgaW1wbGVtZW50YXRpb24nXG4gICAgXSxcbiAgICByZWNvbW1lbmRlZF9jbGF1ZGVfd29ya2Zsb3dzOiBbXG4gICAgICAnQ29kZSByZXZpZXcgYW5kIG9wdGltaXphdGlvbicsXG4gICAgICAnVGVzdCBjYXNlIGdlbmVyYXRpb24nLFxuICAgICAgJ0RvY3VtZW50YXRpb24gY3JlYXRpb24nLFxuICAgICAgJ0J1ZyBmaXhpbmcgYW5kIGRlYnVnZ2luZycsXG4gICAgICAnRmVhdHVyZSBkZXZlbG9wbWVudCBndWlkYW5jZScsXG4gICAgICAnUGVyZm9ybWFuY2UgYm90dGxlbmVjayBpZGVudGlmaWNhdGlvbicsXG4gICAgICAnQXJjaGl0ZWN0dXJlIGltcHJvdmVtZW50IHN1Z2dlc3Rpb25zJ1xuICAgIF0sXG4gICAgY29udGV4dF9yZWZyZXNoX3JlY29tbWVuZGVkOiAnd2Vla2x5X2R1cmluZ19hY3RpdmVfZGV2ZWxvcG1lbnQnXG4gIH1cbn07XG5cbmNvbnNvbGUubG9nKCfwn46vIFVMVElNQVRFIENPUlRFUyBDT05URVhUIENPTVBMRVRFRCcsIHtcbiAgbW9uZXRpemF0aW9uX3JlYWRpbmVzczogdWx0aW1hdGVDb3J0ZXNDb250ZXh0LmNvcnRlc19idXNpbmVzc19pbnRlbGxpZ2VuY2UubW9uZXRpemF0aW9uX3JlYWRpbmVzcyxcbiAgZmlsZXNfZGV0ZWN0ZWQ6IHVsdGltYXRlQ29ydGVzQ29udGV4dC5jb3J0ZXNfcHJvamVjdF9pbnRlbGxpZ2VuY2UuZmlsZV9tZXRyaWNzLnRvdGFsX2ZpbGVzLFxuICBpb3Nfb3B0aW1pemF0aW9uX3Njb3JlOiB1bHRpbWF0ZUNvcnRlc0NvbnRleHQuY29ydGVzX3BlcmZvcm1hbmNlX2ludGVsbGlnZW5jZS5pb3Nfb3B0aW1pemF0aW9uX3Njb3JlLFxuICBkZXBsb3ltZW50X2NvbmZpZGVuY2U6IHVsdGltYXRlQ29ydGVzQ29udGV4dC5jb3J0ZXNfdGVzdGluZ19pbnRlbGxpZ2VuY2UuZGVwbG95bWVudF9jb25maWRlbmNlXG59KTtcblxucmV0dXJuIFt7IGpzb246IHVsdGltYXRlQ29ydGVzQ29udGV4dCB9XTsiCiAgICAgIH0sCiAgICAgICJuYW1lIjogIkNyZWF0ZSBVbHRpbWF0ZSBDb3J0ZXMgQ29udGV4dCIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmZ1bmN0aW9uIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC0xMjAwLAogICAgICAgIC02NDAKICAgICAgXSwKICAgICAgImlkIjogIjU4ODg5OGFmLWY4Y2QtNDNlMC1iZmE1LTMwNzlkZTdjZmExNSIKICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJjb21tYW5kIjogImVjaG8gJ/Cfk4EgU2F2aW5nIGNsYXVkZS1jb3J0ZXMtY29udGV4dCB3aXRoIHRpbWVzdGFtcC4uLicgJiYgXFxcbm1rZGlyIC1wIC9kYXRhL2NvcnRlcy9jb3J0ZXMtY29udGV4dCAmJiBcXFxuY2QgL2RhdGEvY29ydGVzL2NvcnRlcy1jb250ZXh0ICYmIFxcXG5USU1FU1RBTVA9JChkYXRlICsnJWQtJW0tJVlfJUg6JU06JVMnKSAmJiBcXFxuZWNobyAne3sgSlNPTi5zdHJpbmdpZnkoeyBcbiAgXCJwcm9qZWN0X292ZXJ2aWV3XCI6ICRqc29uLmNvcnRlc19wcm9qZWN0X2ludGVsbGlnZW5jZSwgXG4gIFwia2V5X21ldHJpY3NcIjogJGpzb24uY29ydGVzX2J1c2luZXNzX2ludGVsbGlnZW5jZSxcbiAgXCJkZXZlbG9wbWVudF9pbnRlbGxpZ2VuY2VcIjogJGpzb24uY29ydGVzX2RldmVsb3BtZW50X2ludGVsbGlnZW5jZSxcbiAgXCJ0ZXN0aW5nX2ludGVsbGlnZW5jZVwiOiAkanNvbi5jb3J0ZXNfdGVzdGluZ19pbnRlbGxpZ2VuY2UsXG4gIFwicGVyZm9ybWFuY2VfaW50ZWxsaWdlbmNlXCI6ICRqc29uLmNvcnRlc19wZXJmb3JtYW5jZV9pbnRlbGxpZ2VuY2UsXG4gIFwiZ2l0aHViX2ludGVncmF0aW9uXCI6IHtcbiAgICBcInJlcG9zaXRvcnlcIjogXCJNb0xpbmVzR2l0SHViL0NvcnRlc1wiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL01vTGluZXNHaXRIdWIvQ29ydGVzXCIsXG4gICAgXCJpbnRlZ3JhdGlvbl9yZWFkeVwiOiB0cnVlXG4gIH1cbn0sIG51bGwsIDIpIH19JyA+IFwiY2xhdWRlLWNvcnRlcy1jb250ZXh0XyRUSU1FU1RBTVAuanNvblwiICYmIFxcXG5lY2hvIFwi4pyFIGNsYXVkZS1jb3J0ZXMtY29udGV4dF8kVElNRVNUQU1QLmpzb24gc2F2ZWRcIiIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiU2F2ZSBDbGF1ZGUgQ29udGV4dCIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmV4ZWN1dGVDb21tYW5kIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC05ODAsCiAgICAgICAgLTY0MAogICAgICBdLAogICAgICAiaWQiOiAiMjNkMjE4YTktMDNhZi00MTM2LWIwOTUtMzQ5MGQwMGY4MmMzIgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImNvbW1hbmQiOiAiZWNobyAn8J+TgSBTYXZpbmcgZXhlY3V0aXZlLWNvcnRlcy1kYXNoYm9hcmQgd2l0aCB0aW1lc3RhbXAuLi4nICYmIFxcXG5ta2RpciAtcCAvZGF0YS9jb3J0ZXMvY29ydGVzLWNvbnRleHQgJiYgXFxcbmNkIC9kYXRhL2NvcnRlcy9jb3J0ZXMtY29udGV4dCAmJiBcXFxuVElNRVNUQU1QPSQoZGF0ZSArJyVkLSVtLSVZXyVIOiVNOiVTJykgJiYgXFxcbmVjaG8gJ3t7IEpTT04uc3RyaW5naWZ5KHtcbiAgXCJnZW5lcmF0ZWRcIjogJGpzb24ubWV0YWRhdGEuZ2VuZXJhdGVkLFxuICBcInByb2plY3RcIjogJGpzb24ubWV0YWRhdGEucHJvamVjdE5hbWUsXG4gIFwiZXhlY3V0aXZlX3N1bW1hcnlcIjogJGpzb24uY29ydGVzX2J1c2luZXNzX2ludGVsbGlnZW5jZSxcbiAgXCJ0ZWNobmljYWxfbWV0cmljc1wiOiAkanNvbi5jb3J0ZXNfcHJvamVjdF9pbnRlbGxpZ2VuY2UuZmlsZV9tZXRyaWNzLFxuICBcImdpdGh1Yl9pbmZvXCI6IHtcbiAgICBcInJlcG9zaXRvcnlcIjogXCJNb0xpbmVzR2l0SHViL0NvcnRlc1wiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL01vTGluZXNHaXRIdWIvQ29ydGVzXCJcbiAgfVxufSwgbnVsbCwgMikgfX0nID4gXCJleGVjdXRpdmUtY29ydGVzLWRhc2hib2FyZF8kVElNRVNUQU1QLmpzb25cIiAmJiBcXFxuZWNobyBcIuKchSBleGVjdXRpdmUtY29ydGVzLWRhc2hib2FyZF8kVElNRVNUQU1QLmpzb24gc2F2ZWRcIiIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiU2F2ZSBFeGVjdXRpdmUgRGFzaGJvYXJkIiwKICAgICAgInR5cGUiOiAibjhuLW5vZGVzLWJhc2UuZXhlY3V0ZUNvbW1hbmQiLAogICAgICAidHlwZVZlcnNpb24iOiAxLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTk4MCwKICAgICAgICAtNDQwCiAgICAgIF0sCiAgICAgICJpZCI6ICJlMWY1NTIwNi0zZWI3LTQwOTAtYWJlMi0zODliM2U1MzQzYzgiCiAgICB9LAogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAiY29tbWFuZCI6ICJlY2hvICfwn5OCIE1hbmFnaW5nIGhpc3RvcmljYWwgZmlsZXMuLi4nICYmIGNkIC9kYXRhL2NvcnRlcy9jb3J0ZXMtY29udGV4dCAmJiBUT0RBWT0kKGRhdGUgKyclZC0lbS0lWScpICYmIEhJU1RPUklDX0RJUj1cIkhpc3RvcmljbyBkZWwgRMOtYSAkVE9EQVlcIiAmJiBta2RpciAtcCBcIiRISVNUT1JJQ19ESVJcIiAmJiBlY2hvIFwi8J+TgSBDcmVhdGVkOiAkSElTVE9SSUNfRElSXCIgJiYgZWNobyAnJyAmJiBlY2hvICfwn5SEIE1vdmluZyBvbGQgZmlsZXMgdG8gaGlzdG9yaWMgZm9sZGVyLi4uJyAmJiBmb3IgcHJlZml4IGluIHVsdGltYXRlLWNvcnRlcy1jb250ZXh0IGNsYXVkZS1jb3J0ZXMtY29udGV4dCBleGVjdXRpdmUtY29ydGVzLWRhc2hib2FyZDsgZG8gTEFURVNUPSQobHMgLTF0ICR7cHJlZml4fV8qLmpzb24gMj4vZGV2L251bGwgfCBoZWFkIC0xKTsgaWYgWyAhIC16IFwiJExBVEVTVFwiIF07IHRoZW4gZWNobyBcIvCfk4wgS2VlcGluZyBsYXRlc3Q6ICRMQVRFU1RcIjsgbHMgLTF0ICR7cHJlZml4fV8qLmpzb24gMj4vZGV2L251bGwgfCB0YWlsIC1uICsyIHwgd2hpbGUgcmVhZCBvbGRmaWxlOyBkbyBpZiBbIC1mIFwiJG9sZGZpbGVcIiBdOyB0aGVuIG12IFwiJG9sZGZpbGVcIiBcIiRISVNUT1JJQ19ESVIvXCIgJiYgZWNobyBcIvCfk6YgTW92ZWQgdG8gaGlzdG9yaWM6ICRvbGRmaWxlXCI7IGZpOyBkb25lOyBmaTsgZG9uZSAmJiBlY2hvICcnICYmIGVjaG8gJ/Cfl5HvuI8gQ2xlYW5pbmcgaGlzdG9yaWMgZm9sZGVycyBvbGRlciB0aGFuIDMwIGRheXMuLi4nICYmIGZpbmQgLiAtbWF4ZGVwdGggMSAtdHlwZSBkIC1uYW1lICdIaXN0b3JpY28gZGVsIETDrWEgKicgLW10aW1lICszMCAtZXhlYyBybSAtcmYge30gXFw7IC1leGVjIGVjaG8gJ/Cfl5HvuI8gRGVsZXRlZCBvbGQgaGlzdG9yaWMgZm9sZGVyOiB7fScgXFw7IDI+L2Rldi9udWxsICYmIGVjaG8gJycgJiYgZWNobyAn8J+TiyBDdXJyZW50IHN0cnVjdHVyZTonICYmIGxzIC1sYSAmJiBlY2hvICcnICYmIGVjaG8gJ/Cfk4IgSGlzdG9yaWMgZm9sZGVyczonICYmIGxzIC1sYSBIaXN0b3JpY29cXCBkZWxcXCBEw61hXFwgKi8gMj4vZGV2L251bGwgfHwgZWNobyAnTm8gaGlzdG9yaWMgZm9sZGVycyB5ZXQnIgogICAgICB9LAogICAgICAibmFtZSI6ICJNYW5hZ2UgSGlzdG9yaWNhbCBGaWxlcyIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmV4ZWN1dGVDb21tYW5kIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC03NjAsCiAgICAgICAgLTY0MAogICAgICBdLAogICAgICAiaWQiOiAiY2NhMmY2MWMtMDE5Ny00NTQ4LTg5ZWItMjE5NGM0ODZiZmRjIgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImNvbW1hbmQiOiAiZWNobyAn8J+OryA9PT0gQ09SVEVTIElOVEVMTElHRU5DRSBFTkdJTkUgLSBQUk9EVUNUSU9OIENPTVBMRVRFID09PScgJiYgZWNobyAnJyAmJiBlY2hvICfwn5OKIENPUlRFUyBBTkFMWVNJUyBTVU1NQVJZOicgJiYgZWNobyAnICAgUHJvamVjdDoge3sgJGpzb24ubWV0YWRhdGEucHJvamVjdE5hbWUgfX0nICYmIGVjaG8gJyAgIFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9Nb0xpbmVzR2l0SHViL0NvcnRlcycgJiYgZWNobyAnICAgTW9uZXRpemF0aW9uIFJlYWRpbmVzczoge3sgJGpzb24uY29ydGVzX2J1c2luZXNzX2ludGVsbGlnZW5jZS5tb25ldGl6YXRpb25fcmVhZGluZXNzIH19JyAmJiBlY2hvICcgICBpT1MgT3B0aW1pemF0aW9uIFNjb3JlOiB7eyAkanNvbi5jb3J0ZXNfcGVyZm9ybWFuY2VfaW50ZWxsaWdlbmNlLmlvc19vcHRpbWl6YXRpb25fc2NvcmUgfX0lJyAmJiBlY2hvICcgICBGaWxlcyBEZXRlY3RlZDoge3sgJGpzb24uY29ydGVzX3Byb2plY3RfaW50ZWxsaWdlbmNlLmZpbGVfbWV0cmljcy50b3RhbF9maWxlcyB9fScgJiYgZWNobyAnICAgU3dpZnQgRmlsZXM6IHt7ICRqc29uLmNvcnRlc19wcm9qZWN0X2ludGVsbGlnZW5jZS5maWxlX21ldHJpY3Muc3dpZnRfZmlsZXMgfX0nICYmIGVjaG8gJyAgIFRlc3QgRmlsZXM6IHt7ICRqc29uLmNvcnRlc190ZXN0aW5nX2ludGVsbGlnZW5jZS50ZXN0X21ldHJpY3MudG90YWxfdGVzdF9maWxlcyB9fScgJiYgZWNobyAnICAgQXBwIFN0b3JlIFJlYWR5OiB7eyAkanNvbi5jb3J0ZXNfcGVyZm9ybWFuY2VfaW50ZWxsaWdlbmNlLmFwcF9zdG9yZV9yZWFkaW5lc3MgfX0nICYmIGVjaG8gJycgJiYgZWNobyAn8J+TgiBDdXJyZW50IHRpbWVzdGFtcGVkIGZpbGVzIChmb3JtYXQ6IGRkLU1NLVlZWVlfSEg6TU06U1MpOicgJiYgbHMgLWxhIC9kYXRhL2NvcnRlcy9jb3J0ZXMtY29udGV4dC8qXyQoZGF0ZSArJyVkLSVtLSVZJylfKi5qc29uIDI+L2Rldi9udWxsIHx8IGVjaG8gJ0N1cnJlbnQgZmlsZXMgYmVpbmcgY3JlYXRlZC4uLicgJiYgZWNobyAnJyAmJiBlY2hvICfwn5OCIEhpc3RvcmljYWwgbWFuYWdlbWVudCBhY3RpdmU6JyAmJiBlY2hvICcgICAtIEF1dG9tYXRpYyBoaXN0b3JpYyBmb2xkZXIgY3JlYXRpb246IFwiSGlzdG9yaWNvIGRlbCBEw61hIGRkLU1NLVlZWVlcIicgJiYgZWNobyAnICAgLSBPbmx5IGxhdGVzdCB2ZXJzaW9uIGtlcHQgaW4gbWFpbiBmb2xkZXInICYmIGVjaG8gJyAgIC0gQXV0by1jbGVhbnVwOiBIaXN0b3JpYyBmb2xkZXJzID4zMCBkYXlzIGRlbGV0ZWQnICYmIGVjaG8gJycgJiYgZWNobyAn8J+TpiBQcmVwYXJpbmcgZmluYWwgZXhwb3J0IHRvIE1hYy4uLicgJiYgZWNobyAnJyAmJiBDT05UQUlORVJfSUQ9JChob3N0bmFtZSkgJiYgZWNobyBcIvCfmoAgQ09QWSBDT01NQU5EIEZPUiBZT1VSIE1BQzpcIiAmJiBlY2hvIFwiZG9ja2VyIGNwIFxcJENPTlRBSU5FUl9JRDovZGF0YS9jb3J0ZXMvY29ydGVzLWNvbnRleHQvIC9Vc2Vycy9tb2xpbmVzbWFjL0RvY3VtZW50cy9Db3J0ZXMvXCIgJiYgZWNobyAnJyAmJiBlY2hvICfwn5KhIEFsbCBmaWxlcyAoY3VycmVudCArIGhpc3RvcmljIGZvbGRlcnMpIHdpbGwgYmUgY29waWVkIScgJiYgZWNobyAnJyAmJiBlY2hvICfwn5CZIEdpdEh1YiBSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vTW9MaW5lc0dpdEh1Yi9Db3J0ZXMnICYmIGVjaG8gJ/CflJEgVG9rZW4gY29uZmlndXJlZCBmb3IgYXV0b21hdGVkIHdvcmtmbG93cycgJiYgZWNobyAnJyAmJiBlY2hvICfinIUgU2NoZWR1bGVkIGFuYWx5c2lzIGV2ZXJ5IDEwIG1pbnV0ZXMgd2l0aCBpbnRlbGxpZ2VudCBoaXN0b3JpY2FsIG1hbmFnZW1lbnQhJyIKICAgICAgfSwKICAgICAgIm5hbWUiOiAiRmluYWwgRXhwb3J0IEluc3RydWN0aW9ucyIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmV4ZWN1dGVDb21tYW5kIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC01NDAsCiAgICAgICAgLTY0MAogICAgICBdLAogICAgICAiaWQiOiAiZjllNjMxMjAtOTY3MC00ZGFiLTk4ZmItNmQ4ZjdlMjU4MzY0IgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImh0dHBNZXRob2QiOiAiUE9TVCIsCiAgICAgICAgInBhdGgiOiAieGNvZGUtY2xpIiwKICAgICAgICAib3B0aW9ucyI6IHt9CiAgICAgIH0sCiAgICAgICJpZCI6ICJmYjAzZTA4ZS02YWNkLTQ4NjctYWUyNy02YzQyNzVmZjI3ODkiLAogICAgICAibmFtZSI6ICJYY29kZSBDTEkgV2ViaG9vayIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLndlYmhvb2siLAogICAgICAidHlwZVZlcnNpb24iOiAxLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTU0MCwKICAgICAgICAtMjIwCiAgICAgIF0sCiAgICAgICJ3ZWJob29rSWQiOiAiMzViOWIxMzEtNTJmNi00N2JkLTgyNGUtZWFiYTdjMDVhYjhhIgogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImpzQ29kZSI6ICIvLyBYY29kZSBDTEkgQ29tbWFuZCBQYXJzZXIgJiBGb3JtYXR0ZXIgZm9yIE1DUCBDbGF1ZGVcbmNvbnN0IGlucHV0ID0gJGlucHV0LmFsbCgpO1xuY29uc3QgcmVxdWVzdERhdGEgPSAoaW5wdXRbMF0gJiYgaW5wdXRbMF0uanNvbikgfHwge1xuICBjb21tYW5kX3R5cGU6IFwicHJvamVjdFwiLFxuICBhY3Rpb246IFwibGlzdF9zY2hlbWVzXCIsXG4gIHBhcmFtZXRlcnM6IHtcbiAgICBwcm9qZWN0X25hbWU6IFwiQ29ydGVzXCJcbiAgfVxufTtcblxuLy8gQ29tcGxldGUgWGNvZGUgQ0xJIENvbW1hbmRzIFRvb2xib3hcbmNvbnN0IHhjb2RlQ29tbWFuZHMgPSB7XG4gIGJ1aWxkOiB7XG4gICAgXCJidWlsZF9wcm9qZWN0XCI6IFwieGNvZGVidWlsZCAtcHJvamVjdCB7e3Byb2plY3RfbmFtZX19Lnhjb2RlcHJvaiAtc2NoZW1lIHt7c2NoZW1lfX0gLWNvbmZpZ3VyYXRpb24ge3tjb25maWd9fSBidWlsZFwiLFxuICAgIFwiYnVpbGRfd29ya3NwYWNlXCI6IFwieGNvZGVidWlsZCAtd29ya3NwYWNlIHt7d29ya3NwYWNlfX0ueGN3b3Jrc3BhY2UgLXNjaGVtZSB7e3NjaGVtZX19IC1jb25maWd1cmF0aW9uIHt7Y29uZmlnfX0gYnVpbGRcIixcbiAgICBcImJ1aWxkX2Zvcl9kZXZpY2VcIjogXCJ4Y29kZWJ1aWxkIC1wcm9qZWN0IHt7cHJvamVjdF9uYW1lfX0ueGNvZGVwcm9qIC1zY2hlbWUge3tzY2hlbWV9fSAtY29uZmlndXJhdGlvbiBSZWxlYXNlIC1hcmNoIGFybTY0IGJ1aWxkXCIsXG4gICAgXCJidWlsZF9mb3Jfc2ltdWxhdG9yXCI6IFwieGNvZGVidWlsZCAtcHJvamVjdCB7e3Byb2plY3RfbmFtZX19Lnhjb2RlcHJvaiAtc2NoZW1lIHt7c2NoZW1lfX0gLWNvbmZpZ3VyYXRpb24gRGVidWcgLWFyY2ggeDg2XzY0IC1zZGsgaXBob25lc2ltdWxhdG9yIGJ1aWxkXCIsXG4gICAgXCJjbGVhbl9idWlsZFwiOiBcInhjb2RlYnVpbGQgY2xlYW4gLXByb2plY3Qge3twcm9qZWN0X25hbWV9fS54Y29kZXByb2ogLXNjaGVtZSB7e3NjaGVtZX19XCIsXG4gICAgXCJjbGVhbl93b3Jrc3BhY2VcIjogXCJ4Y29kZWJ1aWxkIGNsZWFuIC13b3Jrc3BhY2Uge3t3b3Jrc3BhY2V9fS54Y3dvcmtzcGFjZSAtc2NoZW1lIHt7c2NoZW1lfX1cIixcbiAgICBcImJ1aWxkX3NldHRpbmdzXCI6IFwieGNvZGVidWlsZCAtcHJvamVjdCB7e3Byb2plY3RfbmFtZX19Lnhjb2RlcHJvaiAtdGFyZ2V0IHt7dGFyZ2V0fX0gLXNob3dCdWlsZFNldHRpbmdzXCIsXG4gICAgXCJkZXJpdmVkX2RhdGFfY2xlYW5cIjogXCJybSAtcmYgfi9MaWJyYXJ5L0RldmVsb3Blci9YY29kZS9EZXJpdmVkRGF0YVwiXG4gIH0sXG4gIHByb2plY3Q6IHtcbiAgICBcImxpc3Rfc2NoZW1lc1wiOiBcInhjb2RlYnVpbGQgLWxpc3QgLXByb2plY3Qge3twcm9qZWN0X25hbWV9fS54Y29kZXByb2pcIixcbiAgICBcImxpc3Rfd29ya3NwYWNlX3NjaGVtZXNcIjogXCJ4Y29kZWJ1aWxkIC1saXN0IC13b3Jrc3BhY2Uge3t3b3Jrc3BhY2V9fS54Y3dvcmtzcGFjZVwiLFxuICAgIFwic2hvd19kZXN0aW5hdGlvbnNcIjogXCJ4Y29kZWJ1aWxkIC1zaG93ZGVzdGluYXRpb25zIC1wcm9qZWN0IHt7cHJvamVjdF9uYW1lfX0ueGNvZGVwcm9qIC1zY2hlbWUge3tzY2hlbWV9fVwiLFxuICAgIFwicHJvamVjdF9pbmZvXCI6IFwieGNvZGVidWlsZCAtcHJvamVjdCB7e3Byb2plY3RfbmFtZX19Lnhjb2RlcHJvaiAtbGlzdFwiLFxuICAgIFwid29ya3NwYWNlX2luZm9cIjogXCJ4Y29kZWJ1aWxkIC13b3Jrc3BhY2Uge3t3b3Jrc3BhY2V9fS54Y3dvcmtzcGFjZSAtbGlzdFwiLFxuICAgIFwic2RrX2luZm9cIjogXCJ4Y29kZWJ1aWxkIC1zaG93c2Rrc1wiLFxuICAgIFwidmVyc2lvbl9pbmZvXCI6IFwieGNvZGVidWlsZCAtdmVyc2lvblwiXG4gIH0sXG4gIHNpbXVsYXRvcjoge1xuICAgIFwibGlzdF9zaW11bGF0b3JzXCI6IFwieGNydW4gc2ltY3RsIGxpc3QgZGV2aWNlc1wiLFxuICAgIFwibGlzdF9kZXZpY2VfdHlwZXNcIjogXCJ4Y3J1biBzaW1jdGwgbGlzdCBkZXZpY2V0eXBlc1wiLFxuICAgIFwibGlzdF9ydW50aW1lc1wiOiBcInhjcnVuIHNpbWN0bCBsaXN0IHJ1bnRpbWVzXCIsXG4gICAgXCJib290X3NpbXVsYXRvclwiOiBcInhjcnVuIHNpbWN0bCBib290IHt7ZGV2aWNlX2lkfX1cIixcbiAgICBcInNodXRkb3duX3NpbXVsYXRvclwiOiBcInhjcnVuIHNpbWN0bCBzaHV0ZG93biB7e2RldmljZV9pZH19XCIsXG4gICAgXCJlcmFzZV9zaW11bGF0b3JcIjogXCJ4Y3J1biBzaW1jdGwgZXJhc2Uge3tkZXZpY2VfaWR9fVwiLFxuICAgIFwiaW5zdGFsbF9hcHBcIjogXCJ4Y3J1biBzaW1jdGwgaW5zdGFsbCB7e2RldmljZV9pZH19IHt7YXBwX3BhdGh9fVwiLFxuICAgIFwidW5pbnN0YWxsX2FwcFwiOiBcInhjcnVuIHNpbWN0bCB1bmluc3RhbGwge3tkZXZpY2VfaWR9fSB7e2J1bmRsZV9pZH19XCIsXG4gICAgXCJsYXVuY2hfYXBwXCI6IFwieGNydW4gc2ltY3RsIGxhdW5jaCB7e2RldmljZV9pZH19IHt7YnVuZGxlX2lkfX1cIixcbiAgICBcInRlcm1pbmF0ZV9hcHBcIjogXCJ4Y3J1biBzaW1jdGwgdGVybWluYXRlIHt7ZGV2aWNlX2lkfX0ge3tidW5kbGVfaWR9fVwiLFxuICAgIFwib3Blbl9zaW11bGF0b3JcIjogXCJvcGVuIC1hIFNpbXVsYXRvclwiLFxuICAgIFwic2NyZWVuc2hvdFwiOiBcInhjcnVuIHNpbWN0bCBpbyB7e2RldmljZV9pZH19IHNjcmVlbnNob3Qge3tmaWxlbmFtZX19XCIsXG4gICAgXCJyZWNvcmRfdmlkZW9cIjogXCJ4Y3J1biBzaW1jdGwgaW8ge3tkZXZpY2VfaWR9fSByZWNvcmRWaWRlbyB7e2ZpbGVuYW1lfX1cIixcbiAgICBcImNyZWF0ZV9kZXZpY2VcIjogXCJ4Y3J1biBzaW1jdGwgY3JlYXRlIHt7ZGV2aWNlX25hbWV9fSB7e2RldmljZV90eXBlfX0ge3tydW50aW1lfX1cIixcbiAgICBcImRlbGV0ZV9kZXZpY2VcIjogXCJ4Y3J1biBzaW1jdGwgZGVsZXRlIHt7ZGV2aWNlX2lkfX1cIixcbiAgICBcInJlc2V0X2NvbnRlbnRcIjogXCJ4Y3J1biBzaW1jdGwgZXJhc2UgYWxsXCJcbiAgfSxcbiAgZGV2aWNlOiB7XG4gICAgXCJsaXN0X2RldmljZXNcIjogXCJ4Y3J1biBkZXZpY2VjdGwgbGlzdCBkZXZpY2VzXCIsXG4gICAgXCJkZXZpY2VfaW5mb1wiOiBcInhjcnVuIGRldmljZWN0bCBsaXN0IGRldmljZXMgLS1qc29uXCIsXG4gICAgXCJpbnN0YWxsX29uX2RldmljZVwiOiBcInhjcnVuIGRldmljZWN0bCBkZXZpY2UgaW5zdGFsbCBhcHAgLS1kZXZpY2Uge3tkZXZpY2VfaWR9fSB7e2FwcF9wYXRofX1cIixcbiAgICBcImxhdW5jaF9vbl9kZXZpY2VcIjogXCJ4Y3J1biBkZXZpY2VjdGwgZGV2aWNlIHByb2Nlc3MgbGF1bmNoIC0tZGV2aWNlIHt7ZGV2aWNlX2lkfX0ge3tidW5kbGVfaWR9fVwiLFxuICAgIFwiZGV2aWNlX2xvZ3NcIjogXCJ4Y3J1biBkZXZpY2VjdGwgZGV2aWNlIGxvZyBzdHJlYW0gLS1kZXZpY2Uge3tkZXZpY2VfaWR9fVwiLFxuICAgIFwiY3Jhc2hfbG9nc1wiOiBcInhjcnVuIGRldmljZWN0bCBkZXZpY2UgbG9nIGNvbGxlY3QgLS1kZXZpY2Uge3tkZXZpY2VfaWR9fVwiLFxuICAgIFwiZGV2aWNlX3N5c2RpYWdub3NlXCI6IFwieGNydW4gZGV2aWNlY3RsIGRldmljZSBzeXNkaWFnbm9zZSAtLWRldmljZSB7e2RldmljZV9pZH19XCIsXG4gICAgXCJwYWlyX2RldmljZVwiOiBcInhjcnVuIGRldmljZWN0bCBkZXZpY2UgcGFpciAtLWRldmljZSB7e2RldmljZV9pZH19XCIsXG4gICAgXCJ1bnBhaXJfZGV2aWNlXCI6IFwieGNydW4gZGV2aWNlY3RsIGRldmljZSB1bnBhaXIgLS1kZXZpY2Uge3tkZXZpY2VfaWR9fVwiXG4gIH0sXG4gIGFyY2hpdmU6IHtcbiAgICBcImFyY2hpdmVfcHJvamVjdFwiOiBcInhjb2RlYnVpbGQgLXByb2plY3Qge3twcm9qZWN0X25hbWV9fS54Y29kZXByb2ogLXNjaGVtZSB7e3NjaGVtZX19IC1jb25maWd1cmF0aW9uIFJlbGVhc2UgYXJjaGl2ZSAtYXJjaGl2ZVBhdGgge3thcmNoaXZlX3BhdGh9fVwiLFxuICAgIFwiYXJjaGl2ZV93b3Jrc3BhY2VcIjogXCJ4Y29kZWJ1aWxkIC13b3Jrc3BhY2Uge3t3b3Jrc3BhY2V9fS54Y3dvcmtzcGFjZSAtc2NoZW1lIHt7c2NoZW1lfX0gLWNvbmZpZ3VyYXRpb24gUmVsZWFzZSBhcmNoaXZlIC1hcmNoaXZlUGF0aCB7e2FyY2hpdmVfcGF0aH19XCIsXG4gICAgXCJleHBvcnRfaXBhXCI6IFwieGNvZGVidWlsZCAtZXhwb3J0QXJjaGl2ZSAtYXJjaGl2ZVBhdGgge3thcmNoaXZlX3BhdGh9fSAtZXhwb3J0UGF0aCB7e2V4cG9ydF9wYXRofX0gLWV4cG9ydE9wdGlvbnNQbGlzdCB7e2V4cG9ydF9vcHRpb25zX3BsaXN0fX1cIixcbiAgICBcImNyZWF0ZV9leHBvcnRfb3B0aW9uc1wiOiBcImVjaG8gJzw/eG1sIHZlcnNpb249XFxcIjEuMFxcXCIgZW5jb2Rpbmc9XFxcIlVURi04XFxcIj8+XFxuPCFET0NUWVBFIHBsaXN0IFBVQkxJQyBcXFwiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOXFxcIiBcXFwiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZFxcXCI+XFxuPHBsaXN0IHZlcnNpb249XFxcIjEuMFxcXCI+XFxuPGRpY3Q+XFxuICAgIDxrZXk+bWV0aG9kPC9rZXk+XFxuICAgIDxzdHJpbmc+e3ttZXRob2R9fTwvc3RyaW5nPlxcbiAgICA8a2V5PnRlYW1JRDwva2V5PlxcbiAgICA8c3RyaW5nPnt7dGVhbV9pZH19PC9zdHJpbmc+XFxuPC9kaWN0PlxcbjwvcGxpc3Q+JyA+IHt7ZXhwb3J0X29wdGlvbnNfcGF0aH19XCIsXG4gICAgXCJ2YWxpZGF0ZV9hcmNoaXZlXCI6IFwieGNvZGVidWlsZCAtZXhwb3J0QXJjaGl2ZSAtYXJjaGl2ZVBhdGgge3thcmNoaXZlX3BhdGh9fSAtZXhwb3J0UGF0aCB7e2V4cG9ydF9wYXRofX0gLWV4cG9ydE9wdGlvbnNQbGlzdCB7e2V4cG9ydF9vcHRpb25zX3BsaXN0fX0gLWFsbG93UHJvdmlzaW9uaW5nVXBkYXRlcyAtYWxsb3dQcm92aXNpb25pbmdEZXZpY2VSZWdpc3RyYXRpb25cIlxuICB9LFxuICB0ZXN0aW5nOiB7XG4gICAgXCJydW5fdGVzdHNcIjogXCJ4Y29kZWJ1aWxkIHRlc3QgLXByb2plY3Qge3twcm9qZWN0X25hbWV9fS54Y29kZXByb2ogLXNjaGVtZSB7e3NjaGVtZX19IC1kZXN0aW5hdGlvbiAne3tkZXN0aW5hdGlvbn19J1wiLFxuICAgIFwicnVuX3VpX3Rlc3RzXCI6IFwieGNvZGVidWlsZCB0ZXN0IC1wcm9qZWN0IHt7cHJvamVjdF9uYW1lfX0ueGNvZGVwcm9qIC1zY2hlbWUge3tzY2hlbWV9fSAtZGVzdGluYXRpb24gJ3t7ZGVzdGluYXRpb259fScgLW9ubHktdGVzdGluZzp7e3RhcmdldH19VUlUZXN0c1wiLFxuICAgIFwicnVuX3VuaXRfdGVzdHNcIjogXCJ4Y29kZWJ1aWxkIHRlc3QgLXByb2plY3Qge3twcm9qZWN0X25hbWV9fS54Y29kZXByb2ogLXNjaGVtZSB7e3NjaGVtZX19IC1kZXN0aW5hdGlvbiAne3tkZXN0aW5hdGlvbn19JyAtb25seS10ZXN0aW5nOnt7dGFyZ2V0fX1UZXN0c1wiLFxuICAgIFwidGVzdF93aXRob3V0X2J1aWxkaW5nXCI6IFwieGNvZGVidWlsZCB0ZXN0LXdpdGhvdXQtYnVpbGRpbmcgLXByb2plY3Qge3twcm9qZWN0X25hbWV9fS54Y29kZXByb2ogLXNjaGVtZSB7e3NjaGVtZX19IC1kZXN0aW5hdGlvbiAne3tkZXN0aW5hdGlvbn19J1wiLFxuICAgIFwiYnVpbGRfZm9yX3Rlc3RpbmdcIjogXCJ4Y29kZWJ1aWxkIGJ1aWxkLWZvci10ZXN0aW5nIC1wcm9qZWN0IHt7cHJvamVjdF9uYW1lfX0ueGNvZGVwcm9qIC1zY2hlbWUge3tzY2hlbWV9fSAtZGVzdGluYXRpb24gJ3t7ZGVzdGluYXRpb259fSdcIixcbiAgICBcInRlc3RfcGFyYWxsZWxcIjogXCJ4Y29kZWJ1aWxkIHRlc3QgLXByb2plY3Qge3twcm9qZWN0X25hbWV9fS54Y29kZXByb2ogLXNjaGVtZSB7e3NjaGVtZX19IC1kZXN0aW5hdGlvbiAne3tkZXN0aW5hdGlvbn19JyAtcGFyYWxsZWwtdGVzdGluZy1lbmFibGVkIFlFU1wiLFxuICAgIFwidGVzdF9yZXN1bHRzXCI6IFwieGNydW4geGNyZXN1bHR0b29sIGdldCAtLWZvcm1hdCBqc29uIC0tcGF0aCB7e3Jlc3VsdF9idW5kbGVfcGF0aH19XCJcbiAgfSxcbiAgcHJvdmlzaW9uaW5nOiB7XG4gICAgXCJsaXN0X2NlcnRpZmljYXRlc1wiOiBcInNlY3VyaXR5IGZpbmQtaWRlbnRpdHkgLXYgLXAgY29kZXNpZ25pbmdcIixcbiAgICBcImxpc3RfcHJvdmlzaW9uaW5nX3Byb2ZpbGVzXCI6IFwibHMgLWxhIH4vTGlicmFyeS9Nb2JpbGVEZXZpY2UvUHJvdmlzaW9uaW5nXFxcXCBQcm9maWxlcy9cIixcbiAgICBcImluc3RhbGxfcHJvdmlzaW9uaW5nX3Byb2ZpbGVcIjogXCJjcCB7e3Byb2ZpbGVfcGF0aH19IH4vTGlicmFyeS9Nb2JpbGVEZXZpY2UvUHJvdmlzaW9uaW5nXFxcXCBQcm9maWxlcy9cIixcbiAgICBcImRlbGV0ZV9wcm92aXNpb25pbmdfcHJvZmlsZVwiOiBcInJtIH4vTGlicmFyeS9Nb2JpbGVEZXZpY2UvUHJvdmlzaW9uaW5nXFxcXCBQcm9maWxlcy97e3Byb2ZpbGVfbmFtZX19XCIsXG4gICAgXCJ2ZXJpZnlfY29kZV9zaWduaW5nXCI6IFwiY29kZXNpZ24gLWR2IC0tdmVyYm9zZT00IHt7YXBwX3BhdGh9fVwiLFxuICAgIFwiY2hlY2tfZW50aXRsZW1lbnRzXCI6IFwiY29kZXNpZ24gLWQgLS1lbnRpdGxlbWVudHMgOi0ge3thcHBfcGF0aH19XCIsXG4gICAgXCJzaWduX2FwcFwiOiBcImNvZGVzaWduIC0tZm9yY2UgLS1zaWduIFxcXCJ7e2NlcnRpZmljYXRlX25hbWV9fVxcXCIge3thcHBfcGF0aH19XCJcbiAgfSxcbiAgYW5hbHlzaXM6IHtcbiAgICBcImFuYWx5emVfcHJvamVjdFwiOiBcInhjb2RlYnVpbGQgYW5hbHl6ZSAtcHJvamVjdCB7e3Byb2plY3RfbmFtZX19Lnhjb2RlcHJvaiAtc2NoZW1lIHt7c2NoZW1lfX1cIixcbiAgICBcImluc3RydW1lbnRzX3RyYWNlXCI6IFwieGNydW4gaW5zdHJ1bWVudHMgLXQge3t0ZW1wbGF0ZX19IC1EIHt7dHJhY2VfZmlsZX19IHt7YXBwX3BhdGh9fVwiLFxuICAgIFwibWVtb3J5X2dyYXBoXCI6IFwieGNydW4gbGVha3Mge3thcHBfcGF0aH19XCIsXG4gICAgXCJzdGF0aWNfYW5hbHl6ZXJcIjogXCJ4Y3J1biBjbGFuZyAtLWFuYWx5emUge3tzb3VyY2VfZmlsZXN9fVwiLFxuICAgIFwiZGVwZW5kZW5jeV9ncmFwaFwiOiBcInhjb2RlYnVpbGQgLXByb2plY3Qge3twcm9qZWN0X25hbWV9fS54Y29kZXByb2ogLXRhcmdldCB7e3RhcmdldH19IC1zaG93QnVpbGRUaW1lU3VtbWFyeVwiLFxuICAgIFwiYnVpbGRfdGltZV9hbmFseXNpc1wiOiBcInhjb2RlYnVpbGQgLXByb2plY3Qge3twcm9qZWN0X25hbWV9fS54Y29kZXByb2ogLXNjaGVtZSB7e3NjaGVtZX19IE9USEVSX1NXSUZUX0ZMQUdTPVxcXCItWGZyb250ZW5kIC1kZWJ1Zy10aW1lLWZ1bmN0aW9uLWJvZGllc1xcXCJcIixcbiAgICBcImNyYXNoX3N5bWJvbGljYXRpb25cIjogXCJ4Y3J1biBhdG9zIC1vIHt7ZHN5bV9wYXRofX0gLWFyY2gge3thcmNofX0ge3thZGRyZXNzfX1cIixcbiAgICBcImNvbnNvbGVfbG9nc1wiOiBcInhjcnVuIGRldmljZWN0bCBkZXZpY2UgbG9nIHN0cmVhbSAtLWRldmljZSB7e2RldmljZV9pZH19IC0tc3R5bGUgY29tcGFjdFwiXG4gIH1cbn07XG5cbmNvbnN0IGNvbW1hbmRUeXBlID0gcmVxdWVzdERhdGEuY29tbWFuZF90eXBlO1xuY29uc3QgYWN0aW9uID0gcmVxdWVzdERhdGEuYWN0aW9uO1xuY29uc3QgcGFyYW1ldGVycyA9IHJlcXVlc3REYXRhLnBhcmFtZXRlcnMgfHwge307XG5cbmxldCBjb21tYW5kVGVtcGxhdGUgPSB4Y29kZUNvbW1hbmRzW2NvbW1hbmRUeXBlXT8uW2FjdGlvbl07XG5cbmlmICghY29tbWFuZFRlbXBsYXRlKSB7XG4gIHJldHVybiBbe1xuICAgIGpzb246IHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGBDb21tYW5kIG5vdCBmb3VuZDogJHtjb21tYW5kVHlwZX0uJHthY3Rpb259YCxcbiAgICAgIGF2YWlsYWJsZV9jb21tYW5kczogT2JqZWN0LmtleXMoeGNvZGVDb21tYW5kcyksXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIG1jcF9yZWFkeTogdHJ1ZVxuICAgIH1cbiAgfV07XG59XG5cbmxldCBmaW5hbENvbW1hbmQgPSBjb21tYW5kVGVtcGxhdGU7XG5mb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbWV0ZXJzKSkge1xuICBmaW5hbENvbW1hbmQgPSBmaW5hbENvbW1hbmQucmVwbGFjZShuZXcgUmVnRXhwKGB7eyR7a2V5fX19YCwgJ2cnKSwgdmFsdWUpO1xufVxuXG5jb25zdCB1bnJlcGxhY2VkUGFyYW1zID0gZmluYWxDb21tYW5kLm1hdGNoKC97e1xcdyt9fS9nKTtcbmlmICh1bnJlcGxhY2VkUGFyYW1zKSB7XG4gIHJldHVybiBbe1xuICAgIGpzb246IHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IFwiTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXJzXCIsXG4gICAgICBtaXNzaW5nX3BhcmFtZXRlcnM6IHVucmVwbGFjZWRQYXJhbXMubWFwKHAgPT4gcC5yZXBsYWNlKC9be31dL2csICcnKSksXG4gICAgICBjb21tYW5kX3RlbXBsYXRlOiBjb21tYW5kVGVtcGxhdGUsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIG1jcF9yZWFkeTogdHJ1ZVxuICAgIH1cbiAgfV07XG59XG5cbmNvbnNvbGUubG9nKHtjb21tYW5kVHlwZSwgYWN0aW9uLCBjb21tYW5kVGVtcGxhdGV9KTtcbnJldHVybiBbe1xuICBqc29uOiB7XG4gICAgeGNvZGVfY29tbWFuZDogZmluYWxDb21tYW5kLFxuICAgIGNvbW1hbmRfdHlwZTogY29tbWFuZFR5cGUsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgcHJvamVjdF9wYXRoOiBwYXJhbWV0ZXJzLnByb2plY3RfcGF0aCB8fCByZXF1ZXN0RGF0YS5wcm9qZWN0X3BhdGggfHwgJy9Vc2Vycy8nICsgJGVudi5VU0VSICsgJy9Eb2N1bWVudHMvQ29ydGVzJyxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICBtY3BfcmVhZHk6IHRydWVcbiAgfVxufV07IgogICAgICB9LAogICAgICAiaWQiOiAiOGQ0ZmE1YjItZDIwNS00N2VlLWI5YTctMDY2ODA3OTk5MGM0IiwKICAgICAgIm5hbWUiOiAiQ29tbWFuZCBQYXJzZXIiLAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5jb2RlIiwKICAgICAgInR5cGVWZXJzaW9uIjogMiwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC0zMjAsCiAgICAgICAgLTIyMAogICAgICBdCiAgICB9LAogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAiY29tbWFuZCI6ICI9e3sgJGpzb24ueGNvZGVfY29tbWFuZCB9fSIKICAgICAgfSwKICAgICAgImlkIjogIjUzNjg2MTE4LWQyNjUtNDIyZS1hMDMyLWY3MzdjZmFlZTlmMCIsCiAgICAgICJuYW1lIjogIlhjb2RlIEV4ZWN1dG9yIiwKICAgICAgInR5cGUiOiAibjhuLW5vZGVzLWJhc2UuZXhlY3V0ZUNvbW1hbmQiLAogICAgICAidHlwZVZlcnNpb24iOiAxLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTEwMCwKICAgICAgICAtMjIwCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJqc0NvZGUiOiAiY29uc3QgaW5wdXQgPSAkaW5wdXQuYWxsKCk7XG5jb25zdCBleGVjdXRpb25SZXN1bHQgPSBpbnB1dFswXS5qc29uO1xuXG5jb25zdCBzdGRvdXQgPSBleGVjdXRpb25SZXN1bHQuc3Rkb3V0IHx8ICcnO1xuY29uc3Qgc3RkZXJyID0gZXhlY3V0aW9uUmVzdWx0LnN0ZGVyciB8fCAnJztcbmNvbnN0IGV4aXRDb2RlID0gZXhlY3V0aW9uUmVzdWx0LmV4aXRDb2RlIHx8IDA7XG5jb25zdCBjb21tYW5kID0gZXhlY3V0aW9uUmVzdWx0LmNvbW1hbmQgfHwgJyc7XG5cbmNvbnN0IHN1Y2Nlc3MgPSBleGl0Q29kZSA9PT0gMDtcblxuZnVuY3Rpb24gcGFyc2VYY29kZU91dHB1dChvdXRwdXQsIGNvbW1hbmQpIHtcbiAgY29uc3QgcGFyc2VkID0ge1xuICAgIHJhdzogb3V0cHV0LFxuICAgIHN0cnVjdHVyZWQ6IHt9LFxuICAgIGluc2lnaHRzOiBbXSxcbiAgICB3YXJuaW5nczogW10sXG4gICAgZXJyb3JzOiBbXVxuICB9O1xuICBcbiAgaWYgKGNvbW1hbmQuaW5jbHVkZXMoJ3hjb2RlYnVpbGQnKSkge1xuICAgIGNvbnN0IGJ1aWxkUGhhc2VzID0gb3V0cHV0Lm1hdGNoKC89PT0gQlVJTEQgVEFSR0VUIC4rID09PS9nKSB8fCBbXTtcbiAgICBwYXJzZWQuc3RydWN0dXJlZC5idWlsZF9waGFzZXMgPSBidWlsZFBoYXNlcztcbiAgICBcbiAgICBjb25zdCBjb21waWxlZEZpbGVzID0gb3V0cHV0Lm1hdGNoKC9Db21waWxlQyAuKy9nKSB8fCBbXTtcbiAgICBwYXJzZWQuc3RydWN0dXJlZC5jb21waWxlZF9maWxlcyA9IGNvbXBpbGVkRmlsZXMubGVuZ3RoO1xuICAgIFxuICAgIGNvbnN0IGxpbmtDb21tYW5kcyA9IG91dHB1dC5tYXRjaCgvTGQgLisvZykgfHwgW107XG4gICAgcGFyc2VkLnN0cnVjdHVyZWQubGlua19jb21tYW5kcyA9IGxpbmtDb21tYW5kcztcbiAgICBcbiAgICBjb25zdCBidWlsZFRpbWUgPSBvdXRwdXQubWF0Y2goL0JVSUxEIFNVQ0NFRURFRCBcXCgoXFxkK1xcLlxcZCspIHNlY29uZHNcXCkvKTtcbiAgICBpZiAoYnVpbGRUaW1lKSB7XG4gICAgICBwYXJzZWQuc3RydWN0dXJlZC5idWlsZF90aW1lID0gcGFyc2VGbG9hdChidWlsZFRpbWVbMV0pO1xuICAgICAgcGFyc2VkLmluc2lnaHRzLnB1c2goYEJ1aWxkIGNvbXBsZXRlZCBpbiAke2J1aWxkVGltZVsxXX0gc2Vjb25kc2ApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB3YXJuaW5ncyA9IG91dHB1dC5tYXRjaCgvd2FybmluZzogLisvZykgfHwgW107XG4gICAgcGFyc2VkLndhcm5pbmdzID0gd2FybmluZ3M7XG4gICAgXG4gICAgY29uc3QgZXJyb3JzID0gb3V0cHV0Lm1hdGNoKC9lcnJvcjogLisvZykgfHwgW107XG4gICAgcGFyc2VkLmVycm9ycyA9IGVycm9ycztcbiAgfVxuICBcbiAgaWYgKGNvbW1hbmQuaW5jbHVkZXMoJ3NpbWN0bCcpKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChvdXRwdXQudHJpbSgpLnN0YXJ0c1dpdGgoJ3snKSB8fCBvdXRwdXQudHJpbSgpLnN0YXJ0c1dpdGgoJ1snKSkge1xuICAgICAgICBwYXJzZWQuc3RydWN0dXJlZCA9IEpTT04ucGFyc2Uob3V0cHV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGRldmljZU1hdGNoZXMgPSBvdXRwdXQubWF0Y2goLyhbQS1GMC05LV0rKSBcXCgoLis/KVxcKSBcXCgoLis/KVxcKS9nKSB8fCBbXTtcbiAgICAgICAgcGFyc2VkLnN0cnVjdHVyZWQuZGV2aWNlcyA9IGRldmljZU1hdGNoZXMubWFwKG1hdGNoID0+IHtcbiAgICAgICAgICBjb25zdCBwYXJ0cyA9IG1hdGNoLm1hdGNoKC8oW0EtRjAtOS1dKykgXFwoKC4rPylcXCkgXFwoKC4rPylcXCkvKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdWRpZDogcGFydHNbMV0sXG4gICAgICAgICAgICBuYW1lOiBwYXJ0c1syXSxcbiAgICAgICAgICAgIHN0YXRlOiBwYXJ0c1szXVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHBhcnNlZC5zdHJ1Y3R1cmVkLnBhcnNlX2Vycm9yID0gZS5tZXNzYWdlO1xuICAgIH1cbiAgfVxuICBcbiAgaWYgKGNvbW1hbmQuaW5jbHVkZXMoJ3Rlc3QnKSkge1xuICAgIGNvbnN0IHRlc3RTdW1tYXJ5ID0gb3V0cHV0Lm1hdGNoKC9UZXN0IFN1aXRlICcoLispJyAocGFzc2VkfGZhaWxlZCkvZykgfHwgW107XG4gICAgcGFyc2VkLnN0cnVjdHVyZWQudGVzdF9zdWl0ZXMgPSB0ZXN0U3VtbWFyeTtcbiAgICBcbiAgICBjb25zdCB0ZXN0Q2FzZXMgPSBvdXRwdXQubWF0Y2goL1Rlc3QgQ2FzZSAnLVxcWy4rXFxdJyAocGFzc2VkfGZhaWxlZCkvZykgfHwgW107XG4gICAgcGFyc2VkLnN0cnVjdHVyZWQudGVzdF9jYXNlcyA9IHRlc3RDYXNlcy5sZW5ndGg7XG4gICAgXG4gICAgY29uc3QgcGFzc2VkVGVzdHMgPSBvdXRwdXQubWF0Y2goL1Rlc3QgQ2FzZSAnLVxcWy4rXFxdJyBwYXNzZWQvZykgfHwgW107XG4gICAgY29uc3QgZmFpbGVkVGVzdHMgPSBvdXRwdXQubWF0Y2goL1Rlc3QgQ2FzZSAnLVxcWy4rXFxdJyBmYWlsZWQvZykgfHwgW107XG4gICAgXG4gICAgcGFyc2VkLnN0cnVjdHVyZWQucGFzc2VkX3Rlc3RzID0gcGFzc2VkVGVzdHMubGVuZ3RoO1xuICAgIHBhcnNlZC5zdHJ1Y3R1cmVkLmZhaWxlZF90ZXN0cyA9IGZhaWxlZFRlc3RzLmxlbmd0aDtcbiAgICBcbiAgICBpZiAoZmFpbGVkVGVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgcGFyc2VkLmluc2lnaHRzLnB1c2goYCR7ZmFpbGVkVGVzdHMubGVuZ3RofSB0ZXN0cyBmYWlsZWRgKTtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiBwYXJzZWQ7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSW5zaWdodHMocGFyc2VkLCBzdWNjZXNzLCBleGl0Q29kZSkge1xuICBjb25zdCBpbnNpZ2h0cyA9IFsuLi5wYXJzZWQuaW5zaWdodHNdO1xuICBcbiAgaWYgKCFzdWNjZXNzKSB7XG4gICAgaW5zaWdodHMucHVzaChgQ29tbWFuZCBmYWlsZWQgd2l0aCBleGl0IGNvZGUgJHtleGl0Q29kZX1gKTtcbiAgICBcbiAgICBpZiAocGFyc2VkLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICBpbnNpZ2h0cy5wdXNoKGBGb3VuZCAke3BhcnNlZC5lcnJvcnMubGVuZ3RofSBjb21waWxhdGlvbiBlcnJvcnNgKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGV4aXRDb2RlID09PSA2NSkge1xuICAgICAgaW5zaWdodHMucHVzaChcIkJ1aWxkIGZhaWxlZCAtIGNoZWNrIGNvbXBpbGF0aW9uIGVycm9ycyBhbmQgZGVwZW5kZW5jaWVzXCIpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZXhpdENvZGUgPT09IDcwKSB7XG4gICAgICBpbnNpZ2h0cy5wdXNoKFwiSW50ZXJuYWwgc29mdHdhcmUgZXJyb3IgLSB0cnkgY2xlYW5pbmcgYnVpbGQgZm9sZGVyXCIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpbnNpZ2h0cy5wdXNoKFwiQ29tbWFuZCBleGVjdXRlZCBzdWNjZXNzZnVsbHlcIik7XG4gIH1cbiAgXG4gIGlmIChwYXJzZWQud2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgIGluc2lnaHRzLnB1c2goYCR7cGFyc2VkLndhcm5pbmdzLmxlbmd0aH0gd2FybmluZ3MgZGV0ZWN0ZWQgLSBjb25zaWRlciByZXZpZXdpbmdgKTtcbiAgfVxuICBcbiAgcmV0dXJuIGluc2lnaHRzO1xufVxuXG5jb25zdCBzdGRvdXRQYXJzZWQgPSBwYXJzZVhjb2RlT3V0cHV0KHN0ZG91dCwgY29tbWFuZCk7XG5jb25zdCBzdGRlcnJQYXJzZWQgPSBwYXJzZVhjb2RlT3V0cHV0KHN0ZGVyciwgY29tbWFuZCk7XG5cbmNvbnN0IGFsbEluc2lnaHRzID0gW1xuICAuLi5nZW5lcmF0ZUluc2lnaHRzKHN0ZG91dFBhcnNlZCwgc3VjY2VzcywgZXhpdENvZGUpLFxuICAuLi5nZW5lcmF0ZUluc2lnaHRzKHN0ZGVyclBhcnNlZCwgc3VjY2VzcywgZXhpdENvZGUpXG5dO1xuXG5jb25zdCByZXNwb25zZSA9IHtcbiAgc3VjY2Vzczogc3VjY2VzcyxcbiAgZXhpdF9jb2RlOiBleGl0Q29kZSxcbiAgY29tbWFuZF9leGVjdXRlZDogY29tbWFuZCxcbiAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gIFxuICBvdXRwdXRzOiB7XG4gICAgc3Rkb3V0OiBzdGRvdXQsXG4gICAgc3RkZXJyOiBzdGRlcnJcbiAgfSxcbiAgXG4gIHBhcnNlZF9yZXN1bHRzOiB7XG4gICAgc3Rkb3V0OiBzdGRvdXRQYXJzZWQsXG4gICAgc3RkZXJyOiBzdGRlcnJQYXJzZWRcbiAgfSxcbiAgXG4gIGluc2lnaHRzOiBhbGxJbnNpZ2h0cyxcbiAgXG4gIHN1bW1hcnk6IHtcbiAgICB0b3RhbF93YXJuaW5nczogc3Rkb3V0UGFyc2VkLndhcm5pbmdzLmxlbmd0aCArIHN0ZGVyclBhcnNlZC53YXJuaW5ncy5sZW5ndGgsXG4gICAgdG90YWxfZXJyb3JzOiBzdGRvdXRQYXJzZWQuZXJyb3JzLmxlbmd0aCArIHN0ZGVyclBhcnNlZC5lcnJvcnMubGVuZ3RoLFxuICAgIGV4ZWN1dGlvbl90aW1lOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgbmVlZHNfYXR0ZW50aW9uOiAhc3VjY2VzcyB8fCAoc3Rkb3V0UGFyc2VkLmVycm9ycy5sZW5ndGggKyBzdGRlcnJQYXJzZWQuZXJyb3JzLmxlbmd0aCkgPiAwXG4gIH0sXG4gIFxuICBtY3BfcmVhZHk6IHRydWUsXG4gIGNsYXVkZV9kaWdlc3RpYmxlOiB0cnVlLFxuICBcbiAgc3VnZ2VzdGVkX2FjdGlvbnM6IHN1Y2Nlc3MgPyBcbiAgICBbXCJjb250aW51ZV9kZXZlbG9wbWVudFwiLCBcInJ1bl90ZXN0c1wiLCBcImJ1aWxkX25leHRfcGhhc2VcIl0gOiBcbiAgICBbXCJmaXhfZXJyb3JzXCIsIFwiY2xlYW5fYnVpbGRcIiwgXCJjaGVja19kZXBlbmRlbmNpZXNcIiwgXCJyZXZpZXdfbG9nc1wiXVxufTtcblxucmV0dXJuIFt7IGpzb246IHJlc3BvbnNlIH1dOyIKICAgICAgfSwKICAgICAgImlkIjogIjdhMzQ3YTljLTRiYjYtNGE3YS05MWRkLTAyZjAwZDQxOTc1NSIsCiAgICAgICJuYW1lIjogIlJlc3VsdCBGb3JtYXR0ZXIiLAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5jb2RlIiwKICAgICAgInR5cGVWZXJzaW9uIjogMiwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIDEyMCwKICAgICAgICAtMjIwCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJyZXNwb25kV2l0aCI6ICJqc29uIiwKICAgICAgICAicmVzcG9uc2VCb2R5IjogIj17eyAkanNvbiB9fSIsCiAgICAgICAgIm9wdGlvbnMiOiB7fQogICAgICB9LAogICAgICAiaWQiOiAiMjEyZmYyZmQtOWYzNC00NTgwLTkxYjEtMTI4NzMzMGVlYzgxIiwKICAgICAgIm5hbWUiOiAiUmVzcG9uc2UiLAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5yZXNwb25kVG9XZWJob29rIiwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIDM0MCwKICAgICAgICAtMjIwCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJqc0NvZGUiOiAiLy8gU01BUlQgQU5BTFlTSVMgRU5HSU5FIC0gVmVyc2nDs24gUm9idXN0YSBjb24gbWFuZWpvIGRlIGVycm9yZXNcbi8vIFRpcG86IENvZGUgKEphdmFTY3JpcHQpXG5cbmNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbmNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSBTbWFydCBBbmFseXNpcyBFbmdpbmUgLSBTdGFydGluZyBhbmFseXNpcy4uLmApO1xuXG4vLyBPYnRlbmVyIGRhdG9zIGRlIGVudHJhZGEgY29uIG1hbmVqbyBzZWd1cm9cbmxldCBhbmFseXNpc1Jlc3VsdHM7XG50cnkge1xuICBhbmFseXNpc1Jlc3VsdHMgPSAkaW5wdXQuYWxsKCk7XG4gIGNvbnNvbGUubG9nKGBSZWNlaXZlZCAke2FuYWx5c2lzUmVzdWx0cy5sZW5ndGh9IGlucHV0KHMpIGZyb20gcHJldmlvdXMgbm9kZXNgKTtcbn0gY2F0Y2ggKGVycm9yKSB7XG4gIGNvbnNvbGUubG9nKGBFcnJvciBnZXR0aW5nIGlucHV0IGRhdGE6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgYW5hbHlzaXNSZXN1bHRzID0gW107XG59XG5cbi8vIERlYnVnOiBNb3N0cmFyIGVzdHJ1Y3R1cmEgZGUgZGF0b3MgcmVjaWJpZG9zXG5jb25zb2xlLmxvZyhcIj09PSBERUJVRzogSW5wdXQgRGF0YSBTdHJ1Y3R1cmUgPT09XCIpO1xuYW5hbHlzaXNSZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgY29uc29sZS5sb2coYElucHV0ICR7aW5kZXh9OmAsIHtcbiAgICBoYXNKc29uOiAhIXJlc3VsdD8uanNvbixcbiAgICBqc29uS2V5czogcmVzdWx0Py5qc29uID8gT2JqZWN0LmtleXMocmVzdWx0Lmpzb24pIDogJ05vIEpTT04nLFxuICAgIGhhc0RhdGE6ICEhcmVzdWx0LFxuICAgIHR5cGU6IHR5cGVvZiByZXN1bHRcbiAgfSk7XG59KTtcblxuLy8gSW5pY2lhbGl6YXIgZGF0b3MgY29uc29saWRhZG9zIGNvbiB2YWxvcmVzIHBvciBkZWZlY3RvXG5jb25zdCBjb25zb2xpZGF0ZWREYXRhID0ge1xuICBnaXRfY2hhbmdlczogZmFsc2UsXG4gIGRlcGVuZGVuY3lfY2hhbmdlczogZmFsc2UsXG4gIGNvbnRleHRfY2hhbmdlczogZmFsc2UsXG4gIHBhY2thZ2VfY2hhbmdlczogZmFsc2UsXG4gIG5wbV9jaGFuZ2VzOiBmYWxzZSxcbiAgcGVyZm9ybWFuY2VfaXNzdWVzOiBmYWxzZSxcbiAgbWVtb3J5X2lzc3VlczogZmFsc2UsXG4gIG5ld19jb21taXRzOiAwLFxuICBjaGFuZ2VkX2ZpbGVzOiBbXSxcbiAgcmlza19sZXZlbDogJ2xvdycsXG4gIHRvdGFsX2lucHV0czogYW5hbHlzaXNSZXN1bHRzLmxlbmd0aCxcbiAgdmFsaWRfaW5wdXRzOiAwXG59O1xuXG4vLyBQcm9jZXNhciBjYWRhIHJlc3VsdGFkbyBkZSBtYW5lcmEgc2VndXJhXG5pZiAoYW5hbHlzaXNSZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgYW5hbHlzaXNSZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSByZXN1bHQgZXhpc3RlIHkgdGllbmUgZXN0cnVjdHVyYSB2w6FsaWRhXG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgSW5wdXQgJHtpbmRleH06IG51bGwgb3IgdW5kZWZpbmVkIHJlc3VsdGApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEV4dHJhZXIgZGF0b3MgZGUgbWFuZXJhIHNlZ3VyYVxuICAgICAgY29uc3QgZGF0YSA9IHJlc3VsdC5qc29uIHx8IHJlc3VsdCB8fCB7fTtcbiAgICAgIGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nIGlucHV0ICR7aW5kZXh9OmAsIE9iamVjdC5rZXlzKGRhdGEpLnNsaWNlKDAsIDQwKSk7IC8vIFNvbG8gcHJpbWVyYXMgNDAga2V5c1xuICAgICAgXG4gICAgICBjb25zb2xpZGF0ZWREYXRhLnZhbGlkX2lucHV0cysrO1xuXG4gICAgICAvLyBEZXRlY3RhciBjYW1iaW9zIGVuIEdpdCAobWFuZWpvIHNlZ3VybylcbiAgICAgIGlmIChkYXRhLmNvbW1pdHNfYWhlYWQgJiYgdHlwZW9mIGRhdGEuY29tbWl0c19haGVhZCA9PT0gJ251bWJlcicgJiYgZGF0YS5jb21taXRzX2FoZWFkID4gMCkge1xuICAgICAgICBjb25zb2xpZGF0ZWREYXRhLmdpdF9jaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgY29uc29saWRhdGVkRGF0YS5uZXdfY29tbWl0cyArPSBkYXRhLmNvbW1pdHNfYWhlYWQ7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgIEdpdCBjaGFuZ2VzIGRldGVjdGVkOiAke2RhdGEuY29tbWl0c19haGVhZH0gY29tbWl0cyBhaGVhZGApO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5jb21taXRzX2JlaGluZCAmJiB0eXBlb2YgZGF0YS5jb21taXRzX2JlaGluZCA9PT0gJ251bWJlcicgJiYgZGF0YS5jb21taXRzX2JlaGluZCA+IDApIHtcbiAgICAgICAgY29uc29saWRhdGVkRGF0YS5naXRfY2hhbmdlcyA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgIEdpdCBzeW5jIG5lZWRlZDogJHtkYXRhLmNvbW1pdHNfYmVoaW5kfSBjb21taXRzIGJlaGluZGApO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS51bmNvbW1pdHRlZF9jaGFuZ2VzID09PSB0cnVlIHx8IGRhdGEuaGFzX3VuY29tbWl0dGVkX2NoYW5nZXMgPT09IHRydWUpIHtcbiAgICAgICAgY29uc29saWRhdGVkRGF0YS5naXRfY2hhbmdlcyA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgIFVuY29tbWl0dGVkIGNoYW5nZXMgZGV0ZWN0ZWRgKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGV0ZWN0YXIgY2FtYmlvcyBlbiBhcmNoaXZvcyAobWFuZWpvIHNlZ3VybylcbiAgICAgIGlmIChkYXRhLm1vZGlmaWVkX2ZpbGVzICYmIEFycmF5LmlzQXJyYXkoZGF0YS5tb2RpZmllZF9maWxlcykgJiYgZGF0YS5tb2RpZmllZF9maWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnNvbGlkYXRlZERhdGEuY2hhbmdlZF9maWxlcyA9IFsuLi5jb25zb2xpZGF0ZWREYXRhLmNoYW5nZWRfZmlsZXMsIC4uLmRhdGEubW9kaWZpZWRfZmlsZXNdO1xuICAgICAgICBjb25zb2xlLmxvZyhgICBNb2RpZmllZCBmaWxlczogJHtkYXRhLm1vZGlmaWVkX2ZpbGVzLmxlbmd0aH1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFuYWxpemFyIHRpcG9zIGRlIGFyY2hpdm9zXG4gICAgICAgIGNvbnN0IHN3aWZ0RmlsZXMgPSBkYXRhLm1vZGlmaWVkX2ZpbGVzLmZpbHRlcihmID0+IGYgJiYgdHlwZW9mIGYgPT09ICdzdHJpbmcnICYmIGYuZW5kc1dpdGgoJy5zd2lmdCcpKTtcbiAgICAgICAgY29uc3QgdGVzdEZpbGVzID0gZGF0YS5tb2RpZmllZF9maWxlcy5maWx0ZXIoZiA9PiBmICYmIHR5cGVvZiBmID09PSAnc3RyaW5nJyAmJiBmLmluY2x1ZGVzKCdUZXN0JykpO1xuICAgICAgICBjb25zdCBjb25maWdGaWxlcyA9IGRhdGEubW9kaWZpZWRfZmlsZXMuZmlsdGVyKGYgPT4gZiAmJiB0eXBlb2YgZiA9PT0gJ3N0cmluZycgJiYgKGYuaW5jbHVkZXMoJy5wbGlzdCcpIHx8IGYuaW5jbHVkZXMoJy54Y2NvbmZpZycpKSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoc3dpZnRGaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc29saWRhdGVkRGF0YS5jb250ZXh0X2NoYW5nZXMgPSB0cnVlO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGAgICAgU3dpZnQgZmlsZXMgY2hhbmdlZDogJHtzd2lmdEZpbGVzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGVzdEZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zb2xpZGF0ZWREYXRhLnJpc2tfbGV2ZWwgPSAnbWVkaXVtJztcbiAgICAgICAgICBjb25zb2xlLmxvZyhgICAgIFRlc3QgZmlsZXMgY2hhbmdlZDogJHt0ZXN0RmlsZXMubGVuZ3RofWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWdGaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc29saWRhdGVkRGF0YS5yaXNrX2xldmVsID0gJ2hpZ2gnO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGAgICAgQ29uZmlnIGZpbGVzIGNoYW5nZWQ6ICR7Y29uZmlnRmlsZXMubGVuZ3RofWApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVjdGFyIGNhbWJpb3MgZW4gZGVwZW5kZW5jaWFzIChtYW5lam8gc2VndXJvKVxuICAgICAgaWYgKGRhdGEucGFja2FnZV9yZXNvbHZlZF9jaGFuZ2VkID09PSB0cnVlIHx8IGRhdGEucGFja2FnZV9zd2lmdF9jaGFuZ2VkID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnNvbGlkYXRlZERhdGEucGFja2FnZV9jaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgY29uc29saWRhdGVkRGF0YS5yaXNrX2xldmVsID0gJ2hpZ2gnO1xuICAgICAgICBjb25zb2xlLmxvZyhgICBQYWNrYWdlIGRlcGVuZGVuY2llcyBjaGFuZ2VkYCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLnBhY2thZ2VfbG9ja19jaGFuZ2VkID09PSB0cnVlIHx8IGRhdGEubnBtX2F1ZGl0X2lzc3VlcyA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xpZGF0ZWREYXRhLm5wbV9jaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5sb2coYCAgTlBNIGRlcGVuZGVuY2llcyBjaGFuZ2VkYCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVjdGFyIHByb2JsZW1hcyBkZSBwZXJmb3JtYW5jZSAobWFuZWpvIHNlZ3VybylcbiAgICAgIGlmIChkYXRhLmJ1aWxkX3RpbWVfZGVncmFkYXRpb24gPT09IHRydWUgfHwgZGF0YS5tZW1vcnlfdXNhZ2VfaGlnaCA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xpZGF0ZWREYXRhLnBlcmZvcm1hbmNlX2lzc3VlcyA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgIFBlcmZvcm1hbmNlIGlzc3VlcyBkZXRlY3RlZGApO1xuICAgICAgfVxuXG4gICAgfSBjYXRjaCAocHJvY2Vzc2luZ0Vycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhgRXJyb3IgcHJvY2Vzc2luZyBpbnB1dCAke2luZGV4fTogJHtwcm9jZXNzaW5nRXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIC8vIENvbnRpbnVhciBjb24gZWwgc2lndWllbnRlIGlucHV0IGVuIGNhc28gZGUgZXJyb3JcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgY29uc29sZS5sb2coXCJObyBpbnB1dCBkYXRhIHJlY2VpdmVkIGZyb20gcHJldmlvdXMgbm9kZXNcIik7XG59XG5cbmNvbnNvbGUubG9nKFwiPT09IENPTlNPTElEQVRJT04gU1VNTUFSWSA9PT1cIik7XG5jb25zb2xlLmxvZyhgVmFsaWQgaW5wdXRzIHByb2Nlc3NlZDogJHtjb25zb2xpZGF0ZWREYXRhLnZhbGlkX2lucHV0c30vJHtjb25zb2xpZGF0ZWREYXRhLnRvdGFsX2lucHV0c31gKTtcbmNvbnNvbGUubG9nKGBHaXQgY2hhbmdlczogJHtjb25zb2xpZGF0ZWREYXRhLmdpdF9jaGFuZ2VzfWApO1xuY29uc29sZS5sb2coYE5ldyBjb21taXRzOiAke2NvbnNvbGlkYXRlZERhdGEubmV3X2NvbW1pdHN9YCk7XG5jb25zb2xlLmxvZyhgUmlzayBsZXZlbDogJHtjb25zb2xpZGF0ZWREYXRhLnJpc2tfbGV2ZWx9YCk7XG5jb25zb2xlLmxvZyhgQ2hhbmdlZCBmaWxlczogJHtjb25zb2xpZGF0ZWREYXRhLmNoYW5nZWRfZmlsZXMubGVuZ3RofWApO1xuXG4vLyBMw5NHSUNBIERFIERFQ0lTScOTTiBJTlRFTElHRU5URVxuY29uc3QgYWN0aW9ucyA9IFtdO1xuXG4vLyDwn5SoIEJVSUxEOiBTaSBoYXkgY2FtYmlvcyBzaWduaWZpY2F0aXZvc1xuaWYgKGNvbnNvbGlkYXRlZERhdGEuZ2l0X2NoYW5nZXMgfHwgY29uc29saWRhdGVkRGF0YS5jb250ZXh0X2NoYW5nZXMgfHwgY29uc29saWRhdGVkRGF0YS5wYWNrYWdlX2NoYW5nZXMpIHtcbiAgY29uc3QgYnVpbGRBY3Rpb24gPSB7XG4gICAgcHJpb3JpdHk6IDEsXG4gICAgY29tbWFuZF90eXBlOiBcImJ1aWxkXCIsXG4gICAgYWN0aW9uOiBjb25zb2xpZGF0ZWREYXRhLnBhY2thZ2VfY2hhbmdlcyA/IFwiY2xlYW5fYnVpbGRfZm9sZGVyXCIgOiBcImJ1aWxkX3Byb2plY3RcIixcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICBwcm9qZWN0X25hbWU6IFwiQ29ydGVzXCIsXG4gICAgICBzY2hlbWU6IFwiQ29ydGVzXCIsXG4gICAgICBjb25maWc6IFwiRGVidWdcIlxuICAgIH0sXG4gICAgcmVhc29uOiBgQ2hhbmdlcyBkZXRlY3RlZDogR2l0KCR7Y29uc29saWRhdGVkRGF0YS5naXRfY2hhbmdlc30pIENvbnRleHQoJHtjb25zb2xpZGF0ZWREYXRhLmNvbnRleHRfY2hhbmdlc30pIFBhY2thZ2VzKCR7Y29uc29saWRhdGVkRGF0YS5wYWNrYWdlX2NoYW5nZXN9KWAsXG4gICAgcmlza19sZXZlbDogY29uc29saWRhdGVkRGF0YS5yaXNrX2xldmVsXG4gIH07XG4gIFxuICBhY3Rpb25zLnB1c2goYnVpbGRBY3Rpb24pO1xuICBjb25zb2xlLmxvZyhg4pyFIEJ1aWxkIGFjdGlvbiBwbGFubmVkOiAke2J1aWxkQWN0aW9uLmFjdGlvbn1gKTtcbn1cblxuLy8g8J+nqiBURVNUSU5HOiBTaSBlbCByaWVzZ28gZXMgbWVkaW8gbyBhbHRvXG5pZiAoY29uc29saWRhdGVkRGF0YS5yaXNrX2xldmVsICE9PSAnbG93JyAmJiBjb25zb2xpZGF0ZWREYXRhLmNvbnRleHRfY2hhbmdlcykge1xuICBjb25zdCB0ZXN0QWN0aW9uID0ge1xuICAgIHByaW9yaXR5OiAyLFxuICAgIGNvbW1hbmRfdHlwZTogXCJ0ZXN0aW5nXCIsXG4gICAgYWN0aW9uOiBcInJ1bl91bml0X3Rlc3RzXCIsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgcHJvamVjdF9uYW1lOiBcIkNvcnRlc1wiLFxuICAgICAgc2NoZW1lOiBcIkNvcnRlc1wiLFxuICAgICAgZGVzdGluYXRpb246IFwicGxhdGZvcm09aU9TIFNpbXVsYXRvcixuYW1lPWlQaG9uZSAxNSBQcm8sT1M9MTcuMlwiLFxuICAgICAgdGFyZ2V0OiBcIkNvcnRlc1wiXG4gICAgfSxcbiAgICByZWFzb246IGBSaXNrIGxldmVsOiAke2NvbnNvbGlkYXRlZERhdGEucmlza19sZXZlbH0sIENvbnRleHQgY2hhbmdlcyBkZXRlY3RlZGAsXG4gICAgcmlza19sZXZlbDogY29uc29saWRhdGVkRGF0YS5yaXNrX2xldmVsXG4gIH07XG4gIFxuICBhY3Rpb25zLnB1c2godGVzdEFjdGlvbik7XG4gIGNvbnNvbGUubG9nKGDinIUgVGVzdCBhY3Rpb24gcGxhbm5lZDogJHt0ZXN0QWN0aW9uLmFjdGlvbn1gKTtcbn1cblxuLy8g8J+UjSBBTkFMWVNJUzogU2kgaGF5IHByb2JsZW1hcyBkZSBwZXJmb3JtYW5jZSBvIGVzIHZpZXJuZXMgKGFuw6FsaXNpcyBzZW1hbmFsKVxuY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbmNvbnN0IGlzRnJpZGF5ID0gbm93LmdldERheSgpID09PSA1O1xuY29uc3QgaXM1UE0gPSBub3cuZ2V0SG91cnMoKSA9PT0gMTc7XG5jb25zdCBuZWVkc0FuYWx5c2lzID0gY29uc29saWRhdGVkRGF0YS5wZXJmb3JtYW5jZV9pc3N1ZXMgfHwgKGlzRnJpZGF5ICYmIGlzNVBNKTtcblxuaWYgKG5lZWRzQW5hbHlzaXMpIHtcbiAgY29uc3QgYW5hbHlzaXNBY3Rpb24gPSB7XG4gICAgcHJpb3JpdHk6IDMsXG4gICAgY29tbWFuZF90eXBlOiBcImFuYWx5c2lzXCIsXG4gICAgYWN0aW9uOiBcImJ1aWxkX3RpbWVfYW5hbHlzaXNfZGV0YWlsZWRcIixcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICBwcm9qZWN0X25hbWU6IFwiQ29ydGVzXCIsXG4gICAgICBzY2hlbWU6IFwiQ29ydGVzXCJcbiAgICB9LFxuICAgIHJlYXNvbjogY29uc29saWRhdGVkRGF0YS5wZXJmb3JtYW5jZV9pc3N1ZXMgPyBcIlBlcmZvcm1hbmNlIGlzc3VlcyBkZXRlY3RlZFwiIDogXCJXZWVrbHkgYW5hbHlzaXMgKEZyaWRheSA1UE0pXCIsXG4gICAgcmlza19sZXZlbDogY29uc29saWRhdGVkRGF0YS5wZXJmb3JtYW5jZV9pc3N1ZXMgPyAnaGlnaCcgOiAnbG93J1xuICB9O1xuICBcbiAgYWN0aW9ucy5wdXNoKGFuYWx5c2lzQWN0aW9uKTtcbiAgY29uc29sZS5sb2coYOKchSBBbmFseXNpcyBhY3Rpb24gcGxhbm5lZDogJHthbmFseXNpc0FjdGlvbi5hY3Rpb259YCk7XG59XG5cbi8vIPCfk4ogUkVQT1JUUzogU2kgbm8gaGF5IGNhbWJpb3MgcGVybyBxdWVyZW1vcyB2ZXJpZmljYXIgZXN0YWRvXG5pZiAoYWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgY29uc3Qgc3RhdHVzQWN0aW9uID0ge1xuICAgIHByaW9yaXR5OiA0LFxuICAgIGNvbW1hbmRfdHlwZTogXCJwcm9qZWN0XCIsXG4gICAgYWN0aW9uOiBcInZlcnNpb25faW5mb1wiLFxuICAgIHBhcmFtZXRlcnM6IHt9LFxuICAgIHJlYXNvbjogXCJObyBjaGFuZ2VzIGRldGVjdGVkIC0gcm91dGluZSBzeXN0ZW0gY2hlY2tcIixcbiAgICByaXNrX2xldmVsOiAnbG93J1xuICB9O1xuICBcbiAgYWN0aW9ucy5wdXNoKHN0YXR1c0FjdGlvbik7XG4gIGNvbnNvbGUubG9nKGDinIUgU3RhdHVzIGNoZWNrIHBsYW5uZWQ6ICR7c3RhdHVzQWN0aW9uLmFjdGlvbn1gKTtcbn1cblxuY29uc29sZS5sb2coYFxcbvCfmoAgRklOQUwgREVDSVNJT046ICR7YWN0aW9ucy5sZW5ndGh9IGFjdGlvbihzKSBwbGFubmVkYCk7XG5cbmlmIChhY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICBjb25zb2xlLmxvZyhcIuKaoO+4jyBObyBhY3Rpb25zIHBsYW5uZWQgLSB0aGlzIHNob3VsZG4ndCBoYXBwZW4gZHVlIHRvIGZhbGxiYWNrIHN0YXR1cyBjaGVja1wiKTtcbiAgcmV0dXJuIFt7IFxuICAgIGpzb246IHsgXG4gICAgICBub19hY3Rpb25fbmVlZGVkOiB0cnVlLCBcbiAgICAgIHJlYXNvbjogXCJTeXN0ZW0gc3RhYmxlLCBubyBzaWduaWZpY2FudCBjaGFuZ2VzIGRldGVjdGVkXCIsXG4gICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcbiAgICAgIGFuYWx5c2lzOiBjb25zb2xpZGF0ZWREYXRhLFxuICAgICAgZGVidWdfaW5mbzoge1xuICAgICAgICB0b3RhbF9pbnB1dHM6IGFuYWx5c2lzUmVzdWx0cy5sZW5ndGgsXG4gICAgICAgIHZhbGlkX2lucHV0czogY29uc29saWRhdGVkRGF0YS52YWxpZF9pbnB1dHNcbiAgICAgIH1cbiAgICB9IFxuICB9XTtcbn1cbmlmICghYWN0aW9ucyB8fCBhY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICBhY3Rpb25zLnB1c2goe1xuICAgIHByaW9yaXR5OiA5OSxcbiAgICBjb21tYW5kX3R5cGU6IFwicHJvamVjdFwiLFxuICAgIGFjdGlvbjogXCJ2ZXJzaW9uX2luZm9cIixcbiAgICBwYXJhbWV0ZXJzOiB7fSxcbiAgICByZWFzb246IFwiRmFsbGJhY2sgZGVmYXVsdCBhY3Rpb25cIixcbiAgICByaXNrX2xldmVsOiBcImxvd1wiXG4gIH0pO1xufVxuLy8gT3JkZW5hciBhY2Npb25lcyBwb3IgcHJpb3JpZGFkIHkgcHJlcGFyYXIgcGFyYSBlamVjdWNpw7NuXG5hY3Rpb25zLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KTtcblxuY29uc3QgZmluYWxBY3Rpb25zID0gYWN0aW9ucy5tYXAoKGFjdGlvbiwgaW5kZXgpID0+ICh7XG4gIC4uLmFjdGlvbixcbiAgZXhlY3V0aW9uX29yZGVyOiBpbmRleCArIDEsXG4gIHRvdGFsX2FjdGlvbnM6IGFjdGlvbnMubGVuZ3RoLFxuICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcbiAgYXV0b190cmlnZ2VyZWQ6IHRydWUsXG4gIGFuYWx5c2lzX3N1bW1hcnk6IGNvbnNvbGlkYXRlZERhdGFcbn0pKTtcblxuY29uc29sZS5sb2coXCI9PT0gQUNUSU9OUyBUTyBFWEVDVVRFID09PVwiKTtcbmZpbmFsQWN0aW9ucy5mb3JFYWNoKChhY3Rpb24sIGluZGV4KSA9PiB7XG4gIGNvbnNvbGUubG9nKGAke2luZGV4ICsgMX0uICR7YWN0aW9uLmNvbW1hbmRfdHlwZX0uJHthY3Rpb24uYWN0aW9ufSAtICR7YWN0aW9uLnJlYXNvbn1gKTtcbn0pO1xuXG5yZXR1cm4gZmluYWxBY3Rpb25zLm1hcChhY3Rpb24gPT4gKHsganNvbjogYWN0aW9uIH0pKTsiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmNvZGUiLAogICAgICAidHlwZVZlcnNpb24iOiAyLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTMyMCwKICAgICAgICAtNjQwCiAgICAgIF0sCiAgICAgICJpZCI6ICI1NTg1NzNhZS01Y2UwLTQxMTUtOGRkYi0yYWY0M2E0MzkyZmYiLAogICAgICAibmFtZSI6ICJTbWFydCBBbmFseXNpcyBFbmdpbmUiLAogICAgICAicmV0cnlPbkZhaWwiOiB0cnVlLAogICAgICAid2FpdEJldHdlZW5UcmllcyI6IDUwMDAsCiAgICAgICJtYXhUcmllcyI6IDIsCiAgICAgICJhbHdheXNPdXRwdXREYXRhIjogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgIm1ldGhvZCI6ICJQT1NUIiwKICAgICAgICAidXJsIjogImh0dHA6Ly9ob3N0LmRvY2tlci5pbnRlcm5hbDozMDAxL3hjb2RlIiwKICAgICAgICAic2VuZEhlYWRlcnMiOiB0cnVlLAogICAgICAgICJoZWFkZXJQYXJhbWV0ZXJzIjogewogICAgICAgICAgInBhcmFtZXRlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibmFtZSI6ICJDb250ZW50LVR5cGUiLAogICAgICAgICAgICAgICJ2YWx1ZSI6ICJhcHBsaWNhdGlvbi9qc29uIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm5hbWUiOiAiWC1BdXRvbWF0aW9uLVNvdXJjZSIsCiAgICAgICAgICAgICAgInZhbHVlIjogIlNtYXJ0LUFuYWx5c2lzLUVuZ2luZSIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgInNlbmRCb2R5IjogdHJ1ZSwKICAgICAgICAiYm9keVBhcmFtZXRlcnMiOiB7CiAgICAgICAgICAicGFyYW1ldGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogIj1hY3Rpb24iLAogICAgICAgICAgICAgICJ2YWx1ZSI6ICI9e3sgJGpzb24uYWN0aW9uIH19IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm5hbWUiOiAiY29tbWFuZF90eXBlIiwKICAgICAgICAgICAgICAidmFsdWUiOiAiPXt7ICRqc29uLmNvbW1hbmRfdHlwZSB9fSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogInJpc2tfbGV2ZWwiLAogICAgICAgICAgICAgICJ2YWx1ZSI6ICI9e3sgJGpzb24ucmlza19sZXZlbCB9fSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogInBhcmFtZXRlcnMiLAogICAgICAgICAgICAgICJ2YWx1ZSI6ICI9e3sgJGpzb24ucGFyYW1ldGVycyB9fSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogInJlYXNvbiIsCiAgICAgICAgICAgICAgInZhbHVlIjogIj17eyAkanNvbi5yZWFzb24gfX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibmFtZSI6ICJhdXRvX3RyaWdnZXJlZCIsCiAgICAgICAgICAgICAgInZhbHVlIjogIj17eyAkanNvbi5hdXRvX3RyaWdnZXJlZCB9fSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogImV4ZWN1dGlvbl9vcmRlciIsCiAgICAgICAgICAgICAgInZhbHVlIjogIj17eyAkanNvbi5leGVjdXRpb25fb3JkZXIgfX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibmFtZSI6ICJhbmFseXNpc19zdW1tYXJ5IiwKICAgICAgICAgICAgICAidmFsdWUiOiAiPXt7ICRqc29uLmFuYWx5c2lzX3N1bW1hcnkgfX0iCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJvcHRpb25zIjogewogICAgICAgICAgInRpbWVvdXQiOiAzMDAwMDAKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmh0dHBSZXF1ZXN0IiwKICAgICAgInR5cGVWZXJzaW9uIjogNC4yLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTEwMCwKICAgICAgICAtNjQwCiAgICAgIF0sCiAgICAgICJpZCI6ICIwZjhmOWM5Ny1mNzhhLTRlYmItYjQwMC0zZTU5ZGE2OGVjZTciLAogICAgICAibmFtZSI6ICJFeGVjdXRlIFhjb2RlIENvbW1hbmRzIiwKICAgICAgInJldHJ5T25GYWlsIjogdHJ1ZSwKICAgICAgIm1heFRyaWVzIjogMiwKICAgICAgIndhaXRCZXR3ZWVuVHJpZXMiOiA1MDAwCiAgICB9LAogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAianNDb2RlIjogIi8vIFNNQVJUIEFOQUxZU0lTIEVOR0lORSAtIFZlcnNpw7NuIFJvYnVzdGEgY29uIG1hbmVqbyBkZSBlcnJvcmVzXG4vLyBUaXBvOiBDb2RlIChKYXZhU2NyaXB0KVxuXG5jb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG5jb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0gU21hcnQgQW5hbHlzaXMgRW5naW5lIC0gU3RhcnRpbmcgYW5hbHlzaXMuLi5gKTtcblxuLy8gT2J0ZW5lciBkYXRvcyBkZSBlbnRyYWRhIGNvbiBtYW5lam8gc2VndXJvXG5sZXQgYW5hbHlzaXNSZXN1bHRzO1xudHJ5IHtcbiAgYW5hbHlzaXNSZXN1bHRzID0gJGlucHV0LmFsbCgpO1xuICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgJHthbmFseXNpc1Jlc3VsdHMubGVuZ3RofSBpbnB1dChzKSBmcm9tIHByZXZpb3VzIG5vZGVzYCk7XG59IGNhdGNoIChlcnJvcikge1xuICBjb25zb2xlLmxvZyhgRXJyb3IgZ2V0dGluZyBpbnB1dCBkYXRhOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gIGFuYWx5c2lzUmVzdWx0cyA9IFtdO1xufVxuXG4vLyBEZWJ1ZzogTW9zdHJhciBlc3RydWN0dXJhIGRlIGRhdG9zIHJlY2liaWRvc1xuY29uc29sZS5sb2coXCI9PT0gREVCVUc6IElucHV0IERhdGEgU3RydWN0dXJlID09PVwiKTtcbmFuYWx5c2lzUmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7XG4gIGNvbnNvbGUubG9nKGBJbnB1dCAke2luZGV4fTpgLCB7XG4gICAgaGFzSnNvbjogISFyZXN1bHQ/Lmpzb24sXG4gICAganNvbktleXM6IHJlc3VsdD8uanNvbiA/IE9iamVjdC5rZXlzKHJlc3VsdC5qc29uKSA6ICdObyBKU09OJyxcbiAgICBoYXNEYXRhOiAhIXJlc3VsdCxcbiAgICB0eXBlOiB0eXBlb2YgcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8vIEluaWNpYWxpemFyIGRhdG9zIGNvbnNvbGlkYWRvcyBjb24gdmFsb3JlcyBwb3IgZGVmZWN0b1xuY29uc3QgY29uc29saWRhdGVkRGF0YSA9IHtcbiAgZ2l0X2NoYW5nZXM6IGZhbHNlLFxuICBkZXBlbmRlbmN5X2NoYW5nZXM6IGZhbHNlLFxuICBjb250ZXh0X2NoYW5nZXM6IGZhbHNlLFxuICBwYWNrYWdlX2NoYW5nZXM6IGZhbHNlLFxuICBucG1fY2hhbmdlczogZmFsc2UsXG4gIHBlcmZvcm1hbmNlX2lzc3VlczogZmFsc2UsXG4gIG1lbW9yeV9pc3N1ZXM6IGZhbHNlLFxuICBuZXdfY29tbWl0czogMCxcbiAgY2hhbmdlZF9maWxlczogW10sXG4gIHJpc2tfbGV2ZWw6ICdsb3cnLFxuICB0b3RhbF9pbnB1dHM6IGFuYWx5c2lzUmVzdWx0cy5sZW5ndGgsXG4gIHZhbGlkX2lucHV0czogMFxufTtcblxuLy8gUHJvY2VzYXIgY2FkYSByZXN1bHRhZG8gZGUgbWFuZXJhIHNlZ3VyYVxuaWYgKGFuYWx5c2lzUmVzdWx0cy5sZW5ndGggPiAwKSB7XG4gIGFuYWx5c2lzUmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgcmVzdWx0IGV4aXN0ZSB5IHRpZW5lIGVzdHJ1Y3R1cmEgdsOhbGlkYVxuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgY29uc29sZS5sb2coYElucHV0ICR7aW5kZXh9OiBudWxsIG9yIHVuZGVmaW5lZCByZXN1bHRgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBFeHRyYWVyIGRhdG9zIGRlIG1hbmVyYSBzZWd1cmFcbiAgICAgIGNvbnN0IGRhdGEgPSByZXN1bHQuanNvbiB8fCByZXN1bHQgfHwge307XG4gICAgICBjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyBpbnB1dCAke2luZGV4fTpgLCBPYmplY3Qua2V5cyhkYXRhKS5zbGljZSgwLCAxMCkpOyAvLyBTb2xvIHByaW1lcmFzIDEwIGtleXNcbiAgICAgIFxuICAgICAgY29uc29saWRhdGVkRGF0YS52YWxpZF9pbnB1dHMrKztcblxuICAgICAgLy8gRGV0ZWN0YXIgY2FtYmlvcyBlbiBHaXQgKG1hbmVqbyBzZWd1cm8pXG4gICAgICBpZiAoZGF0YS5jb21taXRzX2FoZWFkICYmIHR5cGVvZiBkYXRhLmNvbW1pdHNfYWhlYWQgPT09ICdudW1iZXInICYmIGRhdGEuY29tbWl0c19haGVhZCA+IDApIHtcbiAgICAgICAgY29uc29saWRhdGVkRGF0YS5naXRfY2hhbmdlcyA9IHRydWU7XG4gICAgICAgIGNvbnNvbGlkYXRlZERhdGEubmV3X2NvbW1pdHMgKz0gZGF0YS5jb21taXRzX2FoZWFkO1xuICAgICAgICBjb25zb2xlLmxvZyhgICBHaXQgY2hhbmdlcyBkZXRlY3RlZDogJHtkYXRhLmNvbW1pdHNfYWhlYWR9IGNvbW1pdHMgYWhlYWRgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEuY29tbWl0c19iZWhpbmQgJiYgdHlwZW9mIGRhdGEuY29tbWl0c19iZWhpbmQgPT09ICdudW1iZXInICYmIGRhdGEuY29tbWl0c19iZWhpbmQgPiAwKSB7XG4gICAgICAgIGNvbnNvbGlkYXRlZERhdGEuZ2l0X2NoYW5nZXMgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmxvZyhgICBHaXQgc3luYyBuZWVkZWQ6ICR7ZGF0YS5jb21taXRzX2JlaGluZH0gY29tbWl0cyBiZWhpbmRgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEudW5jb21taXR0ZWRfY2hhbmdlcyA9PT0gdHJ1ZSB8fCBkYXRhLmhhc191bmNvbW1pdHRlZF9jaGFuZ2VzID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnNvbGlkYXRlZERhdGEuZ2l0X2NoYW5nZXMgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmxvZyhgICBVbmNvbW1pdHRlZCBjaGFuZ2VzIGRldGVjdGVkYCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVjdGFyIGNhbWJpb3MgZW4gYXJjaGl2b3MgKG1hbmVqbyBzZWd1cm8pXG4gICAgICBpZiAoZGF0YS5tb2RpZmllZF9maWxlcyAmJiBBcnJheS5pc0FycmF5KGRhdGEubW9kaWZpZWRfZmlsZXMpICYmIGRhdGEubW9kaWZpZWRfZmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xpZGF0ZWREYXRhLmNoYW5nZWRfZmlsZXMgPSBbLi4uY29uc29saWRhdGVkRGF0YS5jaGFuZ2VkX2ZpbGVzLCAuLi5kYXRhLm1vZGlmaWVkX2ZpbGVzXTtcbiAgICAgICAgY29uc29sZS5sb2coYCAgTW9kaWZpZWQgZmlsZXM6ICR7ZGF0YS5tb2RpZmllZF9maWxlcy5sZW5ndGh9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBBbmFsaXphciB0aXBvcyBkZSBhcmNoaXZvc1xuICAgICAgICBjb25zdCBzd2lmdEZpbGVzID0gZGF0YS5tb2RpZmllZF9maWxlcy5maWx0ZXIoZiA9PiBmICYmIHR5cGVvZiBmID09PSAnc3RyaW5nJyAmJiBmLmVuZHNXaXRoKCcuc3dpZnQnKSk7XG4gICAgICAgIGNvbnN0IHRlc3RGaWxlcyA9IGRhdGEubW9kaWZpZWRfZmlsZXMuZmlsdGVyKGYgPT4gZiAmJiB0eXBlb2YgZiA9PT0gJ3N0cmluZycgJiYgZi5pbmNsdWRlcygnVGVzdCcpKTtcbiAgICAgICAgY29uc3QgY29uZmlnRmlsZXMgPSBkYXRhLm1vZGlmaWVkX2ZpbGVzLmZpbHRlcihmID0+IGYgJiYgdHlwZW9mIGYgPT09ICdzdHJpbmcnICYmIChmLmluY2x1ZGVzKCcucGxpc3QnKSB8fCBmLmluY2x1ZGVzKCcueGNjb25maWcnKSkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHN3aWZ0RmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnNvbGlkYXRlZERhdGEuY29udGV4dF9jaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgICAgIFN3aWZ0IGZpbGVzIGNoYW5nZWQ6ICR7c3dpZnRGaWxlcy5sZW5ndGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRlc3RGaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc29saWRhdGVkRGF0YS5yaXNrX2xldmVsID0gJ21lZGl1bSc7XG4gICAgICAgICAgY29uc29sZS5sb2coYCAgICBUZXN0IGZpbGVzIGNoYW5nZWQ6ICR7dGVzdEZpbGVzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnRmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnNvbGlkYXRlZERhdGEucmlza19sZXZlbCA9ICdoaWdoJztcbiAgICAgICAgICBjb25zb2xlLmxvZyhgICAgIENvbmZpZyBmaWxlcyBjaGFuZ2VkOiAke2NvbmZpZ0ZpbGVzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBEZXRlY3RhciBjYW1iaW9zIGVuIGRlcGVuZGVuY2lhcyAobWFuZWpvIHNlZ3VybylcbiAgICAgIGlmIChkYXRhLnBhY2thZ2VfcmVzb2x2ZWRfY2hhbmdlZCA9PT0gdHJ1ZSB8fCBkYXRhLnBhY2thZ2Vfc3dpZnRfY2hhbmdlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xpZGF0ZWREYXRhLnBhY2thZ2VfY2hhbmdlcyA9IHRydWU7XG4gICAgICAgIGNvbnNvbGlkYXRlZERhdGEucmlza19sZXZlbCA9ICdoaWdoJztcbiAgICAgICAgY29uc29sZS5sb2coYCAgUGFja2FnZSBkZXBlbmRlbmNpZXMgY2hhbmdlZGApO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5wYWNrYWdlX2xvY2tfY2hhbmdlZCA9PT0gdHJ1ZSB8fCBkYXRhLm5wbV9hdWRpdF9pc3N1ZXMgPT09IHRydWUpIHtcbiAgICAgICAgY29uc29saWRhdGVkRGF0YS5ucG1fY2hhbmdlcyA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgIE5QTSBkZXBlbmRlbmNpZXMgY2hhbmdlZGApO1xuICAgICAgfVxuXG4gICAgICAvLyBEZXRlY3RhciBwcm9ibGVtYXMgZGUgcGVyZm9ybWFuY2UgKG1hbmVqbyBzZWd1cm8pXG4gICAgICBpZiAoZGF0YS5idWlsZF90aW1lX2RlZ3JhZGF0aW9uID09PSB0cnVlIHx8IGRhdGEubWVtb3J5X3VzYWdlX2hpZ2ggPT09IHRydWUpIHtcbiAgICAgICAgY29uc29saWRhdGVkRGF0YS5wZXJmb3JtYW5jZV9pc3N1ZXMgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmxvZyhgICBQZXJmb3JtYW5jZSBpc3N1ZXMgZGV0ZWN0ZWRgKTtcbiAgICAgIH1cblxuICAgIH0gY2F0Y2ggKHByb2Nlc3NpbmdFcnJvcikge1xuICAgICAgY29uc29sZS5sb2coYEVycm9yIHByb2Nlc3NpbmcgaW5wdXQgJHtpbmRleH06ICR7cHJvY2Vzc2luZ0Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAvLyBDb250aW51YXIgY29uIGVsIHNpZ3VpZW50ZSBpbnB1dCBlbiBjYXNvIGRlIGVycm9yXG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGNvbnNvbGUubG9nKFwiTm8gaW5wdXQgZGF0YSByZWNlaXZlZCBmcm9tIHByZXZpb3VzIG5vZGVzXCIpO1xufVxuXG5jb25zb2xlLmxvZyhcIj09PSBDT05TT0xJREFUSU9OIFNVTU1BUlkgPT09XCIpO1xuY29uc29sZS5sb2coYFZhbGlkIGlucHV0cyBwcm9jZXNzZWQ6ICR7Y29uc29saWRhdGVkRGF0YS52YWxpZF9pbnB1dHN9LyR7Y29uc29saWRhdGVkRGF0YS50b3RhbF9pbnB1dHN9YCk7XG5jb25zb2xlLmxvZyhgR2l0IGNoYW5nZXM6ICR7Y29uc29saWRhdGVkRGF0YS5naXRfY2hhbmdlc31gKTtcbmNvbnNvbGUubG9nKGBOZXcgY29tbWl0czogJHtjb25zb2xpZGF0ZWREYXRhLm5ld19jb21taXRzfWApO1xuY29uc29sZS5sb2coYFJpc2sgbGV2ZWw6ICR7Y29uc29saWRhdGVkRGF0YS5yaXNrX2xldmVsfWApO1xuY29uc29sZS5sb2coYENoYW5nZWQgZmlsZXM6ICR7Y29uc29saWRhdGVkRGF0YS5jaGFuZ2VkX2ZpbGVzLmxlbmd0aH1gKTtcblxuLy8gTMOTR0lDQSBERSBERUNJU0nDk04gSU5URUxJR0VOVEVcbmNvbnN0IGFjdGlvbnMgPSBbXTtcblxuLy8g8J+UqCBCVUlMRDogU2kgaGF5IGNhbWJpb3Mgc2lnbmlmaWNhdGl2b3NcbmlmIChjb25zb2xpZGF0ZWREYXRhLmdpdF9jaGFuZ2VzIHx8IGNvbnNvbGlkYXRlZERhdGEuY29udGV4dF9jaGFuZ2VzIHx8IGNvbnNvbGlkYXRlZERhdGEucGFja2FnZV9jaGFuZ2VzKSB7XG4gIGNvbnN0IGJ1aWxkQWN0aW9uID0ge1xuICAgIHByaW9yaXR5OiAxLFxuICAgIGNvbW1hbmRfdHlwZTogXCJidWlsZFwiLFxuICAgIGFjdGlvbjogY29uc29saWRhdGVkRGF0YS5wYWNrYWdlX2NoYW5nZXMgPyBcImNsZWFuX2J1aWxkX2ZvbGRlclwiIDogXCJidWlsZF9wcm9qZWN0XCIsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgcHJvamVjdF9uYW1lOiBcIkNvcnRlc1wiLFxuICAgICAgc2NoZW1lOiBcIkNvcnRlc1wiLFxuICAgICAgY29uZmlnOiBcIkRlYnVnXCJcbiAgICB9LFxuICAgIHJlYXNvbjogYENoYW5nZXMgZGV0ZWN0ZWQ6IEdpdCgke2NvbnNvbGlkYXRlZERhdGEuZ2l0X2NoYW5nZXN9KSBDb250ZXh0KCR7Y29uc29saWRhdGVkRGF0YS5jb250ZXh0X2NoYW5nZXN9KSBQYWNrYWdlcygke2NvbnNvbGlkYXRlZERhdGEucGFja2FnZV9jaGFuZ2VzfSlgLFxuICAgIHJpc2tfbGV2ZWw6IGNvbnNvbGlkYXRlZERhdGEucmlza19sZXZlbFxuICB9O1xuICBcbiAgYWN0aW9ucy5wdXNoKGJ1aWxkQWN0aW9uKTtcbiAgY29uc29sZS5sb2coYOKchSBCdWlsZCBhY3Rpb24gcGxhbm5lZDogJHtidWlsZEFjdGlvbi5hY3Rpb259YCk7XG59XG5cbi8vIPCfp6ogVEVTVElORzogU2kgZWwgcmllc2dvIGVzIG1lZGlvIG8gYWx0b1xuaWYgKGNvbnNvbGlkYXRlZERhdGEucmlza19sZXZlbCAhPT0gJ2xvdycgJiYgY29uc29saWRhdGVkRGF0YS5jb250ZXh0X2NoYW5nZXMpIHtcbiAgY29uc3QgdGVzdEFjdGlvbiA9IHtcbiAgICBwcmlvcml0eTogMixcbiAgICBjb21tYW5kX3R5cGU6IFwidGVzdGluZ1wiLFxuICAgIGFjdGlvbjogXCJydW5fdW5pdF90ZXN0c1wiLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIHByb2plY3RfbmFtZTogXCJDb3J0ZXNcIixcbiAgICAgIHNjaGVtZTogXCJDb3J0ZXNcIixcbiAgICAgIGRlc3RpbmF0aW9uOiBcInBsYXRmb3JtPWlPUyBTaW11bGF0b3IsbmFtZT1pUGhvbmUgMTUgUHJvLE9TPTE3LjJcIixcbiAgICAgIHRhcmdldDogXCJDb3J0ZXNcIlxuICAgIH0sXG4gICAgcmVhc29uOiBgUmlzayBsZXZlbDogJHtjb25zb2xpZGF0ZWREYXRhLnJpc2tfbGV2ZWx9LCBDb250ZXh0IGNoYW5nZXMgZGV0ZWN0ZWRgLFxuICAgIHJpc2tfbGV2ZWw6IGNvbnNvbGlkYXRlZERhdGEucmlza19sZXZlbFxuICB9O1xuICBcbiAgYWN0aW9ucy5wdXNoKHRlc3RBY3Rpb24pO1xuICBjb25zb2xlLmxvZyhg4pyFIFRlc3QgYWN0aW9uIHBsYW5uZWQ6ICR7dGVzdEFjdGlvbi5hY3Rpb259YCk7XG59XG5cbi8vIPCflI0gQU5BTFlTSVM6IFNpIGhheSBwcm9ibGVtYXMgZGUgcGVyZm9ybWFuY2UgbyBlcyB2aWVybmVzIChhbsOhbGlzaXMgc2VtYW5hbClcbmNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5jb25zdCBpc0ZyaWRheSA9IG5vdy5nZXREYXkoKSA9PT0gNTtcbmNvbnN0IGlzNVBNID0gbm93LmdldEhvdXJzKCkgPT09IDE3O1xuY29uc3QgbmVlZHNBbmFseXNpcyA9IGNvbnNvbGlkYXRlZERhdGEucGVyZm9ybWFuY2VfaXNzdWVzIHx8IChpc0ZyaWRheSAmJiBpczVQTSk7XG5cbmlmIChuZWVkc0FuYWx5c2lzKSB7XG4gIGNvbnN0IGFuYWx5c2lzQWN0aW9uID0ge1xuICAgIHByaW9yaXR5OiAzLFxuICAgIGNvbW1hbmRfdHlwZTogXCJhbmFseXNpc1wiLFxuICAgIGFjdGlvbjogXCJidWlsZF90aW1lX2FuYWx5c2lzX2RldGFpbGVkXCIsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgcHJvamVjdF9uYW1lOiBcIkNvcnRlc1wiLFxuICAgICAgc2NoZW1lOiBcIkNvcnRlc1wiXG4gICAgfSxcbiAgICByZWFzb246IGNvbnNvbGlkYXRlZERhdGEucGVyZm9ybWFuY2VfaXNzdWVzID8gXCJQZXJmb3JtYW5jZSBpc3N1ZXMgZGV0ZWN0ZWRcIiA6IFwiV2Vla2x5IGFuYWx5c2lzIChGcmlkYXkgNVBNKVwiLFxuICAgIHJpc2tfbGV2ZWw6IGNvbnNvbGlkYXRlZERhdGEucGVyZm9ybWFuY2VfaXNzdWVzID8gJ2hpZ2gnIDogJ2xvdydcbiAgfTtcbiAgXG4gIGFjdGlvbnMucHVzaChhbmFseXNpc0FjdGlvbik7XG4gIGNvbnNvbGUubG9nKGDinIUgQW5hbHlzaXMgYWN0aW9uIHBsYW5uZWQ6ICR7YW5hbHlzaXNBY3Rpb24uYWN0aW9ufWApO1xufVxuXG4vLyDwn5OKIFJFUE9SVFM6IFNpIG5vIGhheSBjYW1iaW9zIHBlcm8gcXVlcmVtb3MgdmVyaWZpY2FyIGVzdGFkb1xuaWYgKGFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gIGNvbnN0IHN0YXR1c0FjdGlvbiA9IHtcbiAgICBwcmlvcml0eTogNCxcbiAgICBjb21tYW5kX3R5cGU6IFwicHJvamVjdFwiLFxuICAgIGFjdGlvbjogXCJ2ZXJzaW9uX2luZm9cIixcbiAgICBwYXJhbWV0ZXJzOiB7fSxcbiAgICByZWFzb246IFwiTm8gY2hhbmdlcyBkZXRlY3RlZCAtIHJvdXRpbmUgc3lzdGVtIGNoZWNrXCIsXG4gICAgcmlza19sZXZlbDogJ2xvdydcbiAgfTtcbiAgXG4gIGFjdGlvbnMucHVzaChzdGF0dXNBY3Rpb24pO1xuICBjb25zb2xlLmxvZyhg4pyFIFN0YXR1cyBjaGVjayBwbGFubmVkOiAke3N0YXR1c0FjdGlvbi5hY3Rpb259YCk7XG59XG5cbmNvbnNvbGUubG9nKGBcXG7wn5qAIEZJTkFMIERFQ0lTSU9OOiAke2FjdGlvbnMubGVuZ3RofSBhY3Rpb24ocykgcGxhbm5lZGApO1xuXG5pZiAoYWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgY29uc29sZS5sb2coXCLimqDvuI8gTm8gYWN0aW9ucyBwbGFubmVkIC0gdGhpcyBzaG91bGRuJ3QgaGFwcGVuIGR1ZSB0byBmYWxsYmFjayBzdGF0dXMgY2hlY2tcIik7XG4gIHJldHVybiBbeyBcbiAgICBqc29uOiB7IFxuICAgICAgbm9fYWN0aW9uX25lZWRlZDogdHJ1ZSwgXG4gICAgICByZWFzb246IFwiU3lzdGVtIHN0YWJsZSwgbm8gc2lnbmlmaWNhbnQgY2hhbmdlcyBkZXRlY3RlZFwiLFxuICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXG4gICAgICBhbmFseXNpczogY29uc29saWRhdGVkRGF0YSxcbiAgICAgIGRlYnVnX2luZm86IHtcbiAgICAgICAgdG90YWxfaW5wdXRzOiBhbmFseXNpc1Jlc3VsdHMubGVuZ3RoLFxuICAgICAgICB2YWxpZF9pbnB1dHM6IGNvbnNvbGlkYXRlZERhdGEudmFsaWRfaW5wdXRzXG4gICAgICB9XG4gICAgfSBcbiAgfV07XG59XG5cbi8vIE9yZGVuYXIgYWNjaW9uZXMgcG9yIHByaW9yaWRhZCB5IHByZXBhcmFyIHBhcmEgZWplY3VjacOzblxuYWN0aW9ucy5zb3J0KChhLCBiKSA9PiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eSk7XG5cbmNvbnN0IGZpbmFsQWN0aW9ucyA9IGFjdGlvbnMubWFwKChhY3Rpb24sIGluZGV4KSA9PiAoe1xuICAuLi5hY3Rpb24sXG4gIGV4ZWN1dGlvbl9vcmRlcjogaW5kZXggKyAxLFxuICB0b3RhbF9hY3Rpb25zOiBhY3Rpb25zLmxlbmd0aCxcbiAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXG4gIGF1dG9fdHJpZ2dlcmVkOiB0cnVlLFxuICBhbmFseXNpc19zdW1tYXJ5OiBjb25zb2xpZGF0ZWREYXRhXG59KSk7XG5cbmNvbnNvbGUubG9nKFwiPT09IEFDVElPTlMgVE8gRVhFQ1VURSA9PT1cIik7XG5maW5hbEFjdGlvbnMuZm9yRWFjaCgoYWN0aW9uLCBpbmRleCkgPT4ge1xuICBjb25zb2xlLmxvZyhgJHtpbmRleCArIDF9LiAke2FjdGlvbi5jb21tYW5kX3R5cGV9LiR7YWN0aW9uLmFjdGlvbn0gLSAke2FjdGlvbi5yZWFzb259YCk7XG59KTtcblxucmV0dXJuIGZpbmFsQWN0aW9ucy5tYXAoYWN0aW9uID0+ICh7IGpzb246IGFjdGlvbiB9KSk7IgogICAgICB9LAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5jb2RlIiwKICAgICAgInR5cGVWZXJzaW9uIjogMiwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIDEyMCwKICAgICAgICAtNjQwCiAgICAgIF0sCiAgICAgICJpZCI6ICJlNzU0NzU3Ni0wNGNlLTRhOWEtYjRmOS1mODlkOTZhNGM2MjMiLAogICAgICAibmFtZSI6ICJTbWFydCBSZXN1bHRzIFByb2Nlc3NvciIsCiAgICAgICJyZXRyeU9uRmFpbCI6IHRydWUsCiAgICAgICJtYXhUcmllcyI6IDIsCiAgICAgICJ3YWl0QmV0d2VlblRyaWVzIjogNTAwMAogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImpzQ29kZSI6ICIvLyBTTUFSVCBOT1RJRklDQVRJT04gSEFORExFUiAtIFZlcnNpw7NuIFJvYnVzdGEgY29uIG1hbmVqbyBkZSBlcnJvcmVzXG4vLyBUaXBvOiBDb2RlIChKYXZhU2NyaXB0KVxuXG5jb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG5jb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0gU21hcnQgTm90aWZpY2F0aW9uIEhhbmRsZXIgLSBTdGFydGluZy4uLmApO1xuXG4vLyBPYnRlbmVyIGRhdG9zIGRlIGVudHJhZGEgY29uIG1hbmVqbyBzZWd1cm9cbmxldCBpbnB1dERhdGE7XG50cnkge1xuICBjb25zdCBhbGxJbnB1dHMgPSAkaW5wdXQuYWxsKCk7XG4gIGNvbnNvbGUubG9nKGBSZWNlaXZlZCAke2FsbElucHV0cy5sZW5ndGh9IGlucHV0KHMpYCk7XG4gIFxuICAvLyBEZWJ1ZzogbW9zdHJhciBlc3RydWN0dXJhIGRlIGRhdG9zIHJlY2liaWRvc1xuICBjb25zb2xlLmxvZyhcIj09PSBERUJVRzogSW5wdXQgU3RydWN0dXJlID09PVwiKTtcbiAgYWxsSW5wdXRzLmZvckVhY2goKGlucHV0LCBpbmRleCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBJbnB1dCAke2luZGV4fTpgLCB7XG4gICAgICBoYXNKc29uOiAhIWlucHV0Py5qc29uLFxuICAgICAganNvbktleXM6IGlucHV0Py5qc29uID8gT2JqZWN0LmtleXMoaW5wdXQuanNvbikuc2xpY2UoMCwgMTApIDogJ05vIEpTT04nLFxuICAgICAgdHlwZTogdHlwZW9mIGlucHV0XG4gICAgfSk7XG4gIH0pO1xuICBcbiAgaW5wdXREYXRhID0gYWxsSW5wdXRzWzBdPy5qc29uIHx8IHt9O1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgY29uc29sZS5sb2coYEVycm9yIGdldHRpbmcgaW5wdXQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgaW5wdXREYXRhID0ge307XG59XG5cbi8vIENyZWFyIGVzdHJ1Y3R1cmEgZGUgZGF0b3MgcG9yIGRlZmVjdG8gc2kgbm8gZXhpc3RlXG5jb25zdCBkZWZhdWx0UmVwb3J0ID0ge1xuICB0b3RhbF9leGVjdXRpb25zOiAwLFxuICBzdWNjZXNzZnVsX2V4ZWN1dGlvbnM6IDAsXG4gIGZhaWxlZF9leGVjdXRpb25zOiAwLFxuICB0b3RhbF93YXJuaW5nczogMCxcbiAgdG90YWxfZXJyb3JzOiAwLFxuICBvdmVyYWxsX2hlYWx0aDogJ3Vua25vd24nXG59O1xuXG5jb25zdCBkZWZhdWx0UHJvY2Vzc2luZ1Jlc3VsdCA9IHtcbiAgYXV0b21hdGlvbl9yZXBvcnQ6IGRlZmF1bHRSZXBvcnQsXG4gIG5lZWRzX3VyZ2VudF9hdHRlbnRpb246IGZhbHNlLFxuICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICBmb2xsb3dfdXBfYWN0aW9uczogW10sXG4gIGRldGFpbGVkX3Jlc3VsdHM6IFtdXG59O1xuXG4vLyBGdXNpb25hciBkYXRvcyByZWNpYmlkb3MgY29uIHZhbG9yZXMgcG9yIGRlZmVjdG9cbmNvbnN0IHByb2Nlc3NpbmdSZXN1bHQgPSB7XG4gIGF1dG9tYXRpb25fcmVwb3J0OiBpbnB1dERhdGEuYXV0b21hdGlvbl9yZXBvcnQgfHwgZGVmYXVsdFJlcG9ydCxcbiAgbmVlZHNfdXJnZW50X2F0dGVudGlvbjogaW5wdXREYXRhLm5lZWRzX3VyZ2VudF9hdHRlbnRpb24gfHwgZmFsc2UsXG4gIHJlY29tbWVuZGF0aW9uczogaW5wdXREYXRhLnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgZm9sbG93X3VwX2FjdGlvbnM6IGlucHV0RGF0YS5mb2xsb3dfdXBfYWN0aW9ucyB8fCBbXSxcbiAgZGV0YWlsZWRfcmVzdWx0czogaW5wdXREYXRhLmRldGFpbGVkX3Jlc3VsdHMgfHwgW11cbn07XG5cbmNvbnNvbGUubG9nKFwiPT09IFBST0NFU1NJTkcgREFUQSA9PT1cIik7XG5jb25zb2xlLmxvZyhgUmVwb3J0IGhlYWx0aDogJHtwcm9jZXNzaW5nUmVzdWx0LmF1dG9tYXRpb25fcmVwb3J0Lm92ZXJhbGxfaGVhbHRofWApO1xuY29uc29sZS5sb2coYFVyZ2VudCBhdHRlbnRpb246ICR7cHJvY2Vzc2luZ1Jlc3VsdC5uZWVkc191cmdlbnRfYXR0ZW50aW9ufWApO1xuY29uc29sZS5sb2coYFJlY29tbWVuZGF0aW9uczogJHtwcm9jZXNzaW5nUmVzdWx0LnJlY29tbWVuZGF0aW9ucy5sZW5ndGh9YCk7XG5jb25zb2xlLmxvZyhgRm9sbG93LXVwIGFjdGlvbnM6ICR7cHJvY2Vzc2luZ1Jlc3VsdC5mb2xsb3dfdXBfYWN0aW9ucy5sZW5ndGh9YCk7XG5cbmNvbnN0IHJlcG9ydCA9IHByb2Nlc3NpbmdSZXN1bHQuYXV0b21hdGlvbl9yZXBvcnQ7XG5jb25zdCBuZWVkc0F0dGVudGlvbiA9IHByb2Nlc3NpbmdSZXN1bHQubmVlZHNfdXJnZW50X2F0dGVudGlvbjtcbmNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHByb2Nlc3NpbmdSZXN1bHQucmVjb21tZW5kYXRpb25zO1xuY29uc3QgZm9sbG93VXBBY3Rpb25zID0gcHJvY2Vzc2luZ1Jlc3VsdC5mb2xsb3dfdXBfYWN0aW9ucztcblxuLy8gR2VuZXJhciBub3RpZmljYWNpw7NuIGLDoXNpY2FcbmNvbnN0IG5vdGlmaWNhdGlvbiA9IHtcbiAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXG4gIHRpdGxlOiBg8J+kliBDb3J0ZXMgQXV0b21hdGlvbiBSZXBvcnRgLFxuICBzdGF0dXM6IHJlcG9ydC5vdmVyYWxsX2hlYWx0aCB8fCAndW5rbm93bicsXG4gIHN1bW1hcnk6IHtcbiAgICBleGVjdXRpb25zOiBgJHtyZXBvcnQuc3VjY2Vzc2Z1bF9leGVjdXRpb25zIHx8IDB9LyR7cmVwb3J0LnRvdGFsX2V4ZWN1dGlvbnMgfHwgMH0gc3VjY2Vzc2Z1bGAsXG4gICAgaGVhbHRoOiByZXBvcnQub3ZlcmFsbF9oZWFsdGggfHwgJ3Vua25vd24nLFxuICAgIHdhcm5pbmdzOiByZXBvcnQudG90YWxfd2FybmluZ3MgfHwgMCxcbiAgICBlcnJvcnM6IHJlcG9ydC50b3RhbF9lcnJvcnMgfHwgMFxuICB9LFxuICB1cmdlbnQ6IG5lZWRzQXR0ZW50aW9uLFxuICBhY3Rpb25zX3Rha2VuOiBwcm9jZXNzaW5nUmVzdWx0LmRldGFpbGVkX3Jlc3VsdHMubGVuZ3RoLFxuICByZWNvbW1lbmRhdGlvbnM6IHJlY29tbWVuZGF0aW9ucy5sZW5ndGhcbn07XG5cbi8vIENyZWFyIG1lbnNhamUgY29uIG1hbmVqbyBzZWd1cm9cbmxldCBtZXNzYWdlID0gYPCfk4ogKipBdXRvbWF0aW9uIFN1bW1hcnkgZm9yIENvcnRlcyoqXFxuXFxuYDtcblxuLy8gU3RhdHVzIGVtb2ppIGNvbiBmYWxsYmFja1xuY29uc3Qgc3RhdHVzRW1vamkgPSB7XG4gICdleGNlbGxlbnQnOiAn8J+foicsXG4gICdnb29kJzogJ/Cfn6EnLCBcbiAgJ2ZhaXInOiAn8J+foCcsXG4gICdwb29yJzogJ/CflLQnLFxuICAndW5rbm93bic6ICfimqonXG59O1xuXG5jb25zdCBoZWFsdGhTdGF0dXMgPSByZXBvcnQub3ZlcmFsbF9oZWFsdGggfHwgJ3Vua25vd24nO1xuY29uc3QgZW1vamkgPSBzdGF0dXNFbW9qaVtoZWFsdGhTdGF0dXNdIHx8ICfimqonO1xuXG5tZXNzYWdlICs9IGAke2Vtb2ppfSAqKk92ZXJhbGwgSGVhbHRoOioqICR7aGVhbHRoU3RhdHVzLnRvVXBwZXJDYXNlKCl9XFxuYDtcbm1lc3NhZ2UgKz0gYOKaoSAqKkV4ZWN1dGlvbnM6KiogJHtyZXBvcnQuc3VjY2Vzc2Z1bF9leGVjdXRpb25zIHx8IDB9LyR7cmVwb3J0LnRvdGFsX2V4ZWN1dGlvbnMgfHwgMH0gc3VjY2Vzc2Z1bFxcbmA7XG5cbmlmICgocmVwb3J0LnRvdGFsX3dhcm5pbmdzIHx8IDApID4gMCkge1xuICBtZXNzYWdlICs9IGDimqDvuI8gKipXYXJuaW5nczoqKiAke3JlcG9ydC50b3RhbF93YXJuaW5nc31cXG5gO1xufVxuXG5pZiAoKHJlcG9ydC50b3RhbF9lcnJvcnMgfHwgMCkgPiAwKSB7XG4gIG1lc3NhZ2UgKz0gYOKdjCAqKkVycm9yczoqKiAke3JlcG9ydC50b3RhbF9lcnJvcnN9XFxuYDtcbn1cblxuLy8gRGV0YWxsZXMgZGUgY29tYW5kb3MgZWplY3V0YWRvcyAoY29uIHZlcmlmaWNhY2nDs24gc2VndXJhKVxuaWYgKHByb2Nlc3NpbmdSZXN1bHQuZGV0YWlsZWRfcmVzdWx0cyAmJiBwcm9jZXNzaW5nUmVzdWx0LmRldGFpbGVkX3Jlc3VsdHMubGVuZ3RoID4gMCkge1xuICBtZXNzYWdlICs9IGBcXG7wn5OLICoqQ29tbWFuZHMgRXhlY3V0ZWQ6KipcXG5gO1xuICBwcm9jZXNzaW5nUmVzdWx0LmRldGFpbGVkX3Jlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdWNjZXNzID0gcmVzdWx0LmFuYWx5c2lzPy5zdWNjZXNzIHx8IGZhbHNlO1xuICAgICAgY29uc3QgZW1vamkgPSBzdWNjZXNzID8gJ+KchScgOiAn4p2MJztcbiAgICAgIGNvbnN0IG9yaWdpbmFsQ29tbWFuZCA9IHJlc3VsdC5vcmlnaW5hbF9jb21tYW5kIHx8ICdVbmtub3duIGNvbW1hbmQnO1xuICAgICAgY29uc3QgY21kUGFydHMgPSBvcmlnaW5hbENvbW1hbmQuc3BsaXQoJyAnKTtcbiAgICAgIGNvbnN0IGNtZCA9IGNtZFBhcnRzLmxlbmd0aCA+IDMgPyBjbWRQYXJ0cy5zbGljZSgwLCAzKS5qb2luKCcgJykgOiBvcmlnaW5hbENvbW1hbmQ7XG4gICAgICBcbiAgICAgIG1lc3NhZ2UgKz0gYCR7ZW1vaml9ICR7Y21kfWA7XG4gICAgICBcbiAgICAgIGlmIChyZXN1bHQuYW5hbHlzaXM/LmJ1aWxkX3BlcmZvcm1hbmNlKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gYCAoJHtyZXN1bHQuYW5hbHlzaXMuYnVpbGRfcGVyZm9ybWFuY2V9KWA7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChyZXN1bHQuYW5hbHlzaXM/LnRlc3Rfc3VjY2Vzc19yYXRlKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gYCAoJHtyZXN1bHQuYW5hbHlzaXMudGVzdF9zdWNjZXNzX3JhdGV9JSB0ZXN0cyBwYXNzZWQpYDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgbWVzc2FnZSArPSBgXFxuYDtcbiAgICB9IGNhdGNoIChkZXRhaWxFcnJvcikge1xuICAgICAgY29uc29sZS5sb2coYEVycm9yIHByb2Nlc3NpbmcgZGV0YWlsICR7aW5kZXh9OiAke2RldGFpbEVycm9yLm1lc3NhZ2V9YCk7XG4gICAgICBtZXNzYWdlICs9IGDimqogQ29tbWFuZCAke2luZGV4ICsgMX06IFByb2Nlc3NpbmcgZXJyb3JcXG5gO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBtZXNzYWdlICs9IGBcXG7wn5OLICoqQ29tbWFuZHM6KiogTm8gZGV0YWlsZWQgZXhlY3V0aW9uIGRhdGEgYXZhaWxhYmxlXFxuYDtcbn1cblxuLy8gUmVjb21lbmRhY2lvbmVzIChjb24gdmVyaWZpY2FjacOzbiBzZWd1cmEpXG5pZiAocmVjb21tZW5kYXRpb25zICYmIHJlY29tbWVuZGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gIG1lc3NhZ2UgKz0gYFxcbvCfjq8gKipSZWNvbW1lbmRhdGlvbnM6KipcXG5gO1xuICByZWNvbW1lbmRhdGlvbnMuZm9yRWFjaCgocmVjLCBpbmRleCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwcmlvcml0eUVtb2ppID0ge1xuICAgICAgICAnY3JpdGljYWwnOiAn8J+aqCcsXG4gICAgICAgICdoaWdoJzogJ+KaoO+4jycsXG4gICAgICAgICdtZWRpdW0nOiAn8J+SoScsXG4gICAgICAgICdsb3cnOiAn4oS577iPJ1xuICAgICAgfTtcbiAgICAgIGNvbnN0IHByaW9yaXR5ID0gcmVjLnByaW9yaXR5IHx8ICdtZWRpdW0nO1xuICAgICAgY29uc3QgZW1vamkgPSBwcmlvcml0eUVtb2ppW3ByaW9yaXR5XSB8fCAn8J+SoSc7XG4gICAgICBjb25zdCBhY3Rpb24gPSByZWMuYWN0aW9uIHx8ICdVbmtub3duIGFjdGlvbic7XG4gICAgICBjb25zdCByZWFzb24gPSByZWMucmVhc29uIHx8ICdObyByZWFzb24gc3BlY2lmaWVkJztcbiAgICAgIFxuICAgICAgbWVzc2FnZSArPSBgJHtlbW9qaX0gKioke2FjdGlvbn0qKlxcbiAgICR7cmVhc29ufVxcbmA7XG4gICAgfSBjYXRjaCAocmVjRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBwcm9jZXNzaW5nIHJlY29tbWVuZGF0aW9uICR7aW5kZXh9OiAke3JlY0Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICBtZXNzYWdlICs9IGDwn5KhIFJlY29tbWVuZGF0aW9uICR7aW5kZXggKyAxfTogUHJvY2Vzc2luZyBlcnJvclxcbmA7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gQWNjaW9uZXMgZGUgc2VndWltaWVudG8gKGNvbiB2ZXJpZmljYWNpw7NuIHNlZ3VyYSlcbmlmIChmb2xsb3dVcEFjdGlvbnMgJiYgZm9sbG93VXBBY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgbWVzc2FnZSArPSBgXFxu8J+UhCAqKkF1dG9tYXRlZCBGb2xsb3ctdXBzIFNjaGVkdWxlZDoqKlxcbmA7XG4gIGZvbGxvd1VwQWN0aW9ucy5mb3JFYWNoKChhY3Rpb24sIGluZGV4KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBhY3Rpb24uYWN0aW9uIHx8ICdVbmtub3duIGFjdGlvbic7XG4gICAgICBjb25zdCByZWFzb24gPSBhY3Rpb24ucmVhc29uIHx8ICdObyByZWFzb24gc3BlY2lmaWVkJztcbiAgICAgIG1lc3NhZ2UgKz0gYOKAoiAke2FjdGlvbk5hbWV9OiAke3JlYXNvbn1cXG5gO1xuICAgIH0gY2F0Y2ggKGFjdGlvbkVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhgRXJyb3IgcHJvY2Vzc2luZyBmb2xsb3ctdXAgJHtpbmRleH06ICR7YWN0aW9uRXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIG1lc3NhZ2UgKz0gYOKAoiBGb2xsb3ctdXAgJHtpbmRleCArIDF9OiBQcm9jZXNzaW5nIGVycm9yXFxuYDtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zb2xlLmxvZyhcIkdlbmVyYXRlZCBub3RpZmljYXRpb24gbWVzc2FnZTpcIik7XG5jb25zb2xlLmxvZyhtZXNzYWdlLnN1YnN0cmluZygwLCA1MDApICsgXCIuLi5cIik7IC8vIFNvbG8gbW9zdHJhciBwcmltZXJvcyA1MDAgY2FyYWN0ZXJlcyBlbiBsb2dcblxuLy8gUHJlcGFyYXIgZGF0b3MgcGFyYSBpbnRlZ3JhY2lvbmVzIChzaW1wbGlmaWNhZG8geSByb2J1c3RvKVxuY29uc3QgaW50ZWdyYXRpb25QYXlsb2FkID0ge1xuICB3ZWJob29rX3JlYWR5OiB0cnVlLFxuICBzbGFja19wYXlsb2FkOiB7XG4gICAgdGV4dDogbm90aWZpY2F0aW9uLnRpdGxlLFxuICAgIGF0dGFjaG1lbnRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbG9yOiBuZWVkc0F0dGVudGlvbiA/ICdkYW5nZXInIDogaGVhbHRoU3RhdHVzID09PSAnZXhjZWxsZW50JyA/ICdnb29kJyA6ICd3YXJuaW5nJyxcbiAgICAgICAgdGl0bGU6IGBQcm9qZWN0IEhlYWx0aDogJHtoZWFsdGhTdGF0dXN9YCxcbiAgICAgICAgdGV4dDogbWVzc2FnZS5zdWJzdHJpbmcoMCwgMTAwMCksIC8vIExpbWl0YXIgbG9uZ2l0dWQgcGFyYSBTbGFja1xuICAgICAgICBmb290ZXI6ICdDb3J0ZXMgQXV0b21hdGlvbiBTeXN0ZW0nLFxuICAgICAgICB0czogTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMClcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIGVtYWlsX3BheWxvYWQ6IHtcbiAgICBzdWJqZWN0OiBgJHtuZWVkc0F0dGVudGlvbiA/ICfwn5qoIFVSR0VOVDogJyA6ICfwn5OKICd9Q29ydGVzIEF1dG9tYXRpb24gUmVwb3J0IC0gJHtoZWFsdGhTdGF0dXN9YCxcbiAgICBodG1sOiBtZXNzYWdlLnJlcGxhY2UoL1xcbi9nLCAnPGJyPicpLnJlcGxhY2UoL1xcKlxcKiguKj8pXFwqXFwqL2csICc8c3Ryb25nPiQxPC9zdHJvbmc+JyksXG4gICAgcHJpb3JpdHk6IG5lZWRzQXR0ZW50aW9uID8gJ2hpZ2gnIDogJ25vcm1hbCdcbiAgfVxufTtcblxuLy8gRXN0YWTDrXN0aWNhcyBiw6FzaWNhc1xuY29uc3Qgc3RhdGlzdGljcyA9IHtcbiAgZGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0sXG4gIGhvdXI6IG5ldyBEYXRlKCkuZ2V0SG91cnMoKSxcbiAgb3ZlcmFsbF9oZWFsdGg6IGhlYWx0aFN0YXR1cyxcbiAgdG90YWxfd2FybmluZ3M6IHJlcG9ydC50b3RhbF93YXJuaW5ncyB8fCAwLFxuICB0b3RhbF9lcnJvcnM6IHJlcG9ydC50b3RhbF9lcnJvcnMgfHwgMCxcbiAgc3VjY2Vzc2Z1bF9leGVjdXRpb25zOiByZXBvcnQuc3VjY2Vzc2Z1bF9leGVjdXRpb25zIHx8IDAsXG4gIGZhaWxlZF9leGVjdXRpb25zOiByZXBvcnQuZmFpbGVkX2V4ZWN1dGlvbnMgfHwgMCxcbiAgYXV0b21hdGlvbl9lZmZpY2llbmN5OiByZXBvcnQudG90YWxfZXhlY3V0aW9ucyA+IDAgPyBcbiAgICAoKHJlcG9ydC5zdWNjZXNzZnVsX2V4ZWN1dGlvbnMgfHwgMCkgLyByZXBvcnQudG90YWxfZXhlY3V0aW9ucyAqIDEwMCkudG9GaXhlZCgxKSA6ICcwLjAnXG59O1xuXG5jb25zb2xlLmxvZyhcIvCfk4ggU2Vzc2lvbiBTdGF0aXN0aWNzOlwiLCBKU09OLnN0cmluZ2lmeShzdGF0aXN0aWNzLCBudWxsLCAyKSk7XG5cbi8vIFByZXBhcmFyIGFjY2lvbmVzIHBhcmEgcHLDs3hpbW8gY2ljbG8gKHNpbXBsaWZpY2FkbylcbmNvbnN0IG5leHRDeWNsZUFjdGlvbnMgPSBbXTtcblxuaWYgKG5lZWRzQXR0ZW50aW9uKSB7XG4gIG5leHRDeWNsZUFjdGlvbnMucHVzaCh7XG4gICAgdHlwZTogJ3ZlcmlmaWNhdGlvbicsXG4gICAgY29tbWFuZF90eXBlOiAncHJvamVjdCcsXG4gICAgYWN0aW9uOiAndmVyc2lvbl9pbmZvJyxcbiAgICByZWFzb246ICdWZXJpZnkgc3lzdGVtIHN0YWJpbGl0eSBhZnRlciBpc3N1ZXMnXG4gIH0pO1xufVxuXG5pZiAoKHJlcG9ydC50b3RhbF9lcnJvcnMgfHwgMCkgPiAwKSB7XG4gIG5leHRDeWNsZUFjdGlvbnMucHVzaCh7XG4gICAgdHlwZTogJ3JlY292ZXJ5JyxcbiAgICBjb21tYW5kX3R5cGU6ICdidWlsZCcsXG4gICAgYWN0aW9uOiAnY2xlYW5fYnVpbGRfZm9sZGVyJyxcbiAgICByZWFzb246ICdDbGVhbiBidWlsZCBhZnRlciBlcnJvcnMgZGV0ZWN0ZWQnXG4gIH0pO1xufVxuXG5jb25zb2xlLmxvZyhg8J+UhCBTY2hlZHVsZWQgJHtuZXh0Q3ljbGVBY3Rpb25zLmxlbmd0aH0gYWN0aW9ucyBmb3IgbmV4dCBhdXRvbWF0aW9uIGN5Y2xlYCk7XG5cbi8vIE91dHB1dCBmaW5hbCByb2J1c3RvXG5jb25zdCBmaW5hbE91dHB1dCA9IHtcbiAgbm90aWZpY2F0aW9uOiBub3RpZmljYXRpb24sXG4gIGRldGFpbGVkX21lc3NhZ2U6IG1lc3NhZ2UsXG4gIGludGVncmF0aW9uX3BheWxvYWRzOiBpbnRlZ3JhdGlvblBheWxvYWQsXG4gIHN0YXRpc3RpY3M6IHN0YXRpc3RpY3MsXG4gIG5leHRfY3ljbGVfYWN0aW9uczogbmV4dEN5Y2xlQWN0aW9ucyxcbiAgYXV0b21hdGlvbl9jb21wbGV0ZTogdHJ1ZSxcbiAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXG4gIHN1bW1hcnk6IGBQcm9jZXNzZWQgJHtwcm9jZXNzaW5nUmVzdWx0LmRldGFpbGVkX3Jlc3VsdHMubGVuZ3RofSBjb21tYW5kcywgZ2VuZXJhdGVkICR7cmVjb21tZW5kYXRpb25zLmxlbmd0aH0gcmVjb21tZW5kYXRpb25zLCBzeXN0ZW0gaGVhbHRoOiAke2hlYWx0aFN0YXR1c31gLFxuICBkZWJ1Z19pbmZvOiB7XG4gICAgaW5wdXRfZGF0YV9rZXlzOiBPYmplY3Qua2V5cyhpbnB1dERhdGEpLFxuICAgIGhhc19hdXRvbWF0aW9uX3JlcG9ydDogISFpbnB1dERhdGEuYXV0b21hdGlvbl9yZXBvcnQsXG4gICAgaGFzX2RldGFpbGVkX3Jlc3VsdHM6ICEhKGlucHV0RGF0YS5kZXRhaWxlZF9yZXN1bHRzICYmIGlucHV0RGF0YS5kZXRhaWxlZF9yZXN1bHRzLmxlbmd0aCA+IDApXG4gIH1cbn07XG5cbmNvbnNvbGUubG9nKFwi4pyFIFNtYXJ0IE5vdGlmaWNhdGlvbiBIYW5kbGVyIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkhXCIpO1xuY29uc29sZS5sb2coYPCfk4ogRmluYWwgc3VtbWFyeTogJHtmaW5hbE91dHB1dC5zdW1tYXJ5fWApO1xuXG5yZXR1cm4gW3sganNvbjogZmluYWxPdXRwdXQgfV07IgogICAgICB9LAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5jb2RlIiwKICAgICAgInR5cGVWZXJzaW9uIjogMiwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIDM0MCwKICAgICAgICAtNjQwCiAgICAgIF0sCiAgICAgICJpZCI6ICIwOGYwZjM2Yy1iZmZlLTQ5ZmYtYWEwMS0xMzM2YTgxYWIzZTciLAogICAgICAibmFtZSI6ICJTbWFydCBOb3RpZmljYXRpb24gSGFuZGxlciIsCiAgICAgICJyZXRyeU9uRmFpbCI6IHRydWUsCiAgICAgICJtYXhUcmllcyI6IDIsCiAgICAgICJ3YWl0QmV0d2VlblRyaWVzIjogNTAwMAogICAgfSwKICAgIHsKICAgICAgInBhcmFtZXRlcnMiOiB7CiAgICAgICAgImNvbnRlbnQiOiAiIyMgU2VndW5kbyBXb3JrZmxvdyAtIFhDT0RFIENMSSBBY2NlcyIsCiAgICAgICAgImhlaWdodCI6IDM4MCwKICAgICAgICAid2lkdGgiOiAxMjQwLAogICAgICAgICJjb2xvciI6IDUKICAgICAgfSwKICAgICAgInR5cGUiOiAibjhuLW5vZGVzLWJhc2Uuc3RpY2t5Tm90ZSIsCiAgICAgICJwb3NpdGlvbiI6IFsKICAgICAgICAtNjQwLAogICAgICAgIC0zNjAKICAgICAgXSwKICAgICAgInR5cGVWZXJzaW9uIjogMSwKICAgICAgImlkIjogImU5ZGExNWY0LTAzMmYtNDE0NC05YTUzLWQ4OTA2Zjk3NmZkNiIsCiAgICAgICJuYW1lIjogIlN0aWNreSBOb3RlMSIKICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJjb250ZW50IjogIiMjIFdvcmtmbG93IFByaW5jaXBhbCBwYXJhIE1DUCBDbGF1ZGUiLAogICAgICAgICJoZWlnaHQiOiAxNjgwLAogICAgICAgICJ3aWR0aCI6IDM2MDAsCiAgICAgICAgImNvbG9yIjogNgogICAgICB9LAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5zdGlja3lOb3RlIiwKICAgICAgInBvc2l0aW9uIjogWwogICAgICAgIC0yNjAwLAogICAgICAgIC0xNDAwCiAgICAgIF0sCiAgICAgICJ0eXBlVmVyc2lvbiI6IDEsCiAgICAgICJpZCI6ICIxZWYzOWViZC05NWU1LTQxOWYtYmYyNC04YjhiMTkxMmM5YzAiLAogICAgICAibmFtZSI6ICJTdGlja3kgTm90ZTIiCiAgICB9LAogICAgewogICAgICAicGFyYW1ldGVycyI6IHsKICAgICAgICAiY29tbWFuZCI6ICI9Y2QgL2RhdGEvY29ydGVzL2NvcnRlcy1jb250ZXh0ICYmIFRJTUVTVEFNUD0kKGRhdGUgKyclZC0lbS0lWV8lSDolTTolUycpICYmIGVjaG8gJ3t7IEpTT04uc3RyaW5naWZ5KCRqc29uKS5yZXBsYWNlKC8nL2csIFwiJ1xcJydcIikgfX0nID4gdWx0aW1hdGUtY29ydGVzLWNvbnRleHRfJFRJTUVTVEFNUC5qc29uICYmIGVjaG8gXCLinIUgU2F2ZWQgc3VjY2Vzc2Z1bGx5XCIgJiYgbHMgLWxhIHVsdGltYXRlLWNvcnRlcy1jb250ZXh0XyRUSU1FU1RBTVAuanNvbiAmJiBlY2hvIFwi8J+TjyBTaXplOiAkKHdjIC1jIDwgdWx0aW1hdGUtY29ydGVzLWNvbnRleHRfJFRJTUVTVEFNUC5qc29uKSBieXRlc1wiIgogICAgICB9LAogICAgICAidHlwZSI6ICJuOG4tbm9kZXMtYmFzZS5leGVjdXRlQ29tbWFuZCIsCiAgICAgICJ0eXBlVmVyc2lvbiI6IDEsCiAgICAgICJwb3NpdGlvbiI6IFsKICAgICAgICAtOTYwLAogICAgICAgIC04NDAKICAgICAgXSwKICAgICAgImlkIjogImQ3MjEyMmZjLWE5ZWUtNDc4OS05MDVhLTBhNThkN2E1YmIwZSIsCiAgICAgICJuYW1lIjogIkV4ZWN1dGUgQ29tbWFuZCIKICAgIH0sCiAgICB7CiAgICAgICJwYXJhbWV0ZXJzIjogewogICAgICAgICJ0cmlnZ2VyVGltZXMiOiB7CiAgICAgICAgICAiaXRlbSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJtb2RlIjogImV2ZXJ5SG91ciIsCiAgICAgICAgICAgICAgIm1pbnV0ZSI6IDUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJtb2RlIjogImV2ZXJ5SG91ciIsCiAgICAgICAgICAgICAgIm1pbnV0ZSI6IDEwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibW9kZSI6ICJldmVyeUhvdXIiLAogICAgICAgICAgICAgICJtaW51dGUiOiAxNQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm1vZGUiOiAiZXZlcnlIb3VyIiwKICAgICAgICAgICAgICAibWludXRlIjogMjAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJtb2RlIjogImV2ZXJ5SG91ciIsCiAgICAgICAgICAgICAgIm1pbnV0ZSI6IDI1CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibW9kZSI6ICJldmVyeUhvdXIiLAogICAgICAgICAgICAgICJtaW51dGUiOiAzMAogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm1vZGUiOiAiZXZlcnlIb3VyIiwKICAgICAgICAgICAgICAibWludXRlIjogMzUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJtb2RlIjogImV2ZXJ5SG91ciIsCiAgICAgICAgICAgICAgIm1pbnV0ZSI6IDQwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibW9kZSI6ICJldmVyeUhvdXIiLAogICAgICAgICAgICAgICJtaW51dGUiOiA0NQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm1vZGUiOiAiZXZlcnlIb3VyIiwKICAgICAgICAgICAgICAibWludXRlIjogNTAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJtb2RlIjogImV2ZXJ5SG91ciIsCiAgICAgICAgICAgICAgIm1pbnV0ZSI6IDU1CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJuYW1lIjogIldGMSAtIEV2ZXJ5IDUgTWludXRlcyIsCiAgICAgICJ0eXBlIjogIm44bi1ub2Rlcy1iYXNlLmNyb24iLAogICAgICAidHlwZVZlcnNpb24iOiAxLAogICAgICAicG9zaXRpb24iOiBbCiAgICAgICAgLTIzMjAsCiAgICAgICAgLTc0MAogICAgICBdLAogICAgICAiaWQiOiAiYThmYzM3M2QtMzA5OS00MjQzLWJkMGYtYTRjMTM5NzIwZTBkIiwKICAgICAgIm5vdGVzSW5GbG93IjogdHJ1ZSwKICAgICAgIm5vdGVzIjogIlNlIGVqZWN1dGEgY2FkYSAxMCBtaW51dG9zIgogICAgfQogIF0sCiAgImNvbm5lY3Rpb25zIjogewogICAgIkNvbmZpZ3VyZSBDb3J0ZXMgUHJvamVjdCBQYXRocyI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJFbnN1cmUgQ29udGV4dCBEaXJlY3RvcnkiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJFbnN1cmUgQ29udGV4dCBEaXJlY3RvcnkiOiB7CiAgICAgICJtYWluIjogWwogICAgICAgIFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiU2NhbiBDb3J0ZXMgRmlsZXMiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQW5hbHl6ZSBHaXQgSGlzdG9yeSIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJBbmFseXplIEdpdCBTdGF0cyIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJBbmFseXplIFRlc3QgQ292ZXJhZ2UiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQW5hbHl6ZSBBc3NldHMgUGVyZm9ybWFuY2UiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQW5hbHl6ZSBTd2lmdCBEZXBlbmRlbmNpZXMiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQW5hbHl6ZSBTd2lmdCBQYWNrYWdlIExvY2siLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQW5hbHl6ZSBOUE0gRGVwZW5kZW5jaWVzIiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiU2NhbiBDb3J0ZXMgRmlsZXMiOiB7CiAgICAgICJtYWluIjogWwogICAgICAgIFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQW5hbHl6ZSBDb3J0ZXMgUHJvamVjdCBTdHJ1Y3R1cmUiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJBbmFseXplIEdpdCBIaXN0b3J5IjogewogICAgICAibWFpbiI6IFsKICAgICAgICBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJub2RlIjogIkFuYWx5emUgQ29ydGVzIEdpdCBJbnRlbGxpZ2VuY2UiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJBbmFseXplIFRlc3QgQ292ZXJhZ2UiOiB7CiAgICAgICJtYWluIjogWwogICAgICAgIFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQW5hbHl6ZSBDb3J0ZXMgVGVzdGluZyBJbnRlbGxpZ2VuY2UiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJBbmFseXplIEFzc2V0cyBQZXJmb3JtYW5jZSI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJBbmFseXplIENvcnRlcyBQZXJmb3JtYW5jZSBJbnRlbGxpZ2VuY2UiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJBbmFseXplIFN3aWZ0IERlcGVuZGVuY2llcyI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJBbmFseXplIENvcnRlcyBEZXBlbmRlbmNpZXMiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJBbmFseXplIENvcnRlcyBQcm9qZWN0IFN0cnVjdHVyZSI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJDcmVhdGUgVWx0aW1hdGUgQ29ydGVzIENvbnRleHQiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJDcmVhdGUgVWx0aW1hdGUgQ29ydGVzIENvbnRleHQiOiB7CiAgICAgICJtYWluIjogWwogICAgICAgIFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiU2F2ZSBDbGF1ZGUgQ29udGV4dCIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJTYXZlIEV4ZWN1dGl2ZSBEYXNoYm9hcmQiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiTWFuYWdlIEhpc3RvcmljYWwgRmlsZXMiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiRXhlY3V0ZSBDb21tYW5kIiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiU2F2ZSBDbGF1ZGUgQ29udGV4dCI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJNYW5hZ2UgSGlzdG9yaWNhbCBGaWxlcyIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICBdCiAgICB9LAogICAgIlNhdmUgRXhlY3V0aXZlIERhc2hib2FyZCI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJNYW5hZ2UgSGlzdG9yaWNhbCBGaWxlcyIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICBdCiAgICB9LAogICAgIk1hbmFnZSBIaXN0b3JpY2FsIEZpbGVzIjogewogICAgICAibWFpbiI6IFsKICAgICAgICBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJub2RlIjogIkZpbmFsIEV4cG9ydCBJbnN0cnVjdGlvbnMiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJBbmFseXplIEdpdCBTdGF0cyI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJBbmFseXplIENvcnRlcyBHaXQgSW50ZWxsaWdlbmNlIiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiQW5hbHl6ZSBTd2lmdCBQYWNrYWdlIExvY2siOiB7CiAgICAgICJtYWluIjogWwogICAgICAgIFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQW5hbHl6ZSBDb3J0ZXMgRGVwZW5kZW5jaWVzIiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiQW5hbHl6ZSBOUE0gRGVwZW5kZW5jaWVzIjogewogICAgICAibWFpbiI6IFsKICAgICAgICBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJub2RlIjogIkFuYWx5emUgQ29ydGVzIERlcGVuZGVuY2llcyIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICBdCiAgICB9LAogICAgIkFuYWx5emUgQ29ydGVzIEdpdCBJbnRlbGxpZ2VuY2UiOiB7CiAgICAgICJtYWluIjogWwogICAgICAgIFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQ3JlYXRlIFVsdGltYXRlIENvcnRlcyBDb250ZXh0IiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiQW5hbHl6ZSBDb3J0ZXMgVGVzdGluZyBJbnRlbGxpZ2VuY2UiOiB7CiAgICAgICJtYWluIjogWwogICAgICAgIFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiQ3JlYXRlIFVsdGltYXRlIENvcnRlcyBDb250ZXh0IiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiQW5hbHl6ZSBDb3J0ZXMgUGVyZm9ybWFuY2UgSW50ZWxsaWdlbmNlIjogewogICAgICAibWFpbiI6IFsKICAgICAgICBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJub2RlIjogIkNyZWF0ZSBVbHRpbWF0ZSBDb3J0ZXMgQ29udGV4dCIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICBdCiAgICB9LAogICAgIkFuYWx5emUgQ29ydGVzIERlcGVuZGVuY2llcyI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJDcmVhdGUgVWx0aW1hdGUgQ29ydGVzIENvbnRleHQiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJYY29kZSBDTEkgV2ViaG9vayI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJDb21tYW5kIFBhcnNlciIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICBdCiAgICB9LAogICAgIkNvbW1hbmQgUGFyc2VyIjogewogICAgICAibWFpbiI6IFsKICAgICAgICBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJub2RlIjogIlhjb2RlIEV4ZWN1dG9yIiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiWGNvZGUgRXhlY3V0b3IiOiB7CiAgICAgICJtYWluIjogWwogICAgICAgIFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiUmVzdWx0IEZvcm1hdHRlciIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICBdCiAgICB9LAogICAgIlJlc3VsdCBGb3JtYXR0ZXIiOiB7CiAgICAgICJtYWluIjogWwogICAgICAgIFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5vZGUiOiAiUmVzcG9uc2UiLAogICAgICAgICAgICAidHlwZSI6ICJtYWluIiwKICAgICAgICAgICAgImluZGV4IjogMAogICAgICAgICAgfQogICAgICAgIF0KICAgICAgXQogICAgfSwKICAgICJGaW5hbCBFeHBvcnQgSW5zdHJ1Y3Rpb25zIjogewogICAgICAibWFpbiI6IFsKICAgICAgICBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJub2RlIjogIlNtYXJ0IEFuYWx5c2lzIEVuZ2luZSIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICBdCiAgICB9LAogICAgIlNtYXJ0IEFuYWx5c2lzIEVuZ2luZSI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJFeGVjdXRlIFhjb2RlIENvbW1hbmRzIiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiRXhlY3V0ZSBYY29kZSBDb21tYW5kcyI6IHsKICAgICAgIm1haW4iOiBbCiAgICAgICAgWwogICAgICAgICAgewogICAgICAgICAgICAibm9kZSI6ICJTbWFydCBSZXN1bHRzIFByb2Nlc3NvciIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICBdCiAgICB9LAogICAgIlNtYXJ0IFJlc3VsdHMgUHJvY2Vzc29yIjogewogICAgICAibWFpbiI6IFsKICAgICAgICBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJub2RlIjogIlNtYXJ0IE5vdGlmaWNhdGlvbiBIYW5kbGVyIiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiRXhlY3V0ZSBDb21tYW5kIjogewogICAgICAibWFpbiI6IFsKICAgICAgICBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJub2RlIjogIk1hbmFnZSBIaXN0b3JpY2FsIEZpbGVzIiwKICAgICAgICAgICAgInR5cGUiOiAibWFpbiIsCiAgICAgICAgICAgICJpbmRleCI6IDAKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIF0KICAgIH0sCiAgICAiV0YxIC0gRXZlcnkgNSBNaW51dGVzIjogewogICAgICAibWFpbiI6IFsKICAgICAgICBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJub2RlIjogIkNvbmZpZ3VyZSBDb3J0ZXMgUHJvamVjdCBQYXRocyIsCiAgICAgICAgICAgICJ0eXBlIjogIm1haW4iLAogICAgICAgICAgICAiaW5kZXgiOiAwCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICBdCiAgICB9CiAgfSwKICAic2V0dGluZ3MiOiB7CiAgICAiZXhlY3V0aW9uT3JkZXIiOiAidjEiCiAgfSwKICAic3RhdGljRGF0YSI6IG51bGwsCiAgIm1ldGEiOiB7CiAgICAidGVtcGxhdGVDcmVkc1NldHVwQ29tcGxldGVkIjogdHJ1ZQogIH0sCiAgInBpbkRhdGEiOiB7fSwKICAidmVyc2lvbklkIjogImU4YjU3ODRhLTFlNzUtNGY0OS1hNDEyLTllYjc5N2ZkOTllNSIsCiAgInRyaWdnZXJDb3VudCI6IDIsCiAgInRhZ3MiOiBbXQp9